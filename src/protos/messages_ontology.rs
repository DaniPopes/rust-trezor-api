// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `messages-ontology.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

/// *
///  Ontology Transaction
///  @embed
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:OntologyTransaction)
pub struct OntologyTransaction {
    // message fields
    // @@protoc_insertion_point(field:OntologyTransaction.version)
    pub version: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:OntologyTransaction.type)
    pub type_: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:OntologyTransaction.nonce)
    pub nonce: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:OntologyTransaction.gas_price)
    pub gas_price: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:OntologyTransaction.gas_limit)
    pub gas_limit: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:OntologyTransaction.payer)
    pub payer: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:OntologyTransaction.tx_attributes)
    pub tx_attributes: ::std::vec::Vec<ontology_transaction::OntologyTxAttribute>,
    // special fields
    // @@protoc_insertion_point(special_field:OntologyTransaction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OntologyTransaction {
    fn default() -> &'a OntologyTransaction {
        <OntologyTransaction as ::protobuf::Message>::default_instance()
    }
}

impl OntologyTransaction {
    pub fn new() -> OntologyTransaction {
        ::std::default::Default::default()
    }

    // optional uint32 version = 1;

    pub fn version(&self) -> u32 {
        self.version.unwrap_or(0)
    }

    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = ::std::option::Option::Some(v);
    }

    // optional uint32 type = 2;

    pub fn type_(&self) -> u32 {
        self.type_.unwrap_or(0)
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: u32) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // optional uint32 nonce = 3;

    pub fn nonce(&self) -> u32 {
        self.nonce.unwrap_or(0)
    }

    pub fn clear_nonce(&mut self) {
        self.nonce = ::std::option::Option::None;
    }

    pub fn has_nonce(&self) -> bool {
        self.nonce.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u32) {
        self.nonce = ::std::option::Option::Some(v);
    }

    // optional uint64 gas_price = 4;

    pub fn gas_price(&self) -> u64 {
        self.gas_price.unwrap_or(0)
    }

    pub fn clear_gas_price(&mut self) {
        self.gas_price = ::std::option::Option::None;
    }

    pub fn has_gas_price(&self) -> bool {
        self.gas_price.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gas_price(&mut self, v: u64) {
        self.gas_price = ::std::option::Option::Some(v);
    }

    // optional uint64 gas_limit = 5;

    pub fn gas_limit(&self) -> u64 {
        self.gas_limit.unwrap_or(0)
    }

    pub fn clear_gas_limit(&mut self) {
        self.gas_limit = ::std::option::Option::None;
    }

    pub fn has_gas_limit(&self) -> bool {
        self.gas_limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gas_limit(&mut self, v: u64) {
        self.gas_limit = ::std::option::Option::Some(v);
    }

    // optional string payer = 6;

    pub fn payer(&self) -> &str {
        match self.payer.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_payer(&mut self) {
        self.payer = ::std::option::Option::None;
    }

    pub fn has_payer(&self) -> bool {
        self.payer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payer(&mut self, v: ::std::string::String) {
        self.payer = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payer(&mut self) -> &mut ::std::string::String {
        if self.payer.is_none() {
            self.payer = ::std::option::Option::Some(::std::string::String::new());
        }
        self.payer.as_mut().unwrap()
    }

    // Take field
    pub fn take_payer(&mut self) -> ::std::string::String {
        self.payer.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "version",
            |m: &OntologyTransaction| { &m.version },
            |m: &mut OntologyTransaction| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &OntologyTransaction| { &m.type_ },
            |m: &mut OntologyTransaction| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "nonce",
            |m: &OntologyTransaction| { &m.nonce },
            |m: &mut OntologyTransaction| { &mut m.nonce },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gas_price",
            |m: &OntologyTransaction| { &m.gas_price },
            |m: &mut OntologyTransaction| { &mut m.gas_price },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gas_limit",
            |m: &OntologyTransaction| { &m.gas_limit },
            |m: &mut OntologyTransaction| { &mut m.gas_limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "payer",
            |m: &OntologyTransaction| { &m.payer },
            |m: &mut OntologyTransaction| { &mut m.payer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tx_attributes",
            |m: &OntologyTransaction| { &m.tx_attributes },
            |m: &mut OntologyTransaction| { &mut m.tx_attributes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OntologyTransaction>(
            "OntologyTransaction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OntologyTransaction {
    const NAME: &'static str = "OntologyTransaction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.version = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.type_ = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.nonce = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.gas_price = ::std::option::Option::Some(is.read_uint64()?);
                },
                40 => {
                    self.gas_limit = ::std::option::Option::Some(is.read_uint64()?);
                },
                50 => {
                    self.payer = ::std::option::Option::Some(is.read_string()?);
                },
                58 => {
                    self.tx_attributes.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.version {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.type_ {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.nonce {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.gas_price {
            my_size += ::protobuf::rt::uint64_size(4, v);
        }
        if let Some(v) = self.gas_limit {
            my_size += ::protobuf::rt::uint64_size(5, v);
        }
        if let Some(v) = self.payer.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        for value in &self.tx_attributes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.version {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.type_ {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.nonce {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.gas_price {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.gas_limit {
            os.write_uint64(5, v)?;
        }
        if let Some(v) = self.payer.as_ref() {
            os.write_string(6, v)?;
        }
        for v in &self.tx_attributes {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OntologyTransaction {
        OntologyTransaction::new()
    }

    fn clear(&mut self) {
        self.version = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.nonce = ::std::option::Option::None;
        self.gas_price = ::std::option::Option::None;
        self.gas_limit = ::std::option::Option::None;
        self.payer = ::std::option::Option::None;
        self.tx_attributes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OntologyTransaction {
        static instance: OntologyTransaction = OntologyTransaction {
            version: ::std::option::Option::None,
            type_: ::std::option::Option::None,
            nonce: ::std::option::Option::None,
            gas_price: ::std::option::Option::None,
            gas_limit: ::std::option::Option::None,
            payer: ::std::option::Option::None,
            tx_attributes: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OntologyTransaction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OntologyTransaction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OntologyTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologyTransaction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `OntologyTransaction`
pub mod ontology_transaction {
    /// *
    ///  Attribute of Ontology transaction
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:OntologyTransaction.OntologyTxAttribute)
    pub struct OntologyTxAttribute {
        // message fields
        // @@protoc_insertion_point(field:OntologyTransaction.OntologyTxAttribute.usage)
        pub usage: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:OntologyTransaction.OntologyTxAttribute.data)
        pub data: ::std::option::Option<::std::vec::Vec<u8>>,
        // special fields
        // @@protoc_insertion_point(special_field:OntologyTransaction.OntologyTxAttribute.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a OntologyTxAttribute {
        fn default() -> &'a OntologyTxAttribute {
            <OntologyTxAttribute as ::protobuf::Message>::default_instance()
        }
    }

    impl OntologyTxAttribute {
        pub fn new() -> OntologyTxAttribute {
            ::std::default::Default::default()
        }

        // optional uint32 usage = 1;

        pub fn usage(&self) -> u32 {
            self.usage.unwrap_or(0)
        }

        pub fn clear_usage(&mut self) {
            self.usage = ::std::option::Option::None;
        }

        pub fn has_usage(&self) -> bool {
            self.usage.is_some()
        }

        // Param is passed by value, moved
        pub fn set_usage(&mut self, v: u32) {
            self.usage = ::std::option::Option::Some(v);
        }

        // optional bytes data = 2;

        pub fn data(&self) -> &[u8] {
            match self.data.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_data(&mut self) {
            self.data = ::std::option::Option::None;
        }

        pub fn has_data(&self) -> bool {
            self.data.is_some()
        }

        // Param is passed by value, moved
        pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
            self.data = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.data.is_none() {
                self.data = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.data.as_mut().unwrap()
        }

        // Take field
        pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
            self.data.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "usage",
                |m: &OntologyTxAttribute| { &m.usage },
                |m: &mut OntologyTxAttribute| { &mut m.usage },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "data",
                |m: &OntologyTxAttribute| { &m.data },
                |m: &mut OntologyTxAttribute| { &mut m.data },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OntologyTxAttribute>(
                "OntologyTransaction.OntologyTxAttribute",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for OntologyTxAttribute {
        const NAME: &'static str = "OntologyTxAttribute";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.usage = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.data = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.usage {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.data.as_ref() {
                my_size += ::protobuf::rt::bytes_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.usage {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.data.as_ref() {
                os.write_bytes(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> OntologyTxAttribute {
            OntologyTxAttribute::new()
        }

        fn clear(&mut self) {
            self.usage = ::std::option::Option::None;
            self.data = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static OntologyTxAttribute {
            static instance: OntologyTxAttribute = OntologyTxAttribute {
                usage: ::std::option::Option::None,
                data: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for OntologyTxAttribute {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("OntologyTransaction.OntologyTxAttribute").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for OntologyTxAttribute {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for OntologyTxAttribute {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

/// *
///  Request: Ask device for Ontology public key corresponding to address_n path
///  @start
///  @next OntologyPublicKey
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:OntologyGetPublicKey)
pub struct OntologyGetPublicKey {
    // message fields
    // @@protoc_insertion_point(field:OntologyGetPublicKey.address_n)
    pub address_n: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:OntologyGetPublicKey.show_display)
    pub show_display: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:OntologyGetPublicKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OntologyGetPublicKey {
    fn default() -> &'a OntologyGetPublicKey {
        <OntologyGetPublicKey as ::protobuf::Message>::default_instance()
    }
}

impl OntologyGetPublicKey {
    pub fn new() -> OntologyGetPublicKey {
        ::std::default::Default::default()
    }

    // optional bool show_display = 2;

    pub fn show_display(&self) -> bool {
        self.show_display.unwrap_or(false)
    }

    pub fn clear_show_display(&mut self) {
        self.show_display = ::std::option::Option::None;
    }

    pub fn has_show_display(&self) -> bool {
        self.show_display.is_some()
    }

    // Param is passed by value, moved
    pub fn set_show_display(&mut self, v: bool) {
        self.show_display = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "address_n",
            |m: &OntologyGetPublicKey| { &m.address_n },
            |m: &mut OntologyGetPublicKey| { &mut m.address_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "show_display",
            |m: &OntologyGetPublicKey| { &m.show_display },
            |m: &mut OntologyGetPublicKey| { &mut m.show_display },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OntologyGetPublicKey>(
            "OntologyGetPublicKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OntologyGetPublicKey {
    const NAME: &'static str = "OntologyGetPublicKey";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                },
                8 => {
                    self.address_n.push(is.read_uint32()?);
                },
                16 => {
                    self.show_display = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.show_display {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.show_display {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OntologyGetPublicKey {
        OntologyGetPublicKey::new()
    }

    fn clear(&mut self) {
        self.address_n.clear();
        self.show_display = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OntologyGetPublicKey {
        static instance: OntologyGetPublicKey = OntologyGetPublicKey {
            address_n: ::std::vec::Vec::new(),
            show_display: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OntologyGetPublicKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OntologyGetPublicKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OntologyGetPublicKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologyGetPublicKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Response: Contains Ontology public key derived from device private seed
///  @end
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:OntologyPublicKey)
pub struct OntologyPublicKey {
    // message fields
    // @@protoc_insertion_point(field:OntologyPublicKey.public_key)
    pub public_key: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:OntologyPublicKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OntologyPublicKey {
    fn default() -> &'a OntologyPublicKey {
        <OntologyPublicKey as ::protobuf::Message>::default_instance()
    }
}

impl OntologyPublicKey {
    pub fn new() -> OntologyPublicKey {
        ::std::default::Default::default()
    }

    // optional bytes public_key = 1;

    pub fn public_key(&self) -> &[u8] {
        match self.public_key.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_public_key(&mut self) {
        self.public_key = ::std::option::Option::None;
    }

    pub fn has_public_key(&self) -> bool {
        self.public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.public_key.is_none() {
            self.public_key = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
        self.public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "public_key",
            |m: &OntologyPublicKey| { &m.public_key },
            |m: &mut OntologyPublicKey| { &mut m.public_key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OntologyPublicKey>(
            "OntologyPublicKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OntologyPublicKey {
    const NAME: &'static str = "OntologyPublicKey";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.public_key = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.public_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.public_key.as_ref() {
            os.write_bytes(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OntologyPublicKey {
        OntologyPublicKey::new()
    }

    fn clear(&mut self) {
        self.public_key = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OntologyPublicKey {
        static instance: OntologyPublicKey = OntologyPublicKey {
            public_key: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OntologyPublicKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OntologyPublicKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OntologyPublicKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologyPublicKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: Ask device for Ontology address corresponding to address_n path
///  @start
///  @next OntologyAddress
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:OntologyGetAddress)
pub struct OntologyGetAddress {
    // message fields
    // @@protoc_insertion_point(field:OntologyGetAddress.address_n)
    pub address_n: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:OntologyGetAddress.show_display)
    pub show_display: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:OntologyGetAddress.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OntologyGetAddress {
    fn default() -> &'a OntologyGetAddress {
        <OntologyGetAddress as ::protobuf::Message>::default_instance()
    }
}

impl OntologyGetAddress {
    pub fn new() -> OntologyGetAddress {
        ::std::default::Default::default()
    }

    // optional bool show_display = 2;

    pub fn show_display(&self) -> bool {
        self.show_display.unwrap_or(false)
    }

    pub fn clear_show_display(&mut self) {
        self.show_display = ::std::option::Option::None;
    }

    pub fn has_show_display(&self) -> bool {
        self.show_display.is_some()
    }

    // Param is passed by value, moved
    pub fn set_show_display(&mut self, v: bool) {
        self.show_display = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "address_n",
            |m: &OntologyGetAddress| { &m.address_n },
            |m: &mut OntologyGetAddress| { &mut m.address_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "show_display",
            |m: &OntologyGetAddress| { &m.show_display },
            |m: &mut OntologyGetAddress| { &mut m.show_display },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OntologyGetAddress>(
            "OntologyGetAddress",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OntologyGetAddress {
    const NAME: &'static str = "OntologyGetAddress";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                },
                8 => {
                    self.address_n.push(is.read_uint32()?);
                },
                16 => {
                    self.show_display = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.show_display {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.show_display {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OntologyGetAddress {
        OntologyGetAddress::new()
    }

    fn clear(&mut self) {
        self.address_n.clear();
        self.show_display = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OntologyGetAddress {
        static instance: OntologyGetAddress = OntologyGetAddress {
            address_n: ::std::vec::Vec::new(),
            show_display: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OntologyGetAddress {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OntologyGetAddress").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OntologyGetAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologyGetAddress {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Response: Contains Ontology address derived from device private seed
///  @end
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:OntologyAddress)
pub struct OntologyAddress {
    // message fields
    // @@protoc_insertion_point(field:OntologyAddress.address)
    pub address: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:OntologyAddress.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OntologyAddress {
    fn default() -> &'a OntologyAddress {
        <OntologyAddress as ::protobuf::Message>::default_instance()
    }
}

impl OntologyAddress {
    pub fn new() -> OntologyAddress {
        ::std::default::Default::default()
    }

    // optional string address = 1;

    pub fn address(&self) -> &str {
        match self.address.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_address(&mut self) {
        self.address = ::std::option::Option::None;
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        if self.address.is_none() {
            self.address = ::std::option::Option::Some(::std::string::String::new());
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        self.address.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "address",
            |m: &OntologyAddress| { &m.address },
            |m: &mut OntologyAddress| { &mut m.address },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OntologyAddress>(
            "OntologyAddress",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OntologyAddress {
    const NAME: &'static str = "OntologyAddress";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.address = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.address.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.address.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OntologyAddress {
        OntologyAddress::new()
    }

    fn clear(&mut self) {
        self.address = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OntologyAddress {
        static instance: OntologyAddress = OntologyAddress {
            address: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OntologyAddress {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OntologyAddress").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OntologyAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologyAddress {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: Ask device to sign Ontology transfer
///  @start
///  @next OntologySignedTransfer
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:OntologySignTransfer)
pub struct OntologySignTransfer {
    // message fields
    // @@protoc_insertion_point(field:OntologySignTransfer.address_n)
    pub address_n: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:OntologySignTransfer.transaction)
    pub transaction: ::protobuf::MessageField<OntologyTransaction>,
    // @@protoc_insertion_point(field:OntologySignTransfer.transfer)
    pub transfer: ::protobuf::MessageField<ontology_sign_transfer::OntologyTransfer>,
    // special fields
    // @@protoc_insertion_point(special_field:OntologySignTransfer.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OntologySignTransfer {
    fn default() -> &'a OntologySignTransfer {
        <OntologySignTransfer as ::protobuf::Message>::default_instance()
    }
}

impl OntologySignTransfer {
    pub fn new() -> OntologySignTransfer {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "address_n",
            |m: &OntologySignTransfer| { &m.address_n },
            |m: &mut OntologySignTransfer| { &mut m.address_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, OntologyTransaction>(
            "transaction",
            |m: &OntologySignTransfer| { &m.transaction },
            |m: &mut OntologySignTransfer| { &mut m.transaction },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ontology_sign_transfer::OntologyTransfer>(
            "transfer",
            |m: &OntologySignTransfer| { &m.transfer },
            |m: &mut OntologySignTransfer| { &mut m.transfer },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OntologySignTransfer>(
            "OntologySignTransfer",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OntologySignTransfer {
    const NAME: &'static str = "OntologySignTransfer";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                },
                8 => {
                    self.address_n.push(is.read_uint32()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.transaction)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.transfer)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.transaction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.transfer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.transaction.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.transfer.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OntologySignTransfer {
        OntologySignTransfer::new()
    }

    fn clear(&mut self) {
        self.address_n.clear();
        self.transaction.clear();
        self.transfer.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OntologySignTransfer {
        static instance: OntologySignTransfer = OntologySignTransfer {
            address_n: ::std::vec::Vec::new(),
            transaction: ::protobuf::MessageField::none(),
            transfer: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OntologySignTransfer {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OntologySignTransfer").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OntologySignTransfer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologySignTransfer {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `OntologySignTransfer`
pub mod ontology_sign_transfer {
    /// *
    ///  Ontology Transfer
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:OntologySignTransfer.OntologyTransfer)
    pub struct OntologyTransfer {
        // message fields
        // @@protoc_insertion_point(field:OntologySignTransfer.OntologyTransfer.asset)
        pub asset: ::std::option::Option<::protobuf::EnumOrUnknown<ontology_transfer::OntologyAsset>>,
        // @@protoc_insertion_point(field:OntologySignTransfer.OntologyTransfer.amount)
        pub amount: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:OntologySignTransfer.OntologyTransfer.from_address)
        pub from_address: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:OntologySignTransfer.OntologyTransfer.to_address)
        pub to_address: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:OntologySignTransfer.OntologyTransfer.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a OntologyTransfer {
        fn default() -> &'a OntologyTransfer {
            <OntologyTransfer as ::protobuf::Message>::default_instance()
        }
    }

    impl OntologyTransfer {
        pub fn new() -> OntologyTransfer {
            ::std::default::Default::default()
        }

        // optional .OntologySignTransfer.OntologyTransfer.OntologyAsset asset = 1;

        pub fn asset(&self) -> ontology_transfer::OntologyAsset {
            match self.asset {
                Some(e) => e.enum_value_or(ontology_transfer::OntologyAsset::ONT),
                None => ontology_transfer::OntologyAsset::ONT,
            }
        }

        pub fn clear_asset(&mut self) {
            self.asset = ::std::option::Option::None;
        }

        pub fn has_asset(&self) -> bool {
            self.asset.is_some()
        }

        // Param is passed by value, moved
        pub fn set_asset(&mut self, v: ontology_transfer::OntologyAsset) {
            self.asset = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
        }

        // optional uint64 amount = 2;

        pub fn amount(&self) -> u64 {
            self.amount.unwrap_or(0)
        }

        pub fn clear_amount(&mut self) {
            self.amount = ::std::option::Option::None;
        }

        pub fn has_amount(&self) -> bool {
            self.amount.is_some()
        }

        // Param is passed by value, moved
        pub fn set_amount(&mut self, v: u64) {
            self.amount = ::std::option::Option::Some(v);
        }

        // optional string from_address = 3;

        pub fn from_address(&self) -> &str {
            match self.from_address.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_from_address(&mut self) {
            self.from_address = ::std::option::Option::None;
        }

        pub fn has_from_address(&self) -> bool {
            self.from_address.is_some()
        }

        // Param is passed by value, moved
        pub fn set_from_address(&mut self, v: ::std::string::String) {
            self.from_address = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_from_address(&mut self) -> &mut ::std::string::String {
            if self.from_address.is_none() {
                self.from_address = ::std::option::Option::Some(::std::string::String::new());
            }
            self.from_address.as_mut().unwrap()
        }

        // Take field
        pub fn take_from_address(&mut self) -> ::std::string::String {
            self.from_address.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string to_address = 4;

        pub fn to_address(&self) -> &str {
            match self.to_address.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_to_address(&mut self) {
            self.to_address = ::std::option::Option::None;
        }

        pub fn has_to_address(&self) -> bool {
            self.to_address.is_some()
        }

        // Param is passed by value, moved
        pub fn set_to_address(&mut self, v: ::std::string::String) {
            self.to_address = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_to_address(&mut self) -> &mut ::std::string::String {
            if self.to_address.is_none() {
                self.to_address = ::std::option::Option::Some(::std::string::String::new());
            }
            self.to_address.as_mut().unwrap()
        }

        // Take field
        pub fn take_to_address(&mut self) -> ::std::string::String {
            self.to_address.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "asset",
                |m: &OntologyTransfer| { &m.asset },
                |m: &mut OntologyTransfer| { &mut m.asset },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "amount",
                |m: &OntologyTransfer| { &m.amount },
                |m: &mut OntologyTransfer| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "from_address",
                |m: &OntologyTransfer| { &m.from_address },
                |m: &mut OntologyTransfer| { &mut m.from_address },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "to_address",
                |m: &OntologyTransfer| { &m.to_address },
                |m: &mut OntologyTransfer| { &mut m.to_address },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OntologyTransfer>(
                "OntologySignTransfer.OntologyTransfer",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for OntologyTransfer {
        const NAME: &'static str = "OntologyTransfer";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.asset = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    16 => {
                        self.amount = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    26 => {
                        self.from_address = ::std::option::Option::Some(is.read_string()?);
                    },
                    34 => {
                        self.to_address = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.asset {
                my_size += ::protobuf::rt::int32_size(1, v.value());
            }
            if let Some(v) = self.amount {
                my_size += ::protobuf::rt::uint64_size(2, v);
            }
            if let Some(v) = self.from_address.as_ref() {
                my_size += ::protobuf::rt::string_size(3, &v);
            }
            if let Some(v) = self.to_address.as_ref() {
                my_size += ::protobuf::rt::string_size(4, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.asset {
                os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
            }
            if let Some(v) = self.amount {
                os.write_uint64(2, v)?;
            }
            if let Some(v) = self.from_address.as_ref() {
                os.write_string(3, v)?;
            }
            if let Some(v) = self.to_address.as_ref() {
                os.write_string(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> OntologyTransfer {
            OntologyTransfer::new()
        }

        fn clear(&mut self) {
            self.asset = ::std::option::Option::None;
            self.amount = ::std::option::Option::None;
            self.from_address = ::std::option::Option::None;
            self.to_address = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static OntologyTransfer {
            static instance: OntologyTransfer = OntologyTransfer {
                asset: ::std::option::Option::None,
                amount: ::std::option::Option::None,
                from_address: ::std::option::Option::None,
                to_address: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for OntologyTransfer {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("OntologySignTransfer.OntologyTransfer").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for OntologyTransfer {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for OntologyTransfer {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `OntologyTransfer`
    pub mod ontology_transfer {
        /// *
        ///  Ontology Asset
        #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
        // @@protoc_insertion_point(enum:OntologySignTransfer.OntologyTransfer.OntologyAsset)
        pub enum OntologyAsset {
            // @@protoc_insertion_point(enum_value:OntologySignTransfer.OntologyTransfer.OntologyAsset.ONT)
            ONT = 1,
            // @@protoc_insertion_point(enum_value:OntologySignTransfer.OntologyTransfer.OntologyAsset.ONG)
            ONG = 2,
        }

        impl ::protobuf::Enum for OntologyAsset {
            const NAME: &'static str = "OntologyAsset";

            fn value(&self) -> i32 {
                *self as i32
            }

            fn from_i32(value: i32) -> ::std::option::Option<OntologyAsset> {
                match value {
                    1 => ::std::option::Option::Some(OntologyAsset::ONT),
                    2 => ::std::option::Option::Some(OntologyAsset::ONG),
                    _ => ::std::option::Option::None
                }
            }

            const VALUES: &'static [OntologyAsset] = &[
                OntologyAsset::ONT,
                OntologyAsset::ONG,
            ];
        }

        impl ::protobuf::EnumFull for OntologyAsset {
            fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().enum_by_package_relative_name("OntologySignTransfer.OntologyTransfer.OntologyAsset").unwrap()).clone()
            }

            fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
                let index = match self {
                    OntologyAsset::ONT => 0,
                    OntologyAsset::ONG => 1,
                };
                Self::enum_descriptor().value_by_index(index)
            }
        }

        // Note, `Default` is implemented although default value is not 0
        impl ::std::default::Default for OntologyAsset {
            fn default() -> Self {
                OntologyAsset::ONT
            }
        }

        impl OntologyAsset {
            pub(in super::super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
                ::protobuf::reflect::GeneratedEnumDescriptorData::new::<OntologyAsset>("OntologySignTransfer.OntologyTransfer.OntologyAsset")
            }
        }
    }
}

/// *
///  Response: Contains Ontology transfer signature
///  @end
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:OntologySignedTransfer)
pub struct OntologySignedTransfer {
    // message fields
    // @@protoc_insertion_point(field:OntologySignedTransfer.signature)
    pub signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:OntologySignedTransfer.payload)
    pub payload: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:OntologySignedTransfer.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OntologySignedTransfer {
    fn default() -> &'a OntologySignedTransfer {
        <OntologySignedTransfer as ::protobuf::Message>::default_instance()
    }
}

impl OntologySignedTransfer {
    pub fn new() -> OntologySignedTransfer {
        ::std::default::Default::default()
    }

    // optional bytes signature = 1;

    pub fn signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes payload = 2;

    pub fn payload(&self) -> &[u8] {
        match self.payload.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_payload(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_payload(&self) -> bool {
        self.payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.payload.is_none() {
            self.payload = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        self.payload.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature",
            |m: &OntologySignedTransfer| { &m.signature },
            |m: &mut OntologySignedTransfer| { &mut m.signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "payload",
            |m: &OntologySignedTransfer| { &m.payload },
            |m: &mut OntologySignedTransfer| { &mut m.payload },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OntologySignedTransfer>(
            "OntologySignedTransfer",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OntologySignedTransfer {
    const NAME: &'static str = "OntologySignedTransfer";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.payload = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.payload.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.signature.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.payload.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OntologySignedTransfer {
        OntologySignedTransfer::new()
    }

    fn clear(&mut self) {
        self.signature = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OntologySignedTransfer {
        static instance: OntologySignedTransfer = OntologySignedTransfer {
            signature: ::std::option::Option::None,
            payload: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OntologySignedTransfer {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OntologySignedTransfer").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OntologySignedTransfer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologySignedTransfer {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: Ask device to sign Ontology ONG withdrawal
///  @start
///  @next OntologySignedWithdrawOng
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:OntologySignWithdrawOng)
pub struct OntologySignWithdrawOng {
    // message fields
    // @@protoc_insertion_point(field:OntologySignWithdrawOng.address_n)
    pub address_n: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:OntologySignWithdrawOng.transaction)
    pub transaction: ::protobuf::MessageField<OntologyTransaction>,
    // @@protoc_insertion_point(field:OntologySignWithdrawOng.withdraw_ong)
    pub withdraw_ong: ::protobuf::MessageField<ontology_sign_withdraw_ong::OntologyWithdrawOng>,
    // special fields
    // @@protoc_insertion_point(special_field:OntologySignWithdrawOng.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OntologySignWithdrawOng {
    fn default() -> &'a OntologySignWithdrawOng {
        <OntologySignWithdrawOng as ::protobuf::Message>::default_instance()
    }
}

impl OntologySignWithdrawOng {
    pub fn new() -> OntologySignWithdrawOng {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "address_n",
            |m: &OntologySignWithdrawOng| { &m.address_n },
            |m: &mut OntologySignWithdrawOng| { &mut m.address_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, OntologyTransaction>(
            "transaction",
            |m: &OntologySignWithdrawOng| { &m.transaction },
            |m: &mut OntologySignWithdrawOng| { &mut m.transaction },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ontology_sign_withdraw_ong::OntologyWithdrawOng>(
            "withdraw_ong",
            |m: &OntologySignWithdrawOng| { &m.withdraw_ong },
            |m: &mut OntologySignWithdrawOng| { &mut m.withdraw_ong },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OntologySignWithdrawOng>(
            "OntologySignWithdrawOng",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OntologySignWithdrawOng {
    const NAME: &'static str = "OntologySignWithdrawOng";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                },
                8 => {
                    self.address_n.push(is.read_uint32()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.transaction)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.withdraw_ong)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.transaction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.withdraw_ong.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.transaction.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.withdraw_ong.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OntologySignWithdrawOng {
        OntologySignWithdrawOng::new()
    }

    fn clear(&mut self) {
        self.address_n.clear();
        self.transaction.clear();
        self.withdraw_ong.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OntologySignWithdrawOng {
        static instance: OntologySignWithdrawOng = OntologySignWithdrawOng {
            address_n: ::std::vec::Vec::new(),
            transaction: ::protobuf::MessageField::none(),
            withdraw_ong: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OntologySignWithdrawOng {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OntologySignWithdrawOng").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OntologySignWithdrawOng {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologySignWithdrawOng {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `OntologySignWithdrawOng`
pub mod ontology_sign_withdraw_ong {
    /// *
    ///  Ontology ONG Withdrawal
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:OntologySignWithdrawOng.OntologyWithdrawOng)
    pub struct OntologyWithdrawOng {
        // message fields
        // @@protoc_insertion_point(field:OntologySignWithdrawOng.OntologyWithdrawOng.amount)
        pub amount: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:OntologySignWithdrawOng.OntologyWithdrawOng.from_address)
        pub from_address: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:OntologySignWithdrawOng.OntologyWithdrawOng.to_address)
        pub to_address: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:OntologySignWithdrawOng.OntologyWithdrawOng.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a OntologyWithdrawOng {
        fn default() -> &'a OntologyWithdrawOng {
            <OntologyWithdrawOng as ::protobuf::Message>::default_instance()
        }
    }

    impl OntologyWithdrawOng {
        pub fn new() -> OntologyWithdrawOng {
            ::std::default::Default::default()
        }

        // optional uint64 amount = 1;

        pub fn amount(&self) -> u64 {
            self.amount.unwrap_or(0)
        }

        pub fn clear_amount(&mut self) {
            self.amount = ::std::option::Option::None;
        }

        pub fn has_amount(&self) -> bool {
            self.amount.is_some()
        }

        // Param is passed by value, moved
        pub fn set_amount(&mut self, v: u64) {
            self.amount = ::std::option::Option::Some(v);
        }

        // optional string from_address = 2;

        pub fn from_address(&self) -> &str {
            match self.from_address.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_from_address(&mut self) {
            self.from_address = ::std::option::Option::None;
        }

        pub fn has_from_address(&self) -> bool {
            self.from_address.is_some()
        }

        // Param is passed by value, moved
        pub fn set_from_address(&mut self, v: ::std::string::String) {
            self.from_address = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_from_address(&mut self) -> &mut ::std::string::String {
            if self.from_address.is_none() {
                self.from_address = ::std::option::Option::Some(::std::string::String::new());
            }
            self.from_address.as_mut().unwrap()
        }

        // Take field
        pub fn take_from_address(&mut self) -> ::std::string::String {
            self.from_address.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string to_address = 3;

        pub fn to_address(&self) -> &str {
            match self.to_address.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_to_address(&mut self) {
            self.to_address = ::std::option::Option::None;
        }

        pub fn has_to_address(&self) -> bool {
            self.to_address.is_some()
        }

        // Param is passed by value, moved
        pub fn set_to_address(&mut self, v: ::std::string::String) {
            self.to_address = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_to_address(&mut self) -> &mut ::std::string::String {
            if self.to_address.is_none() {
                self.to_address = ::std::option::Option::Some(::std::string::String::new());
            }
            self.to_address.as_mut().unwrap()
        }

        // Take field
        pub fn take_to_address(&mut self) -> ::std::string::String {
            self.to_address.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "amount",
                |m: &OntologyWithdrawOng| { &m.amount },
                |m: &mut OntologyWithdrawOng| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "from_address",
                |m: &OntologyWithdrawOng| { &m.from_address },
                |m: &mut OntologyWithdrawOng| { &mut m.from_address },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "to_address",
                |m: &OntologyWithdrawOng| { &m.to_address },
                |m: &mut OntologyWithdrawOng| { &mut m.to_address },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OntologyWithdrawOng>(
                "OntologySignWithdrawOng.OntologyWithdrawOng",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for OntologyWithdrawOng {
        const NAME: &'static str = "OntologyWithdrawOng";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.amount = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    18 => {
                        self.from_address = ::std::option::Option::Some(is.read_string()?);
                    },
                    26 => {
                        self.to_address = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.amount {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.from_address.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.to_address.as_ref() {
                my_size += ::protobuf::rt::string_size(3, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.amount {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.from_address.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.to_address.as_ref() {
                os.write_string(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> OntologyWithdrawOng {
            OntologyWithdrawOng::new()
        }

        fn clear(&mut self) {
            self.amount = ::std::option::Option::None;
            self.from_address = ::std::option::Option::None;
            self.to_address = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static OntologyWithdrawOng {
            static instance: OntologyWithdrawOng = OntologyWithdrawOng {
                amount: ::std::option::Option::None,
                from_address: ::std::option::Option::None,
                to_address: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for OntologyWithdrawOng {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("OntologySignWithdrawOng.OntologyWithdrawOng").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for OntologyWithdrawOng {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for OntologyWithdrawOng {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

/// *
///  Response: Contains Ontology ONG withdrawal signature
///  @end
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:OntologySignedWithdrawOng)
pub struct OntologySignedWithdrawOng {
    // message fields
    // @@protoc_insertion_point(field:OntologySignedWithdrawOng.signature)
    pub signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:OntologySignedWithdrawOng.payload)
    pub payload: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:OntologySignedWithdrawOng.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OntologySignedWithdrawOng {
    fn default() -> &'a OntologySignedWithdrawOng {
        <OntologySignedWithdrawOng as ::protobuf::Message>::default_instance()
    }
}

impl OntologySignedWithdrawOng {
    pub fn new() -> OntologySignedWithdrawOng {
        ::std::default::Default::default()
    }

    // optional bytes signature = 1;

    pub fn signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes payload = 2;

    pub fn payload(&self) -> &[u8] {
        match self.payload.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_payload(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_payload(&self) -> bool {
        self.payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.payload.is_none() {
            self.payload = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        self.payload.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature",
            |m: &OntologySignedWithdrawOng| { &m.signature },
            |m: &mut OntologySignedWithdrawOng| { &mut m.signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "payload",
            |m: &OntologySignedWithdrawOng| { &m.payload },
            |m: &mut OntologySignedWithdrawOng| { &mut m.payload },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OntologySignedWithdrawOng>(
            "OntologySignedWithdrawOng",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OntologySignedWithdrawOng {
    const NAME: &'static str = "OntologySignedWithdrawOng";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.payload = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.payload.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.signature.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.payload.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OntologySignedWithdrawOng {
        OntologySignedWithdrawOng::new()
    }

    fn clear(&mut self) {
        self.signature = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OntologySignedWithdrawOng {
        static instance: OntologySignedWithdrawOng = OntologySignedWithdrawOng {
            signature: ::std::option::Option::None,
            payload: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OntologySignedWithdrawOng {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OntologySignedWithdrawOng").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OntologySignedWithdrawOng {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologySignedWithdrawOng {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: Ask device to sign Ontology ONT ID registration
///  @start
///  @next OntologySignedOntIdRegister
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:OntologySignOntIdRegister)
pub struct OntologySignOntIdRegister {
    // message fields
    // @@protoc_insertion_point(field:OntologySignOntIdRegister.address_n)
    pub address_n: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:OntologySignOntIdRegister.transaction)
    pub transaction: ::protobuf::MessageField<OntologyTransaction>,
    // @@protoc_insertion_point(field:OntologySignOntIdRegister.ont_id_register)
    pub ont_id_register: ::protobuf::MessageField<ontology_sign_ont_id_register::OntologyOntIdRegister>,
    // special fields
    // @@protoc_insertion_point(special_field:OntologySignOntIdRegister.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OntologySignOntIdRegister {
    fn default() -> &'a OntologySignOntIdRegister {
        <OntologySignOntIdRegister as ::protobuf::Message>::default_instance()
    }
}

impl OntologySignOntIdRegister {
    pub fn new() -> OntologySignOntIdRegister {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "address_n",
            |m: &OntologySignOntIdRegister| { &m.address_n },
            |m: &mut OntologySignOntIdRegister| { &mut m.address_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, OntologyTransaction>(
            "transaction",
            |m: &OntologySignOntIdRegister| { &m.transaction },
            |m: &mut OntologySignOntIdRegister| { &mut m.transaction },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ontology_sign_ont_id_register::OntologyOntIdRegister>(
            "ont_id_register",
            |m: &OntologySignOntIdRegister| { &m.ont_id_register },
            |m: &mut OntologySignOntIdRegister| { &mut m.ont_id_register },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OntologySignOntIdRegister>(
            "OntologySignOntIdRegister",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OntologySignOntIdRegister {
    const NAME: &'static str = "OntologySignOntIdRegister";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                },
                8 => {
                    self.address_n.push(is.read_uint32()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.transaction)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ont_id_register)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.transaction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.ont_id_register.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.transaction.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.ont_id_register.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OntologySignOntIdRegister {
        OntologySignOntIdRegister::new()
    }

    fn clear(&mut self) {
        self.address_n.clear();
        self.transaction.clear();
        self.ont_id_register.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OntologySignOntIdRegister {
        static instance: OntologySignOntIdRegister = OntologySignOntIdRegister {
            address_n: ::std::vec::Vec::new(),
            transaction: ::protobuf::MessageField::none(),
            ont_id_register: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OntologySignOntIdRegister {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OntologySignOntIdRegister").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OntologySignOntIdRegister {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologySignOntIdRegister {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `OntologySignOntIdRegister`
pub mod ontology_sign_ont_id_register {
    /// *
    ///  Ontology ONT ID registration
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:OntologySignOntIdRegister.OntologyOntIdRegister)
    pub struct OntologyOntIdRegister {
        // message fields
        // @@protoc_insertion_point(field:OntologySignOntIdRegister.OntologyOntIdRegister.ont_id)
        pub ont_id: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:OntologySignOntIdRegister.OntologyOntIdRegister.public_key)
        pub public_key: ::std::option::Option<::std::vec::Vec<u8>>,
        // special fields
        // @@protoc_insertion_point(special_field:OntologySignOntIdRegister.OntologyOntIdRegister.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a OntologyOntIdRegister {
        fn default() -> &'a OntologyOntIdRegister {
            <OntologyOntIdRegister as ::protobuf::Message>::default_instance()
        }
    }

    impl OntologyOntIdRegister {
        pub fn new() -> OntologyOntIdRegister {
            ::std::default::Default::default()
        }

        // optional string ont_id = 1;

        pub fn ont_id(&self) -> &str {
            match self.ont_id.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_ont_id(&mut self) {
            self.ont_id = ::std::option::Option::None;
        }

        pub fn has_ont_id(&self) -> bool {
            self.ont_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ont_id(&mut self, v: ::std::string::String) {
            self.ont_id = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_ont_id(&mut self) -> &mut ::std::string::String {
            if self.ont_id.is_none() {
                self.ont_id = ::std::option::Option::Some(::std::string::String::new());
            }
            self.ont_id.as_mut().unwrap()
        }

        // Take field
        pub fn take_ont_id(&mut self) -> ::std::string::String {
            self.ont_id.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bytes public_key = 2;

        pub fn public_key(&self) -> &[u8] {
            match self.public_key.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_public_key(&mut self) {
            self.public_key = ::std::option::Option::None;
        }

        pub fn has_public_key(&self) -> bool {
            self.public_key.is_some()
        }

        // Param is passed by value, moved
        pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
            self.public_key = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.public_key.is_none() {
                self.public_key = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.public_key.as_mut().unwrap()
        }

        // Take field
        pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
            self.public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "ont_id",
                |m: &OntologyOntIdRegister| { &m.ont_id },
                |m: &mut OntologyOntIdRegister| { &mut m.ont_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "public_key",
                |m: &OntologyOntIdRegister| { &m.public_key },
                |m: &mut OntologyOntIdRegister| { &mut m.public_key },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OntologyOntIdRegister>(
                "OntologySignOntIdRegister.OntologyOntIdRegister",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for OntologyOntIdRegister {
        const NAME: &'static str = "OntologyOntIdRegister";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.ont_id = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.public_key = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.ont_id.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.public_key.as_ref() {
                my_size += ::protobuf::rt::bytes_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.ont_id.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.public_key.as_ref() {
                os.write_bytes(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> OntologyOntIdRegister {
            OntologyOntIdRegister::new()
        }

        fn clear(&mut self) {
            self.ont_id = ::std::option::Option::None;
            self.public_key = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static OntologyOntIdRegister {
            static instance: OntologyOntIdRegister = OntologyOntIdRegister {
                ont_id: ::std::option::Option::None,
                public_key: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for OntologyOntIdRegister {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("OntologySignOntIdRegister.OntologyOntIdRegister").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for OntologyOntIdRegister {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for OntologyOntIdRegister {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

/// *
///  Response: Contains Ontology ONT ID registration signature
///  @end
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:OntologySignedOntIdRegister)
pub struct OntologySignedOntIdRegister {
    // message fields
    // @@protoc_insertion_point(field:OntologySignedOntIdRegister.signature)
    pub signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:OntologySignedOntIdRegister.payload)
    pub payload: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:OntologySignedOntIdRegister.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OntologySignedOntIdRegister {
    fn default() -> &'a OntologySignedOntIdRegister {
        <OntologySignedOntIdRegister as ::protobuf::Message>::default_instance()
    }
}

impl OntologySignedOntIdRegister {
    pub fn new() -> OntologySignedOntIdRegister {
        ::std::default::Default::default()
    }

    // optional bytes signature = 1;

    pub fn signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes payload = 2;

    pub fn payload(&self) -> &[u8] {
        match self.payload.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_payload(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_payload(&self) -> bool {
        self.payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.payload.is_none() {
            self.payload = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        self.payload.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature",
            |m: &OntologySignedOntIdRegister| { &m.signature },
            |m: &mut OntologySignedOntIdRegister| { &mut m.signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "payload",
            |m: &OntologySignedOntIdRegister| { &m.payload },
            |m: &mut OntologySignedOntIdRegister| { &mut m.payload },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OntologySignedOntIdRegister>(
            "OntologySignedOntIdRegister",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OntologySignedOntIdRegister {
    const NAME: &'static str = "OntologySignedOntIdRegister";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.payload = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.payload.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.signature.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.payload.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OntologySignedOntIdRegister {
        OntologySignedOntIdRegister::new()
    }

    fn clear(&mut self) {
        self.signature = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OntologySignedOntIdRegister {
        static instance: OntologySignedOntIdRegister = OntologySignedOntIdRegister {
            signature: ::std::option::Option::None,
            payload: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OntologySignedOntIdRegister {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OntologySignedOntIdRegister").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OntologySignedOntIdRegister {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologySignedOntIdRegister {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: Ask device to sign Ontology ONT ID attributes adding
///  @start
///  @next OntologySignedOntIdAddAttributes
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:OntologySignOntIdAddAttributes)
pub struct OntologySignOntIdAddAttributes {
    // message fields
    // @@protoc_insertion_point(field:OntologySignOntIdAddAttributes.address_n)
    pub address_n: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:OntologySignOntIdAddAttributes.transaction)
    pub transaction: ::protobuf::MessageField<OntologyTransaction>,
    // @@protoc_insertion_point(field:OntologySignOntIdAddAttributes.ont_id_add_attributes)
    pub ont_id_add_attributes: ::protobuf::MessageField<ontology_sign_ont_id_add_attributes::OntologyOntIdAddAttributes>,
    // special fields
    // @@protoc_insertion_point(special_field:OntologySignOntIdAddAttributes.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OntologySignOntIdAddAttributes {
    fn default() -> &'a OntologySignOntIdAddAttributes {
        <OntologySignOntIdAddAttributes as ::protobuf::Message>::default_instance()
    }
}

impl OntologySignOntIdAddAttributes {
    pub fn new() -> OntologySignOntIdAddAttributes {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "address_n",
            |m: &OntologySignOntIdAddAttributes| { &m.address_n },
            |m: &mut OntologySignOntIdAddAttributes| { &mut m.address_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, OntologyTransaction>(
            "transaction",
            |m: &OntologySignOntIdAddAttributes| { &m.transaction },
            |m: &mut OntologySignOntIdAddAttributes| { &mut m.transaction },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ontology_sign_ont_id_add_attributes::OntologyOntIdAddAttributes>(
            "ont_id_add_attributes",
            |m: &OntologySignOntIdAddAttributes| { &m.ont_id_add_attributes },
            |m: &mut OntologySignOntIdAddAttributes| { &mut m.ont_id_add_attributes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OntologySignOntIdAddAttributes>(
            "OntologySignOntIdAddAttributes",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OntologySignOntIdAddAttributes {
    const NAME: &'static str = "OntologySignOntIdAddAttributes";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                },
                8 => {
                    self.address_n.push(is.read_uint32()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.transaction)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ont_id_add_attributes)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.transaction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.ont_id_add_attributes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.transaction.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.ont_id_add_attributes.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OntologySignOntIdAddAttributes {
        OntologySignOntIdAddAttributes::new()
    }

    fn clear(&mut self) {
        self.address_n.clear();
        self.transaction.clear();
        self.ont_id_add_attributes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OntologySignOntIdAddAttributes {
        static instance: OntologySignOntIdAddAttributes = OntologySignOntIdAddAttributes {
            address_n: ::std::vec::Vec::new(),
            transaction: ::protobuf::MessageField::none(),
            ont_id_add_attributes: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OntologySignOntIdAddAttributes {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OntologySignOntIdAddAttributes").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OntologySignOntIdAddAttributes {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologySignOntIdAddAttributes {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `OntologySignOntIdAddAttributes`
pub mod ontology_sign_ont_id_add_attributes {
    /// *
    ///  Ontology ONT ID attributes adding
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes)
    pub struct OntologyOntIdAddAttributes {
        // message fields
        // @@protoc_insertion_point(field:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.ont_id)
        pub ont_id: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.public_key)
        pub public_key: ::std::option::Option<::std::vec::Vec<u8>>,
        // @@protoc_insertion_point(field:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.ont_id_attributes)
        pub ont_id_attributes: ::std::vec::Vec<ontology_ont_id_add_attributes::OntologyOntIdAttribute>,
        // special fields
        // @@protoc_insertion_point(special_field:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a OntologyOntIdAddAttributes {
        fn default() -> &'a OntologyOntIdAddAttributes {
            <OntologyOntIdAddAttributes as ::protobuf::Message>::default_instance()
        }
    }

    impl OntologyOntIdAddAttributes {
        pub fn new() -> OntologyOntIdAddAttributes {
            ::std::default::Default::default()
        }

        // optional string ont_id = 1;

        pub fn ont_id(&self) -> &str {
            match self.ont_id.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_ont_id(&mut self) {
            self.ont_id = ::std::option::Option::None;
        }

        pub fn has_ont_id(&self) -> bool {
            self.ont_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_ont_id(&mut self, v: ::std::string::String) {
            self.ont_id = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_ont_id(&mut self) -> &mut ::std::string::String {
            if self.ont_id.is_none() {
                self.ont_id = ::std::option::Option::Some(::std::string::String::new());
            }
            self.ont_id.as_mut().unwrap()
        }

        // Take field
        pub fn take_ont_id(&mut self) -> ::std::string::String {
            self.ont_id.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bytes public_key = 2;

        pub fn public_key(&self) -> &[u8] {
            match self.public_key.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_public_key(&mut self) {
            self.public_key = ::std::option::Option::None;
        }

        pub fn has_public_key(&self) -> bool {
            self.public_key.is_some()
        }

        // Param is passed by value, moved
        pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
            self.public_key = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.public_key.is_none() {
                self.public_key = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.public_key.as_mut().unwrap()
        }

        // Take field
        pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
            self.public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "ont_id",
                |m: &OntologyOntIdAddAttributes| { &m.ont_id },
                |m: &mut OntologyOntIdAddAttributes| { &mut m.ont_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "public_key",
                |m: &OntologyOntIdAddAttributes| { &m.public_key },
                |m: &mut OntologyOntIdAddAttributes| { &mut m.public_key },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "ont_id_attributes",
                |m: &OntologyOntIdAddAttributes| { &m.ont_id_attributes },
                |m: &mut OntologyOntIdAddAttributes| { &mut m.ont_id_attributes },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OntologyOntIdAddAttributes>(
                "OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for OntologyOntIdAddAttributes {
        const NAME: &'static str = "OntologyOntIdAddAttributes";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.ont_id = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.public_key = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    26 => {
                        self.ont_id_attributes.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.ont_id.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.public_key.as_ref() {
                my_size += ::protobuf::rt::bytes_size(2, &v);
            }
            for value in &self.ont_id_attributes {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.ont_id.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.public_key.as_ref() {
                os.write_bytes(2, v)?;
            }
            for v in &self.ont_id_attributes {
                ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> OntologyOntIdAddAttributes {
            OntologyOntIdAddAttributes::new()
        }

        fn clear(&mut self) {
            self.ont_id = ::std::option::Option::None;
            self.public_key = ::std::option::Option::None;
            self.ont_id_attributes.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static OntologyOntIdAddAttributes {
            static instance: OntologyOntIdAddAttributes = OntologyOntIdAddAttributes {
                ont_id: ::std::option::Option::None,
                public_key: ::std::option::Option::None,
                ont_id_attributes: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for OntologyOntIdAddAttributes {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for OntologyOntIdAddAttributes {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for OntologyOntIdAddAttributes {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `OntologyOntIdAddAttributes`
    pub mod ontology_ont_id_add_attributes {
        /// *
        ///  Attribute of Ontology ONT ID
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute)
        pub struct OntologyOntIdAttribute {
            // message fields
            // @@protoc_insertion_point(field:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute.key)
            pub key: ::std::option::Option<::std::string::String>,
            // @@protoc_insertion_point(field:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute.type)
            pub type_: ::std::option::Option<::std::string::String>,
            // @@protoc_insertion_point(field:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute.value)
            pub value: ::std::option::Option<::std::string::String>,
            // special fields
            // @@protoc_insertion_point(special_field:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a OntologyOntIdAttribute {
            fn default() -> &'a OntologyOntIdAttribute {
                <OntologyOntIdAttribute as ::protobuf::Message>::default_instance()
            }
        }

        impl OntologyOntIdAttribute {
            pub fn new() -> OntologyOntIdAttribute {
                ::std::default::Default::default()
            }

            // optional string key = 1;

            pub fn key(&self) -> &str {
                match self.key.as_ref() {
                    Some(v) => v,
                    None => "",
                }
            }

            pub fn clear_key(&mut self) {
                self.key = ::std::option::Option::None;
            }

            pub fn has_key(&self) -> bool {
                self.key.is_some()
            }

            // Param is passed by value, moved
            pub fn set_key(&mut self, v: ::std::string::String) {
                self.key = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_key(&mut self) -> &mut ::std::string::String {
                if self.key.is_none() {
                    self.key = ::std::option::Option::Some(::std::string::String::new());
                }
                self.key.as_mut().unwrap()
            }

            // Take field
            pub fn take_key(&mut self) -> ::std::string::String {
                self.key.take().unwrap_or_else(|| ::std::string::String::new())
            }

            // optional string type = 2;

            pub fn type_(&self) -> &str {
                match self.type_.as_ref() {
                    Some(v) => v,
                    None => "",
                }
            }

            pub fn clear_type_(&mut self) {
                self.type_ = ::std::option::Option::None;
            }

            pub fn has_type(&self) -> bool {
                self.type_.is_some()
            }

            // Param is passed by value, moved
            pub fn set_type(&mut self, v: ::std::string::String) {
                self.type_ = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_type(&mut self) -> &mut ::std::string::String {
                if self.type_.is_none() {
                    self.type_ = ::std::option::Option::Some(::std::string::String::new());
                }
                self.type_.as_mut().unwrap()
            }

            // Take field
            pub fn take_type_(&mut self) -> ::std::string::String {
                self.type_.take().unwrap_or_else(|| ::std::string::String::new())
            }

            // optional string value = 3;

            pub fn value(&self) -> &str {
                match self.value.as_ref() {
                    Some(v) => v,
                    None => "",
                }
            }

            pub fn clear_value(&mut self) {
                self.value = ::std::option::Option::None;
            }

            pub fn has_value(&self) -> bool {
                self.value.is_some()
            }

            // Param is passed by value, moved
            pub fn set_value(&mut self, v: ::std::string::String) {
                self.value = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_value(&mut self) -> &mut ::std::string::String {
                if self.value.is_none() {
                    self.value = ::std::option::Option::Some(::std::string::String::new());
                }
                self.value.as_mut().unwrap()
            }

            // Take field
            pub fn take_value(&mut self) -> ::std::string::String {
                self.value.take().unwrap_or_else(|| ::std::string::String::new())
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(3);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "key",
                    |m: &OntologyOntIdAttribute| { &m.key },
                    |m: &mut OntologyOntIdAttribute| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "type",
                    |m: &OntologyOntIdAttribute| { &m.type_ },
                    |m: &mut OntologyOntIdAttribute| { &mut m.type_ },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "value",
                    |m: &OntologyOntIdAttribute| { &m.value },
                    |m: &mut OntologyOntIdAttribute| { &mut m.value },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OntologyOntIdAttribute>(
                    "OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for OntologyOntIdAttribute {
            const NAME: &'static str = "OntologyOntIdAttribute";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.key = ::std::option::Option::Some(is.read_string()?);
                        },
                        18 => {
                            self.type_ = ::std::option::Option::Some(is.read_string()?);
                        },
                        26 => {
                            self.value = ::std::option::Option::Some(is.read_string()?);
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.key.as_ref() {
                    my_size += ::protobuf::rt::string_size(1, &v);
                }
                if let Some(v) = self.type_.as_ref() {
                    my_size += ::protobuf::rt::string_size(2, &v);
                }
                if let Some(v) = self.value.as_ref() {
                    my_size += ::protobuf::rt::string_size(3, &v);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.key.as_ref() {
                    os.write_string(1, v)?;
                }
                if let Some(v) = self.type_.as_ref() {
                    os.write_string(2, v)?;
                }
                if let Some(v) = self.value.as_ref() {
                    os.write_string(3, v)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> OntologyOntIdAttribute {
                OntologyOntIdAttribute::new()
            }

            fn clear(&mut self) {
                self.key = ::std::option::Option::None;
                self.type_ = ::std::option::Option::None;
                self.value = ::std::option::Option::None;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static OntologyOntIdAttribute {
                static instance: OntologyOntIdAttribute = OntologyOntIdAttribute {
                    key: ::std::option::Option::None,
                    type_: ::std::option::Option::None,
                    value: ::std::option::Option::None,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for OntologyOntIdAttribute {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for OntologyOntIdAttribute {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for OntologyOntIdAttribute {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }
}

/// *
///  Response: Contains Ontology ONT ID attributes adding signature
///  @end
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:OntologySignedOntIdAddAttributes)
pub struct OntologySignedOntIdAddAttributes {
    // message fields
    // @@protoc_insertion_point(field:OntologySignedOntIdAddAttributes.signature)
    pub signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:OntologySignedOntIdAddAttributes.payload)
    pub payload: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:OntologySignedOntIdAddAttributes.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OntologySignedOntIdAddAttributes {
    fn default() -> &'a OntologySignedOntIdAddAttributes {
        <OntologySignedOntIdAddAttributes as ::protobuf::Message>::default_instance()
    }
}

impl OntologySignedOntIdAddAttributes {
    pub fn new() -> OntologySignedOntIdAddAttributes {
        ::std::default::Default::default()
    }

    // optional bytes signature = 1;

    pub fn signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes payload = 2;

    pub fn payload(&self) -> &[u8] {
        match self.payload.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_payload(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_payload(&self) -> bool {
        self.payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.payload.is_none() {
            self.payload = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        self.payload.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature",
            |m: &OntologySignedOntIdAddAttributes| { &m.signature },
            |m: &mut OntologySignedOntIdAddAttributes| { &mut m.signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "payload",
            |m: &OntologySignedOntIdAddAttributes| { &m.payload },
            |m: &mut OntologySignedOntIdAddAttributes| { &mut m.payload },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OntologySignedOntIdAddAttributes>(
            "OntologySignedOntIdAddAttributes",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OntologySignedOntIdAddAttributes {
    const NAME: &'static str = "OntologySignedOntIdAddAttributes";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.payload = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.payload.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.signature.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.payload.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OntologySignedOntIdAddAttributes {
        OntologySignedOntIdAddAttributes::new()
    }

    fn clear(&mut self) {
        self.signature = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OntologySignedOntIdAddAttributes {
        static instance: OntologySignedOntIdAddAttributes = OntologySignedOntIdAddAttributes {
            signature: ::std::option::Option::None,
            payload: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OntologySignedOntIdAddAttributes {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OntologySignedOntIdAddAttributes").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OntologySignedOntIdAddAttributes {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OntologySignedOntIdAddAttributes {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17messages-ontology.proto\"\xb9\x02\n\x13OntologyTransaction\x12\x18\
    \n\x07version\x18\x01\x20\x01(\rR\x07version\x12\x12\n\x04type\x18\x02\
    \x20\x01(\rR\x04type\x12\x14\n\x05nonce\x18\x03\x20\x01(\rR\x05nonce\x12\
    \x1b\n\tgas_price\x18\x04\x20\x01(\x04R\x08gasPrice\x12\x1b\n\tgas_limit\
    \x18\x05\x20\x01(\x04R\x08gasLimit\x12\x14\n\x05payer\x18\x06\x20\x01(\t\
    R\x05payer\x12M\n\rtx_attributes\x18\x07\x20\x03(\x0b2(.OntologyTransact\
    ion.OntologyTxAttributeR\x0ctxAttributes\x1a?\n\x13OntologyTxAttribute\
    \x12\x14\n\x05usage\x18\x01\x20\x01(\rR\x05usage\x12\x12\n\x04data\x18\
    \x02\x20\x01(\x0cR\x04data\"V\n\x14OntologyGetPublicKey\x12\x1b\n\taddre\
    ss_n\x18\x01\x20\x03(\rR\x08addressN\x12!\n\x0cshow_display\x18\x02\x20\
    \x01(\x08R\x0bshowDisplay\"2\n\x11OntologyPublicKey\x12\x1d\n\npublic_ke\
    y\x18\x01\x20\x01(\x0cR\tpublicKey\"T\n\x12OntologyGetAddress\x12\x1b\n\
    \taddress_n\x18\x01\x20\x03(\rR\x08addressN\x12!\n\x0cshow_display\x18\
    \x02\x20\x01(\x08R\x0bshowDisplay\"+\n\x0fOntologyAddress\x12\x18\n\x07a\
    ddress\x18\x01\x20\x01(\tR\x07address\"\x8d\x03\n\x14OntologySignTransfe\
    r\x12\x1b\n\taddress_n\x18\x01\x20\x03(\rR\x08addressN\x126\n\x0btransac\
    tion\x18\x02\x20\x01(\x0b2\x14.OntologyTransactionR\x0btransaction\x12B\
    \n\x08transfer\x18\x03\x20\x01(\x0b2&.OntologySignTransfer.OntologyTrans\
    ferR\x08transfer\x1a\xdb\x01\n\x10OntologyTransfer\x12J\n\x05asset\x18\
    \x01\x20\x01(\x0e24.OntologySignTransfer.OntologyTransfer.OntologyAssetR\
    \x05asset\x12\x16\n\x06amount\x18\x02\x20\x01(\x04R\x06amount\x12!\n\x0c\
    from_address\x18\x03\x20\x01(\tR\x0bfromAddress\x12\x1d\n\nto_address\
    \x18\x04\x20\x01(\tR\ttoAddress\"!\n\rOntologyAsset\x12\x07\n\x03ONT\x10\
    \x01\x12\x07\n\x03ONG\x10\x02\"P\n\x16OntologySignedTransfer\x12\x1c\n\t\
    signature\x18\x01\x20\x01(\x0cR\tsignature\x12\x18\n\x07payload\x18\x02\
    \x20\x01(\x0cR\x07payload\"\xb0\x02\n\x17OntologySignWithdrawOng\x12\x1b\
    \n\taddress_n\x18\x01\x20\x03(\rR\x08addressN\x126\n\x0btransaction\x18\
    \x02\x20\x01(\x0b2\x14.OntologyTransactionR\x0btransaction\x12O\n\x0cwit\
    hdraw_ong\x18\x03\x20\x01(\x0b2,.OntologySignWithdrawOng.OntologyWithdra\
    wOngR\x0bwithdrawOng\x1ao\n\x13OntologyWithdrawOng\x12\x16\n\x06amount\
    \x18\x01\x20\x01(\x04R\x06amount\x12!\n\x0cfrom_address\x18\x02\x20\x01(\
    \tR\x0bfromAddress\x12\x1d\n\nto_address\x18\x03\x20\x01(\tR\ttoAddress\
    \"S\n\x19OntologySignedWithdrawOng\x12\x1c\n\tsignature\x18\x01\x20\x01(\
    \x0cR\tsignature\x12\x18\n\x07payload\x18\x02\x20\x01(\x0cR\x07payload\"\
    \x99\x02\n\x19OntologySignOntIdRegister\x12\x1b\n\taddress_n\x18\x01\x20\
    \x03(\rR\x08addressN\x126\n\x0btransaction\x18\x02\x20\x01(\x0b2\x14.Ont\
    ologyTransactionR\x0btransaction\x12X\n\x0font_id_register\x18\x03\x20\
    \x01(\x0b20.OntologySignOntIdRegister.OntologyOntIdRegisterR\rontIdRegis\
    ter\x1aM\n\x15OntologyOntIdRegister\x12\x15\n\x06ont_id\x18\x01\x20\x01(\
    \tR\x05ontId\x12\x1d\n\npublic_key\x18\x02\x20\x01(\x0cR\tpublicKey\"U\n\
    \x1bOntologySignedOntIdRegister\x12\x1c\n\tsignature\x18\x01\x20\x01(\
    \x0cR\tsignature\x12\x18\n\x07payload\x18\x02\x20\x01(\x0cR\x07payload\"\
    \x8e\x04\n\x1eOntologySignOntIdAddAttributes\x12\x1b\n\taddress_n\x18\
    \x01\x20\x03(\rR\x08addressN\x126\n\x0btransaction\x18\x02\x20\x01(\x0b2\
    \x14.OntologyTransactionR\x0btransaction\x12m\n\x15ont_id_add_attributes\
    \x18\x03\x20\x01(\x0b2:.OntologySignOntIdAddAttributes.OntologyOntIdAddA\
    ttributesR\x12ontIdAddAttributes\x1a\xa7\x02\n\x1aOntologyOntIdAddAttrib\
    utes\x12\x15\n\x06ont_id\x18\x01\x20\x01(\tR\x05ontId\x12\x1d\n\npublic_\
    key\x18\x02\x20\x01(\x0cR\tpublicKey\x12}\n\x11ont_id_attributes\x18\x03\
    \x20\x03(\x0b2Q.OntologySignOntIdAddAttributes.OntologyOntIdAddAttribute\
    s.OntologyOntIdAttributeR\x0fontIdAttributes\x1aT\n\x16OntologyOntIdAttr\
    ibute\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x12\n\x04type\x18\
    \x02\x20\x01(\tR\x04type\x12\x14\n\x05value\x18\x03\x20\x01(\tR\x05value\
    \"Z\n\x20OntologySignedOntIdAddAttributes\x12\x1c\n\tsignature\x18\x01\
    \x20\x01(\x0cR\tsignature\x12\x18\n\x07payload\x18\x02\x20\x01(\x0cR\x07\
    payloadB<\n#com.satoshilabs.trezor.lib.protobufB\x15TrezorMessageOntolog\
    yJ\xeb0\n\x07\x12\x05\0\0\xbc\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x08\n\x01\x08\x12\x03\x03\0<\n.\n\x02\x08\x01\x12\x03\x03\0<\x1a#\x20Su\
    gar\x20for\x20easier\x20handling\x20in\x20Java\n\n\x08\n\x01\x08\x12\x03\
    \x04\06\n\t\n\x02\x08\x08\x12\x03\x04\06\n,\n\x02\x04\0\x12\x04\n\0\x19\
    \x01\x1a\x20*\n\x20Ontology\x20Transaction\n\x20@embed\n\n\n\n\x03\x04\0\
    \x01\x12\x03\n\x08\x1b\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0b\x04\x20\n\x0c\
    \n\x05\x04\0\x02\0\x04\x12\x03\x0b\x04\x0c\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\x0b\r\x13\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0b\x14\x1b\n\x0c\
    \n\x05\x04\0\x02\0\x03\x12\x03\x0b\x1e\x1f\n\x0b\n\x04\x04\0\x02\x01\x12\
    \x03\x0c\x04\x1d\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x0c\x04\x0c\n\x0c\
    \n\x05\x04\0\x02\x01\x05\x12\x03\x0c\r\x13\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\x0c\x14\x18\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0c\x1b\x1c\n\
    \x0b\n\x04\x04\0\x02\x02\x12\x03\r\x04\x1e\n\x0c\n\x05\x04\0\x02\x02\x04\
    \x12\x03\r\x04\x0c\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\r\r\x13\n\x0c\n\
    \x05\x04\0\x02\x02\x01\x12\x03\r\x14\x19\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03\r\x1c\x1d\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x0e\x04\"\n\x0c\n\
    \x05\x04\0\x02\x03\x04\x12\x03\x0e\x04\x0c\n\x0c\n\x05\x04\0\x02\x03\x05\
    \x12\x03\x0e\r\x13\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x0e\x14\x1d\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x0e\x20!\n\x0b\n\x04\x04\0\x02\x04\
    \x12\x03\x0f\x04\"\n\x0c\n\x05\x04\0\x02\x04\x04\x12\x03\x0f\x04\x0c\n\
    \x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x0f\r\x13\n\x0c\n\x05\x04\0\x02\x04\
    \x01\x12\x03\x0f\x14\x1d\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x0f\x20!\
    \n\x0b\n\x04\x04\0\x02\x05\x12\x03\x10\x04\x1e\n\x0c\n\x05\x04\0\x02\x05\
    \x04\x12\x03\x10\x04\x0c\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\x10\r\x13\
    \n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x10\x14\x19\n\x0c\n\x05\x04\0\x02\
    \x05\x03\x12\x03\x10\x1c\x1d\n\x0b\n\x04\x04\0\x02\x06\x12\x03\x11\x043\
    \n\x0c\n\x05\x04\0\x02\x06\x04\x12\x03\x11\x04\x0c\n\x0c\n\x05\x04\0\x02\
    \x06\x06\x12\x03\x11\r\x20\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\x11!.\n\
    \x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x1112\n3\n\x04\x04\0\x03\0\x12\x04\
    \x15\x04\x18\x05\x1a%*\n\x20Attribute\x20of\x20Ontology\x20transaction\n\
    \n\x0c\n\x05\x04\0\x03\0\x01\x12\x03\x15\x0c\x1f\n\r\n\x06\x04\0\x03\0\
    \x02\0\x12\x03\x16\x08\"\n\x0e\n\x07\x04\0\x03\0\x02\0\x04\x12\x03\x16\
    \x08\x10\n\x0e\n\x07\x04\0\x03\0\x02\0\x05\x12\x03\x16\x11\x17\n\x0e\n\
    \x07\x04\0\x03\0\x02\0\x01\x12\x03\x16\x18\x1d\n\x0e\n\x07\x04\0\x03\0\
    \x02\0\x03\x12\x03\x16\x20!\n\r\n\x06\x04\0\x03\0\x02\x01\x12\x03\x17\
    \x08\x20\n\x0e\n\x07\x04\0\x03\0\x02\x01\x04\x12\x03\x17\x08\x10\n\x0e\n\
    \x07\x04\0\x03\0\x02\x01\x05\x12\x03\x17\x11\x16\n\x0e\n\x07\x04\0\x03\0\
    \x02\x01\x01\x12\x03\x17\x17\x1b\n\x0e\n\x07\x04\0\x03\0\x02\x01\x03\x12\
    \x03\x17\x1e\x1f\n|\n\x02\x04\x01\x12\x04\x20\0#\x01\x1ap*\n\x20Request:\
    \x20Ask\x20device\x20for\x20Ontology\x20public\x20key\x20corresponding\
    \x20to\x20address_n\x20path\n\x20@start\n\x20@next\x20OntologyPublicKey\
    \n\n\n\n\x03\x04\x01\x01\x12\x03\x20\x08\x1c\n=\n\x04\x04\x01\x02\0\x12\
    \x03!\x04\"\"0\x20BIP-32\x20path\x20to\x20derive\x20the\x20key\x20from\
    \x20master\x20node\n\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03!\x04\x0c\n\
    \x0c\n\x05\x04\x01\x02\0\x05\x12\x03!\r\x13\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x03!\x14\x1d\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03!\x20!\nC\n\
    \x04\x04\x01\x02\x01\x12\x03\"\x04#\"6\x20Optionally\x20show\x20on\x20di\
    splay\x20before\x20sending\x20the\x20result\n\n\x0c\n\x05\x04\x01\x02\
    \x01\x04\x12\x03\"\x04\x0c\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\"\r\
    \x11\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\"\x12\x1e\n\x0c\n\x05\x04\
    \x01\x02\x01\x03\x12\x03\"!\"\n]\n\x02\x04\x02\x12\x04)\0+\x01\x1aQ*\n\
    \x20Response:\x20Contains\x20Ontology\x20public\x20key\x20derived\x20fro\
    m\x20device\x20private\x20seed\n\x20@end\n\n\n\n\x03\x04\x02\x01\x12\x03\
    )\x08\x19\n\"\n\x04\x04\x02\x02\0\x12\x03*\x04\"\"\x15\x20Ontology\x20pu\
    blic\x20key\n\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03*\x04\x0c\n\x0c\n\x05\
    \x04\x02\x02\0\x05\x12\x03*\r\x12\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03*\
    \x13\x1d\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03*\x20!\nw\n\x02\x04\x03\
    \x12\x042\05\x01\x1ak*\n\x20Request:\x20Ask\x20device\x20for\x20Ontology\
    \x20address\x20corresponding\x20to\x20address_n\x20path\n\x20@start\n\
    \x20@next\x20OntologyAddress\n\n\n\n\x03\x04\x03\x01\x12\x032\x08\x1a\n=\
    \n\x04\x04\x03\x02\0\x12\x033\x04\"\"0\x20BIP-32\x20path\x20to\x20derive\
    \x20the\x20key\x20from\x20master\x20node\n\n\x0c\n\x05\x04\x03\x02\0\x04\
    \x12\x033\x04\x0c\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x033\r\x13\n\x0c\n\
    \x05\x04\x03\x02\0\x01\x12\x033\x14\x1d\n\x0c\n\x05\x04\x03\x02\0\x03\
    \x12\x033\x20!\nC\n\x04\x04\x03\x02\x01\x12\x034\x04#\"6\x20Optionally\
    \x20show\x20on\x20display\x20before\x20sending\x20the\x20result\n\n\x0c\
    \n\x05\x04\x03\x02\x01\x04\x12\x034\x04\x0c\n\x0c\n\x05\x04\x03\x02\x01\
    \x05\x12\x034\r\x11\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x034\x12\x1e\n\
    \x0c\n\x05\x04\x03\x02\x01\x03\x12\x034!\"\nZ\n\x02\x04\x04\x12\x04;\0=\
    \x01\x1aN*\n\x20Response:\x20Contains\x20Ontology\x20address\x20derived\
    \x20from\x20device\x20private\x20seed\n\x20@end\n\n\n\n\x03\x04\x04\x01\
    \x12\x03;\x08\x17\n\x1f\n\x04\x04\x04\x02\0\x12\x03<\x04\x20\"\x12\x20On\
    tology\x20address\n\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03<\x04\x0c\n\x0c\
    \n\x05\x04\x04\x02\0\x05\x12\x03<\r\x13\n\x0c\n\x05\x04\x04\x02\0\x01\
    \x12\x03<\x14\x1b\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03<\x1e\x1f\nd\n\
    \x02\x04\x05\x12\x04D\0X\x01\x1aX*\n\x20Request:\x20Ask\x20device\x20to\
    \x20sign\x20Ontology\x20transfer\n\xc2\xa0@start\n\x20@next\x20OntologyS\
    ignedTransfer\n\n\n\n\x03\x04\x05\x01\x12\x03D\x08\x1c\n=\n\x04\x04\x05\
    \x02\0\x12\x03E\x04\"\"0\x20BIP-32\x20path\x20to\x20derive\x20the\x20key\
    \x20from\x20master\x20node\n\n\x0c\n\x05\x04\x05\x02\0\x04\x12\x03E\x04\
    \x0c\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03E\r\x13\n\x0c\n\x05\x04\x05\
    \x02\0\x01\x12\x03E\x14\x1d\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03E\x20!\
    \n\x0b\n\x04\x04\x05\x02\x01\x12\x03F\x041\n\x0c\n\x05\x04\x05\x02\x01\
    \x04\x12\x03F\x04\x0c\n\x0c\n\x05\x04\x05\x02\x01\x06\x12\x03F\r\x20\n\
    \x0c\n\x05\x04\x05\x02\x01\x01\x12\x03F!,\n\x0c\n\x05\x04\x05\x02\x01\
    \x03\x12\x03F/0\n\x0b\n\x04\x04\x05\x02\x02\x12\x03G\x04+\n\x0c\n\x05\
    \x04\x05\x02\x02\x04\x12\x03G\x04\x0c\n\x0c\n\x05\x04\x05\x02\x02\x06\
    \x12\x03G\r\x1d\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x03G\x1e&\n\x0c\n\
    \x05\x04\x05\x02\x02\x03\x12\x03G)*\n#\n\x04\x04\x05\x03\0\x12\x04K\x04W\
    \x05\x1a\x15*\n\x20Ontology\x20Transfer\n\n\x0c\n\x05\x04\x05\x03\0\x01\
    \x12\x03K\x0c\x1c\n\r\n\x06\x04\x05\x03\0\x02\0\x12\x03L\x08)\n\x0e\n\
    \x07\x04\x05\x03\0\x02\0\x04\x12\x03L\x08\x10\n\x0e\n\x07\x04\x05\x03\0\
    \x02\0\x06\x12\x03L\x11\x1e\n\x0e\n\x07\x04\x05\x03\0\x02\0\x01\x12\x03L\
    \x1f$\n\x0e\n\x07\x04\x05\x03\0\x02\0\x03\x12\x03L'(\n\r\n\x06\x04\x05\
    \x03\0\x02\x01\x12\x03M\x08#\n\x0e\n\x07\x04\x05\x03\0\x02\x01\x04\x12\
    \x03M\x08\x10\n\x0e\n\x07\x04\x05\x03\0\x02\x01\x05\x12\x03M\x11\x17\n\
    \x0e\n\x07\x04\x05\x03\0\x02\x01\x01\x12\x03M\x18\x1e\n\x0e\n\x07\x04\
    \x05\x03\0\x02\x01\x03\x12\x03M!\"\n\r\n\x06\x04\x05\x03\0\x02\x02\x12\
    \x03N\x08)\n\x0e\n\x07\x04\x05\x03\0\x02\x02\x04\x12\x03N\x08\x10\n\x0e\
    \n\x07\x04\x05\x03\0\x02\x02\x05\x12\x03N\x11\x17\n\x0e\n\x07\x04\x05\
    \x03\0\x02\x02\x01\x12\x03N\x18$\n\x0e\n\x07\x04\x05\x03\0\x02\x02\x03\
    \x12\x03N'(\n\r\n\x06\x04\x05\x03\0\x02\x03\x12\x03O\x08'\n\x0e\n\x07\
    \x04\x05\x03\0\x02\x03\x04\x12\x03O\x08\x10\n\x0e\n\x07\x04\x05\x03\0\
    \x02\x03\x05\x12\x03O\x11\x17\n\x0e\n\x07\x04\x05\x03\0\x02\x03\x01\x12\
    \x03O\x18\"\n\x0e\n\x07\x04\x05\x03\0\x02\x03\x03\x12\x03O%&\n\"\n\x06\
    \x04\x05\x03\0\x04\0\x12\x04S\x08V\t\x1a\x12*\n\x20Ontology\x20Asset\n\n\
    \x0e\n\x07\x04\x05\x03\0\x04\0\x01\x12\x03S\r\x1a\n\x0f\n\x08\x04\x05\
    \x03\0\x04\0\x02\0\x12\x03T\x0c\x14\n\x10\n\t\x04\x05\x03\0\x04\0\x02\0\
    \x01\x12\x03T\x0c\x0f\n\x10\n\t\x04\x05\x03\0\x04\0\x02\0\x02\x12\x03T\
    \x12\x13\n\x0f\n\x08\x04\x05\x03\0\x04\0\x02\x01\x12\x03U\x0c\x14\n\x10\
    \n\t\x04\x05\x03\0\x04\0\x02\x01\x01\x12\x03U\x0c\x0f\n\x10\n\t\x04\x05\
    \x03\0\x04\0\x02\x01\x02\x12\x03U\x12\x13\nD\n\x02\x04\x06\x12\x04^\0a\
    \x01\x1a8*\n\x20Response:\x20Contains\x20Ontology\x20transfer\x20signatu\
    re\n\x20@end\n\n\n\n\x03\x04\x06\x01\x12\x03^\x08\x1e\n\x0b\n\x04\x04\
    \x06\x02\0\x12\x03_\x04!\n\x0c\n\x05\x04\x06\x02\0\x04\x12\x03_\x04\x0c\
    \n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03_\r\x12\n\x0c\n\x05\x04\x06\x02\0\
    \x01\x12\x03_\x13\x1c\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03_\x1f\x20\n\
    \x0b\n\x04\x04\x06\x02\x01\x12\x03`\x04\x1f\n\x0c\n\x05\x04\x06\x02\x01\
    \x04\x12\x03`\x04\x0c\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\x03`\r\x12\n\
    \x0c\n\x05\x04\x06\x02\x01\x01\x12\x03`\x13\x1a\n\x0c\n\x05\x04\x06\x02\
    \x01\x03\x12\x03`\x1d\x1e\nm\n\x02\x04\x07\x12\x04h\0t\x01\x1aa*\n\x20Re\
    quest:\x20Ask\x20device\x20to\x20sign\x20Ontology\x20ONG\x20withdrawal\n\
    \xc2\xa0@start\n\x20@next\x20OntologySignedWithdrawOng\n\n\n\n\x03\x04\
    \x07\x01\x12\x03h\x08\x1f\n=\n\x04\x04\x07\x02\0\x12\x03i\x04\"\"0\x20BI\
    P-32\x20path\x20to\x20derive\x20the\x20key\x20from\x20master\x20node\n\n\
    \x0c\n\x05\x04\x07\x02\0\x04\x12\x03i\x04\x0c\n\x0c\n\x05\x04\x07\x02\0\
    \x05\x12\x03i\r\x13\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03i\x14\x1d\n\x0c\
    \n\x05\x04\x07\x02\0\x03\x12\x03i\x20!\n\x0b\n\x04\x04\x07\x02\x01\x12\
    \x03j\x041\n\x0c\n\x05\x04\x07\x02\x01\x04\x12\x03j\x04\x0c\n\x0c\n\x05\
    \x04\x07\x02\x01\x06\x12\x03j\r\x20\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\
    \x03j!,\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03j/0\n\x0b\n\x04\x04\x07\
    \x02\x02\x12\x03k\x042\n\x0c\n\x05\x04\x07\x02\x02\x04\x12\x03k\x04\x0c\
    \n\x0c\n\x05\x04\x07\x02\x02\x06\x12\x03k\r\x20\n\x0c\n\x05\x04\x07\x02\
    \x02\x01\x12\x03k!-\n\x0c\n\x05\x04\x07\x02\x02\x03\x12\x03k01\n)\n\x04\
    \x04\x07\x03\0\x12\x04o\x04s\x05\x1a\x1b*\n\x20Ontology\x20ONG\x20Withdr\
    awal\n\n\x0c\n\x05\x04\x07\x03\0\x01\x12\x03o\x0c\x1f\n\r\n\x06\x04\x07\
    \x03\0\x02\0\x12\x03p\x08#\n\x0e\n\x07\x04\x07\x03\0\x02\0\x04\x12\x03p\
    \x08\x10\n\x0e\n\x07\x04\x07\x03\0\x02\0\x05\x12\x03p\x11\x17\n\x0e\n\
    \x07\x04\x07\x03\0\x02\0\x01\x12\x03p\x18\x1e\n\x0e\n\x07\x04\x07\x03\0\
    \x02\0\x03\x12\x03p!\"\n\r\n\x06\x04\x07\x03\0\x02\x01\x12\x03q\x08)\n\
    \x0e\n\x07\x04\x07\x03\0\x02\x01\x04\x12\x03q\x08\x10\n\x0e\n\x07\x04\
    \x07\x03\0\x02\x01\x05\x12\x03q\x11\x17\n\x0e\n\x07\x04\x07\x03\0\x02\
    \x01\x01\x12\x03q\x18$\n\x0e\n\x07\x04\x07\x03\0\x02\x01\x03\x12\x03q'(\
    \n\r\n\x06\x04\x07\x03\0\x02\x02\x12\x03r\x08'\n\x0e\n\x07\x04\x07\x03\0\
    \x02\x02\x04\x12\x03r\x08\x10\n\x0e\n\x07\x04\x07\x03\0\x02\x02\x05\x12\
    \x03r\x11\x17\n\x0e\n\x07\x04\x07\x03\0\x02\x02\x01\x12\x03r\x18\"\n\x0e\
    \n\x07\x04\x07\x03\0\x02\x02\x03\x12\x03r%&\nJ\n\x02\x04\x08\x12\x04z\0}\
    \x01\x1a>*\n\x20Response:\x20Contains\x20Ontology\x20ONG\x20withdrawal\
    \x20signature\n\x20@end\n\n\n\n\x03\x04\x08\x01\x12\x03z\x08!\n\x0b\n\
    \x04\x04\x08\x02\0\x12\x03{\x04!\n\x0c\n\x05\x04\x08\x02\0\x04\x12\x03{\
    \x04\x0c\n\x0c\n\x05\x04\x08\x02\0\x05\x12\x03{\r\x12\n\x0c\n\x05\x04\
    \x08\x02\0\x01\x12\x03{\x13\x1c\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03{\
    \x1f\x20\n\x0b\n\x04\x04\x08\x02\x01\x12\x03|\x04\x1f\n\x0c\n\x05\x04\
    \x08\x02\x01\x04\x12\x03|\x04\x0c\n\x0c\n\x05\x04\x08\x02\x01\x05\x12\
    \x03|\r\x12\n\x0c\n\x05\x04\x08\x02\x01\x01\x12\x03|\x13\x1a\n\x0c\n\x05\
    \x04\x08\x02\x01\x03\x12\x03|\x1d\x1e\nv\n\x02\x04\t\x12\x06\x84\x01\0\
    \x8f\x01\x01\x1ah*\n\x20Request:\x20Ask\x20device\x20to\x20sign\x20Ontol\
    ogy\x20ONT\x20ID\x20registration\n\xc2\xa0@start\n\x20@next\x20OntologyS\
    ignedOntIdRegister\n\n\x0b\n\x03\x04\t\x01\x12\x04\x84\x01\x08!\n>\n\x04\
    \x04\t\x02\0\x12\x04\x85\x01\x04\"\"0\x20BIP-32\x20path\x20to\x20derive\
    \x20the\x20key\x20from\x20master\x20node\n\n\r\n\x05\x04\t\x02\0\x04\x12\
    \x04\x85\x01\x04\x0c\n\r\n\x05\x04\t\x02\0\x05\x12\x04\x85\x01\r\x13\n\r\
    \n\x05\x04\t\x02\0\x01\x12\x04\x85\x01\x14\x1d\n\r\n\x05\x04\t\x02\0\x03\
    \x12\x04\x85\x01\x20!\n\x0c\n\x04\x04\t\x02\x01\x12\x04\x86\x01\x041\n\r\
    \n\x05\x04\t\x02\x01\x04\x12\x04\x86\x01\x04\x0c\n\r\n\x05\x04\t\x02\x01\
    \x06\x12\x04\x86\x01\r\x20\n\r\n\x05\x04\t\x02\x01\x01\x12\x04\x86\x01!,\
    \n\r\n\x05\x04\t\x02\x01\x03\x12\x04\x86\x01/0\n\x0c\n\x04\x04\t\x02\x02\
    \x12\x04\x87\x01\x047\n\r\n\x05\x04\t\x02\x02\x04\x12\x04\x87\x01\x04\
    \x0c\n\r\n\x05\x04\t\x02\x02\x06\x12\x04\x87\x01\r\"\n\r\n\x05\x04\t\x02\
    \x02\x01\x12\x04\x87\x01#2\n\r\n\x05\x04\t\x02\x02\x03\x12\x04\x87\x0156\
    \n0\n\x04\x04\t\x03\0\x12\x06\x8b\x01\x04\x8e\x01\x05\x1a\x20*\n\x20Onto\
    logy\x20ONT\x20ID\x20registration\n\n\r\n\x05\x04\t\x03\0\x01\x12\x04\
    \x8b\x01\x0c!\n\x0e\n\x06\x04\t\x03\0\x02\0\x12\x04\x8c\x01\x08#\n\x0f\n\
    \x07\x04\t\x03\0\x02\0\x04\x12\x04\x8c\x01\x08\x10\n\x0f\n\x07\x04\t\x03\
    \0\x02\0\x05\x12\x04\x8c\x01\x11\x17\n\x0f\n\x07\x04\t\x03\0\x02\0\x01\
    \x12\x04\x8c\x01\x18\x1e\n\x0f\n\x07\x04\t\x03\0\x02\0\x03\x12\x04\x8c\
    \x01!\"\n\x0e\n\x06\x04\t\x03\0\x02\x01\x12\x04\x8d\x01\x08&\n\x0f\n\x07\
    \x04\t\x03\0\x02\x01\x04\x12\x04\x8d\x01\x08\x10\n\x0f\n\x07\x04\t\x03\0\
    \x02\x01\x05\x12\x04\x8d\x01\x11\x16\n\x0f\n\x07\x04\t\x03\0\x02\x01\x01\
    \x12\x04\x8d\x01\x17!\n\x0f\n\x07\x04\t\x03\0\x02\x01\x03\x12\x04\x8d\
    \x01$%\nQ\n\x02\x04\n\x12\x06\x95\x01\0\x98\x01\x01\x1aC*\n\x20Response:\
    \x20Contains\x20Ontology\x20ONT\x20ID\x20registration\x20signature\n\x20\
    @end\n\n\x0b\n\x03\x04\n\x01\x12\x04\x95\x01\x08#\n\x0c\n\x04\x04\n\x02\
    \0\x12\x04\x96\x01\x04!\n\r\n\x05\x04\n\x02\0\x04\x12\x04\x96\x01\x04\
    \x0c\n\r\n\x05\x04\n\x02\0\x05\x12\x04\x96\x01\r\x12\n\r\n\x05\x04\n\x02\
    \0\x01\x12\x04\x96\x01\x13\x1c\n\r\n\x05\x04\n\x02\0\x03\x12\x04\x96\x01\
    \x1f\x20\n\x0c\n\x04\x04\n\x02\x01\x12\x04\x97\x01\x04\x1f\n\r\n\x05\x04\
    \n\x02\x01\x04\x12\x04\x97\x01\x04\x0c\n\r\n\x05\x04\n\x02\x01\x05\x12\
    \x04\x97\x01\r\x12\n\r\n\x05\x04\n\x02\x01\x01\x12\x04\x97\x01\x13\x1a\n\
    \r\n\x05\x04\n\x02\x01\x03\x12\x04\x97\x01\x1d\x1e\n\x80\x01\n\x02\x04\
    \x0b\x12\x06\x9f\x01\0\xb3\x01\x01\x1ar*\n\x20Request:\x20Ask\x20device\
    \x20to\x20sign\x20Ontology\x20ONT\x20ID\x20attributes\x20adding\n\xc2\
    \xa0@start\n\x20@next\x20OntologySignedOntIdAddAttributes\n\n\x0b\n\x03\
    \x04\x0b\x01\x12\x04\x9f\x01\x08&\n>\n\x04\x04\x0b\x02\0\x12\x04\xa0\x01\
    \x04\"\"0\x20BIP-32\x20path\x20to\x20derive\x20the\x20key\x20from\x20mas\
    ter\x20node\n\n\r\n\x05\x04\x0b\x02\0\x04\x12\x04\xa0\x01\x04\x0c\n\r\n\
    \x05\x04\x0b\x02\0\x05\x12\x04\xa0\x01\r\x13\n\r\n\x05\x04\x0b\x02\0\x01\
    \x12\x04\xa0\x01\x14\x1d\n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\xa0\x01\x20\
    !\n\x0c\n\x04\x04\x0b\x02\x01\x12\x04\xa1\x01\x041\n\r\n\x05\x04\x0b\x02\
    \x01\x04\x12\x04\xa1\x01\x04\x0c\n\r\n\x05\x04\x0b\x02\x01\x06\x12\x04\
    \xa1\x01\r\x20\n\r\n\x05\x04\x0b\x02\x01\x01\x12\x04\xa1\x01!,\n\r\n\x05\
    \x04\x0b\x02\x01\x03\x12\x04\xa1\x01/0\n\x0c\n\x04\x04\x0b\x02\x02\x12\
    \x04\xa2\x01\x04B\n\r\n\x05\x04\x0b\x02\x02\x04\x12\x04\xa2\x01\x04\x0c\
    \n\r\n\x05\x04\x0b\x02\x02\x06\x12\x04\xa2\x01\r'\n\r\n\x05\x04\x0b\x02\
    \x02\x01\x12\x04\xa2\x01(=\n\r\n\x05\x04\x0b\x02\x02\x03\x12\x04\xa2\x01\
    @A\n5\n\x04\x04\x0b\x03\0\x12\x06\xa6\x01\x04\xb2\x01\x05\x1a%*\n\x20Ont\
    ology\x20ONT\x20ID\x20attributes\x20adding\n\n\r\n\x05\x04\x0b\x03\0\x01\
    \x12\x04\xa6\x01\x0c&\n\x0e\n\x06\x04\x0b\x03\0\x02\0\x12\x04\xa7\x01\
    \x08#\n\x0f\n\x07\x04\x0b\x03\0\x02\0\x04\x12\x04\xa7\x01\x08\x10\n\x0f\
    \n\x07\x04\x0b\x03\0\x02\0\x05\x12\x04\xa7\x01\x11\x17\n\x0f\n\x07\x04\
    \x0b\x03\0\x02\0\x01\x12\x04\xa7\x01\x18\x1e\n\x0f\n\x07\x04\x0b\x03\0\
    \x02\0\x03\x12\x04\xa7\x01!\"\n\x0e\n\x06\x04\x0b\x03\0\x02\x01\x12\x04\
    \xa8\x01\x08&\n\x0f\n\x07\x04\x0b\x03\0\x02\x01\x04\x12\x04\xa8\x01\x08\
    \x10\n\x0f\n\x07\x04\x0b\x03\0\x02\x01\x05\x12\x04\xa8\x01\x11\x16\n\x0f\
    \n\x07\x04\x0b\x03\0\x02\x01\x01\x12\x04\xa8\x01\x17!\n\x0f\n\x07\x04\
    \x0b\x03\0\x02\x01\x03\x12\x04\xa8\x01$%\n\x0e\n\x06\x04\x0b\x03\0\x02\
    \x02\x12\x04\xa9\x01\x08>\n\x0f\n\x07\x04\x0b\x03\0\x02\x02\x04\x12\x04\
    \xa9\x01\x08\x10\n\x0f\n\x07\x04\x0b\x03\0\x02\x02\x06\x12\x04\xa9\x01\
    \x11'\n\x0f\n\x07\x04\x0b\x03\0\x02\x02\x01\x12\x04\xa9\x01(9\n\x0f\n\
    \x07\x04\x0b\x03\0\x02\x02\x03\x12\x04\xa9\x01<=\n2\n\x06\x04\x0b\x03\0\
    \x03\0\x12\x06\xad\x01\x08\xb1\x01\t\x1a\x20*\n\x20Attribute\x20of\x20On\
    tology\x20ONT\x20ID\n\n\x0f\n\x07\x04\x0b\x03\0\x03\0\x01\x12\x04\xad\
    \x01\x10&\n\x10\n\x08\x04\x0b\x03\0\x03\0\x02\0\x12\x04\xae\x01\x0c$\n\
    \x11\n\t\x04\x0b\x03\0\x03\0\x02\0\x04\x12\x04\xae\x01\x0c\x14\n\x11\n\t\
    \x04\x0b\x03\0\x03\0\x02\0\x05\x12\x04\xae\x01\x15\x1b\n\x11\n\t\x04\x0b\
    \x03\0\x03\0\x02\0\x01\x12\x04\xae\x01\x1c\x1f\n\x11\n\t\x04\x0b\x03\0\
    \x03\0\x02\0\x03\x12\x04\xae\x01\"#\n\x10\n\x08\x04\x0b\x03\0\x03\0\x02\
    \x01\x12\x04\xaf\x01\x0c%\n\x11\n\t\x04\x0b\x03\0\x03\0\x02\x01\x04\x12\
    \x04\xaf\x01\x0c\x14\n\x11\n\t\x04\x0b\x03\0\x03\0\x02\x01\x05\x12\x04\
    \xaf\x01\x15\x1b\n\x11\n\t\x04\x0b\x03\0\x03\0\x02\x01\x01\x12\x04\xaf\
    \x01\x1c\x20\n\x11\n\t\x04\x0b\x03\0\x03\0\x02\x01\x03\x12\x04\xaf\x01#$\
    \n\x10\n\x08\x04\x0b\x03\0\x03\0\x02\x02\x12\x04\xb0\x01\x0c&\n\x11\n\t\
    \x04\x0b\x03\0\x03\0\x02\x02\x04\x12\x04\xb0\x01\x0c\x14\n\x11\n\t\x04\
    \x0b\x03\0\x03\0\x02\x02\x05\x12\x04\xb0\x01\x15\x1b\n\x11\n\t\x04\x0b\
    \x03\0\x03\0\x02\x02\x01\x12\x04\xb0\x01\x1c!\n\x11\n\t\x04\x0b\x03\0\
    \x03\0\x02\x02\x03\x12\x04\xb0\x01$%\nV\n\x02\x04\x0c\x12\x06\xb9\x01\0\
    \xbc\x01\x01\x1aH*\n\x20Response:\x20Contains\x20Ontology\x20ONT\x20ID\
    \x20attributes\x20adding\x20signature\n\x20@end\n\n\x0b\n\x03\x04\x0c\
    \x01\x12\x04\xb9\x01\x08(\n\x0c\n\x04\x04\x0c\x02\0\x12\x04\xba\x01\x04!\
    \n\r\n\x05\x04\x0c\x02\0\x04\x12\x04\xba\x01\x04\x0c\n\r\n\x05\x04\x0c\
    \x02\0\x05\x12\x04\xba\x01\r\x12\n\r\n\x05\x04\x0c\x02\0\x01\x12\x04\xba\
    \x01\x13\x1c\n\r\n\x05\x04\x0c\x02\0\x03\x12\x04\xba\x01\x1f\x20\n\x0c\n\
    \x04\x04\x0c\x02\x01\x12\x04\xbb\x01\x04\x1f\n\r\n\x05\x04\x0c\x02\x01\
    \x04\x12\x04\xbb\x01\x04\x0c\n\r\n\x05\x04\x0c\x02\x01\x05\x12\x04\xbb\
    \x01\r\x12\n\r\n\x05\x04\x0c\x02\x01\x01\x12\x04\xbb\x01\x13\x1a\n\r\n\
    \x05\x04\x0c\x02\x01\x03\x12\x04\xbb\x01\x1d\x1e\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(19);
            messages.push(OntologyTransaction::generated_message_descriptor_data());
            messages.push(OntologyGetPublicKey::generated_message_descriptor_data());
            messages.push(OntologyPublicKey::generated_message_descriptor_data());
            messages.push(OntologyGetAddress::generated_message_descriptor_data());
            messages.push(OntologyAddress::generated_message_descriptor_data());
            messages.push(OntologySignTransfer::generated_message_descriptor_data());
            messages.push(OntologySignedTransfer::generated_message_descriptor_data());
            messages.push(OntologySignWithdrawOng::generated_message_descriptor_data());
            messages.push(OntologySignedWithdrawOng::generated_message_descriptor_data());
            messages.push(OntologySignOntIdRegister::generated_message_descriptor_data());
            messages.push(OntologySignedOntIdRegister::generated_message_descriptor_data());
            messages.push(OntologySignOntIdAddAttributes::generated_message_descriptor_data());
            messages.push(OntologySignedOntIdAddAttributes::generated_message_descriptor_data());
            messages.push(ontology_transaction::OntologyTxAttribute::generated_message_descriptor_data());
            messages.push(ontology_sign_transfer::OntologyTransfer::generated_message_descriptor_data());
            messages.push(ontology_sign_withdraw_ong::OntologyWithdrawOng::generated_message_descriptor_data());
            messages.push(ontology_sign_ont_id_register::OntologyOntIdRegister::generated_message_descriptor_data());
            messages.push(ontology_sign_ont_id_add_attributes::OntologyOntIdAddAttributes::generated_message_descriptor_data());
            messages.push(ontology_sign_ont_id_add_attributes::ontology_ont_id_add_attributes::OntologyOntIdAttribute::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(ontology_sign_transfer::ontology_transfer::OntologyAsset::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
