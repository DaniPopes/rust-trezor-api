// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `messages-stellar.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

/// *
///  Describes a Stellar asset
///  @embed
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarAssetType)
pub struct StellarAssetType {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarAssetType.type)
    pub type_: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarAssetType.code)
    pub code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarAssetType.issuer)
    pub issuer: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarAssetType.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarAssetType {
    fn default() -> &'a StellarAssetType {
        <StellarAssetType as ::protobuf::Message>::default_instance()
    }
}

impl StellarAssetType {
    pub fn new() -> StellarAssetType {
        ::std::default::Default::default()
    }

    // optional uint32 type = 1;

    pub fn type_(&self) -> u32 {
        self.type_.unwrap_or(0)
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: u32) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // optional string code = 2;

    pub fn code(&self) -> &str {
        match self.code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_code(&mut self) {
        self.code = ::std::option::Option::None;
    }

    pub fn has_code(&self) -> bool {
        self.code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: ::std::string::String) {
        self.code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_code(&mut self) -> &mut ::std::string::String {
        if self.code.is_none() {
            self.code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.code.as_mut().unwrap()
    }

    // Take field
    pub fn take_code(&mut self) -> ::std::string::String {
        self.code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string issuer = 3;

    pub fn issuer(&self) -> &str {
        match self.issuer.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_issuer(&mut self) {
        self.issuer = ::std::option::Option::None;
    }

    pub fn has_issuer(&self) -> bool {
        self.issuer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_issuer(&mut self, v: ::std::string::String) {
        self.issuer = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_issuer(&mut self) -> &mut ::std::string::String {
        if self.issuer.is_none() {
            self.issuer = ::std::option::Option::Some(::std::string::String::new());
        }
        self.issuer.as_mut().unwrap()
    }

    // Take field
    pub fn take_issuer(&mut self) -> ::std::string::String {
        self.issuer.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &StellarAssetType| { &m.type_ },
            |m: &mut StellarAssetType| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "code",
            |m: &StellarAssetType| { &m.code },
            |m: &mut StellarAssetType| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "issuer",
            |m: &StellarAssetType| { &m.issuer },
            |m: &mut StellarAssetType| { &mut m.issuer },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarAssetType>(
            "StellarAssetType",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarAssetType {
    const NAME: &'static str = "StellarAssetType";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.code = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.issuer = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_ {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.code.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.issuer.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_ {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.code.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.issuer.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarAssetType {
        StellarAssetType::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.code = ::std::option::Option::None;
        self.issuer = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarAssetType {
        static instance: StellarAssetType = StellarAssetType {
            type_: ::std::option::Option::None,
            code: ::std::option::Option::None,
            issuer: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarAssetType {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarAssetType").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarAssetType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarAssetType {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: Address at the specified index
///  @start
///  @next StellarAddress
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarGetAddress)
pub struct StellarGetAddress {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarGetAddress.address_n)
    pub address_n: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarGetAddress.show_display)
    pub show_display: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarGetAddress.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarGetAddress {
    fn default() -> &'a StellarGetAddress {
        <StellarGetAddress as ::protobuf::Message>::default_instance()
    }
}

impl StellarGetAddress {
    pub fn new() -> StellarGetAddress {
        ::std::default::Default::default()
    }

    // optional bool show_display = 2;

    pub fn show_display(&self) -> bool {
        self.show_display.unwrap_or(false)
    }

    pub fn clear_show_display(&mut self) {
        self.show_display = ::std::option::Option::None;
    }

    pub fn has_show_display(&self) -> bool {
        self.show_display.is_some()
    }

    // Param is passed by value, moved
    pub fn set_show_display(&mut self, v: bool) {
        self.show_display = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "address_n",
            |m: &StellarGetAddress| { &m.address_n },
            |m: &mut StellarGetAddress| { &mut m.address_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "show_display",
            |m: &StellarGetAddress| { &m.show_display },
            |m: &mut StellarGetAddress| { &mut m.show_display },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarGetAddress>(
            "StellarGetAddress",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarGetAddress {
    const NAME: &'static str = "StellarGetAddress";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                },
                8 => {
                    self.address_n.push(is.read_uint32()?);
                },
                16 => {
                    self.show_display = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.show_display {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.show_display {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarGetAddress {
        StellarGetAddress::new()
    }

    fn clear(&mut self) {
        self.address_n.clear();
        self.show_display = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarGetAddress {
        static instance: StellarGetAddress = StellarGetAddress {
            address_n: ::std::vec::Vec::new(),
            show_display: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarGetAddress {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarGetAddress").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarGetAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarGetAddress {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Response: Address for the given index
///  @end
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarAddress)
pub struct StellarAddress {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarAddress.address)
    pub address: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarAddress.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarAddress {
    fn default() -> &'a StellarAddress {
        <StellarAddress as ::protobuf::Message>::default_instance()
    }
}

impl StellarAddress {
    pub fn new() -> StellarAddress {
        ::std::default::Default::default()
    }

    // optional string address = 1;

    pub fn address(&self) -> &str {
        match self.address.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_address(&mut self) {
        self.address = ::std::option::Option::None;
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        if self.address.is_none() {
            self.address = ::std::option::Option::Some(::std::string::String::new());
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        self.address.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "address",
            |m: &StellarAddress| { &m.address },
            |m: &mut StellarAddress| { &mut m.address },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarAddress>(
            "StellarAddress",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarAddress {
    const NAME: &'static str = "StellarAddress";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.address = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.address.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.address.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarAddress {
        StellarAddress::new()
    }

    fn clear(&mut self) {
        self.address = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarAddress {
        static instance: StellarAddress = StellarAddress {
            address: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarAddress {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarAddress").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarAddress {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: ask device to sign Stellar transaction
///  @start
///  @next StellarTxOpRequest
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarSignTx)
pub struct StellarSignTx {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignTx.address_n)
    pub address_n: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignTx.network_passphrase)
    pub network_passphrase: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignTx.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignTx.fee)
    pub fee: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignTx.sequence_number)
    pub sequence_number: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignTx.timebounds_start)
    pub timebounds_start: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignTx.timebounds_end)
    pub timebounds_end: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignTx.memo_type)
    pub memo_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignTx.memo_text)
    pub memo_text: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignTx.memo_id)
    pub memo_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignTx.memo_hash)
    pub memo_hash: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignTx.num_operations)
    pub num_operations: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarSignTx.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarSignTx {
    fn default() -> &'a StellarSignTx {
        <StellarSignTx as ::protobuf::Message>::default_instance()
    }
}

impl StellarSignTx {
    pub fn new() -> StellarSignTx {
        ::std::default::Default::default()
    }

    // optional string network_passphrase = 3;

    pub fn network_passphrase(&self) -> &str {
        match self.network_passphrase.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_network_passphrase(&mut self) {
        self.network_passphrase = ::std::option::Option::None;
    }

    pub fn has_network_passphrase(&self) -> bool {
        self.network_passphrase.is_some()
    }

    // Param is passed by value, moved
    pub fn set_network_passphrase(&mut self, v: ::std::string::String) {
        self.network_passphrase = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_network_passphrase(&mut self) -> &mut ::std::string::String {
        if self.network_passphrase.is_none() {
            self.network_passphrase = ::std::option::Option::Some(::std::string::String::new());
        }
        self.network_passphrase.as_mut().unwrap()
    }

    // Take field
    pub fn take_network_passphrase(&mut self) -> ::std::string::String {
        self.network_passphrase.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string source_account = 4;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 fee = 5;

    pub fn fee(&self) -> u32 {
        self.fee.unwrap_or(0)
    }

    pub fn clear_fee(&mut self) {
        self.fee = ::std::option::Option::None;
    }

    pub fn has_fee(&self) -> bool {
        self.fee.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fee(&mut self, v: u32) {
        self.fee = ::std::option::Option::Some(v);
    }

    // optional uint64 sequence_number = 6;

    pub fn sequence_number(&self) -> u64 {
        self.sequence_number.unwrap_or(0)
    }

    pub fn clear_sequence_number(&mut self) {
        self.sequence_number = ::std::option::Option::None;
    }

    pub fn has_sequence_number(&self) -> bool {
        self.sequence_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sequence_number(&mut self, v: u64) {
        self.sequence_number = ::std::option::Option::Some(v);
    }

    // optional uint32 timebounds_start = 8;

    pub fn timebounds_start(&self) -> u32 {
        self.timebounds_start.unwrap_or(0)
    }

    pub fn clear_timebounds_start(&mut self) {
        self.timebounds_start = ::std::option::Option::None;
    }

    pub fn has_timebounds_start(&self) -> bool {
        self.timebounds_start.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timebounds_start(&mut self, v: u32) {
        self.timebounds_start = ::std::option::Option::Some(v);
    }

    // optional uint32 timebounds_end = 9;

    pub fn timebounds_end(&self) -> u32 {
        self.timebounds_end.unwrap_or(0)
    }

    pub fn clear_timebounds_end(&mut self) {
        self.timebounds_end = ::std::option::Option::None;
    }

    pub fn has_timebounds_end(&self) -> bool {
        self.timebounds_end.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timebounds_end(&mut self, v: u32) {
        self.timebounds_end = ::std::option::Option::Some(v);
    }

    // optional uint32 memo_type = 10;

    pub fn memo_type(&self) -> u32 {
        self.memo_type.unwrap_or(0)
    }

    pub fn clear_memo_type(&mut self) {
        self.memo_type = ::std::option::Option::None;
    }

    pub fn has_memo_type(&self) -> bool {
        self.memo_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_memo_type(&mut self, v: u32) {
        self.memo_type = ::std::option::Option::Some(v);
    }

    // optional string memo_text = 11;

    pub fn memo_text(&self) -> &str {
        match self.memo_text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_memo_text(&mut self) {
        self.memo_text = ::std::option::Option::None;
    }

    pub fn has_memo_text(&self) -> bool {
        self.memo_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_memo_text(&mut self, v: ::std::string::String) {
        self.memo_text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_memo_text(&mut self) -> &mut ::std::string::String {
        if self.memo_text.is_none() {
            self.memo_text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.memo_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_memo_text(&mut self) -> ::std::string::String {
        self.memo_text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 memo_id = 12;

    pub fn memo_id(&self) -> u64 {
        self.memo_id.unwrap_or(0)
    }

    pub fn clear_memo_id(&mut self) {
        self.memo_id = ::std::option::Option::None;
    }

    pub fn has_memo_id(&self) -> bool {
        self.memo_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_memo_id(&mut self, v: u64) {
        self.memo_id = ::std::option::Option::Some(v);
    }

    // optional bytes memo_hash = 13;

    pub fn memo_hash(&self) -> &[u8] {
        match self.memo_hash.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_memo_hash(&mut self) {
        self.memo_hash = ::std::option::Option::None;
    }

    pub fn has_memo_hash(&self) -> bool {
        self.memo_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_memo_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.memo_hash = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_memo_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.memo_hash.is_none() {
            self.memo_hash = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.memo_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_memo_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.memo_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 num_operations = 14;

    pub fn num_operations(&self) -> u32 {
        self.num_operations.unwrap_or(0)
    }

    pub fn clear_num_operations(&mut self) {
        self.num_operations = ::std::option::Option::None;
    }

    pub fn has_num_operations(&self) -> bool {
        self.num_operations.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_operations(&mut self, v: u32) {
        self.num_operations = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "address_n",
            |m: &StellarSignTx| { &m.address_n },
            |m: &mut StellarSignTx| { &mut m.address_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "network_passphrase",
            |m: &StellarSignTx| { &m.network_passphrase },
            |m: &mut StellarSignTx| { &mut m.network_passphrase },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarSignTx| { &m.source_account },
            |m: &mut StellarSignTx| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "fee",
            |m: &StellarSignTx| { &m.fee },
            |m: &mut StellarSignTx| { &mut m.fee },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sequence_number",
            |m: &StellarSignTx| { &m.sequence_number },
            |m: &mut StellarSignTx| { &mut m.sequence_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "timebounds_start",
            |m: &StellarSignTx| { &m.timebounds_start },
            |m: &mut StellarSignTx| { &mut m.timebounds_start },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "timebounds_end",
            |m: &StellarSignTx| { &m.timebounds_end },
            |m: &mut StellarSignTx| { &mut m.timebounds_end },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "memo_type",
            |m: &StellarSignTx| { &m.memo_type },
            |m: &mut StellarSignTx| { &mut m.memo_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "memo_text",
            |m: &StellarSignTx| { &m.memo_text },
            |m: &mut StellarSignTx| { &mut m.memo_text },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "memo_id",
            |m: &StellarSignTx| { &m.memo_id },
            |m: &mut StellarSignTx| { &mut m.memo_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "memo_hash",
            |m: &StellarSignTx| { &m.memo_hash },
            |m: &mut StellarSignTx| { &mut m.memo_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "num_operations",
            |m: &StellarSignTx| { &m.num_operations },
            |m: &mut StellarSignTx| { &mut m.num_operations },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarSignTx>(
            "StellarSignTx",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarSignTx {
    const NAME: &'static str = "StellarSignTx";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                },
                16 => {
                    self.address_n.push(is.read_uint32()?);
                },
                26 => {
                    self.network_passphrase = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                40 => {
                    self.fee = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.sequence_number = ::std::option::Option::Some(is.read_uint64()?);
                },
                64 => {
                    self.timebounds_start = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.timebounds_end = ::std::option::Option::Some(is.read_uint32()?);
                },
                80 => {
                    self.memo_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                90 => {
                    self.memo_text = ::std::option::Option::Some(is.read_string()?);
                },
                96 => {
                    self.memo_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                106 => {
                    self.memo_hash = ::std::option::Option::Some(is.read_bytes()?);
                },
                112 => {
                    self.num_operations = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::uint32_size(2, *value);
        };
        if let Some(v) = self.network_passphrase.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.fee {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.sequence_number {
            my_size += ::protobuf::rt::uint64_size(6, v);
        }
        if let Some(v) = self.timebounds_start {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.timebounds_end {
            my_size += ::protobuf::rt::uint32_size(9, v);
        }
        if let Some(v) = self.memo_type {
            my_size += ::protobuf::rt::uint32_size(10, v);
        }
        if let Some(v) = self.memo_text.as_ref() {
            my_size += ::protobuf::rt::string_size(11, &v);
        }
        if let Some(v) = self.memo_id {
            my_size += ::protobuf::rt::uint64_size(12, v);
        }
        if let Some(v) = self.memo_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(13, &v);
        }
        if let Some(v) = self.num_operations {
            my_size += ::protobuf::rt::uint32_size(14, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.address_n {
            os.write_uint32(2, *v)?;
        };
        if let Some(v) = self.network_passphrase.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.fee {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.sequence_number {
            os.write_uint64(6, v)?;
        }
        if let Some(v) = self.timebounds_start {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.timebounds_end {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.memo_type {
            os.write_uint32(10, v)?;
        }
        if let Some(v) = self.memo_text.as_ref() {
            os.write_string(11, v)?;
        }
        if let Some(v) = self.memo_id {
            os.write_uint64(12, v)?;
        }
        if let Some(v) = self.memo_hash.as_ref() {
            os.write_bytes(13, v)?;
        }
        if let Some(v) = self.num_operations {
            os.write_uint32(14, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarSignTx {
        StellarSignTx::new()
    }

    fn clear(&mut self) {
        self.address_n.clear();
        self.network_passphrase = ::std::option::Option::None;
        self.source_account = ::std::option::Option::None;
        self.fee = ::std::option::Option::None;
        self.sequence_number = ::std::option::Option::None;
        self.timebounds_start = ::std::option::Option::None;
        self.timebounds_end = ::std::option::Option::None;
        self.memo_type = ::std::option::Option::None;
        self.memo_text = ::std::option::Option::None;
        self.memo_id = ::std::option::Option::None;
        self.memo_hash = ::std::option::Option::None;
        self.num_operations = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarSignTx {
        static instance: StellarSignTx = StellarSignTx {
            address_n: ::std::vec::Vec::new(),
            network_passphrase: ::std::option::Option::None,
            source_account: ::std::option::Option::None,
            fee: ::std::option::Option::None,
            sequence_number: ::std::option::Option::None,
            timebounds_start: ::std::option::Option::None,
            timebounds_end: ::std::option::Option::None,
            memo_type: ::std::option::Option::None,
            memo_text: ::std::option::Option::None,
            memo_id: ::std::option::Option::None,
            memo_hash: ::std::option::Option::None,
            num_operations: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarSignTx {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarSignTx").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarSignTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarSignTx {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Response: device is ready for client to send the next operation
///  @next StellarPaymentOp
///  @next StellarCreateAccountOp
///  @next StellarPathPaymentOp
///  @next StellarManageOfferOp
///  @next StellarCreatePassiveOfferOp
///  @next StellarSetOptionsOp
///  @next StellarChangeTrustOp
///  @next StellarAllowTrustOp
///  @next StellarAccountMergeOp
///  @next StellarManageDataOp
///  @next StellarBumpSequenceOp
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarTxOpRequest)
pub struct StellarTxOpRequest {
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarTxOpRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarTxOpRequest {
    fn default() -> &'a StellarTxOpRequest {
        <StellarTxOpRequest as ::protobuf::Message>::default_instance()
    }
}

impl StellarTxOpRequest {
    pub fn new() -> StellarTxOpRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarTxOpRequest>(
            "StellarTxOpRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarTxOpRequest {
    const NAME: &'static str = "StellarTxOpRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarTxOpRequest {
        StellarTxOpRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarTxOpRequest {
        static instance: StellarTxOpRequest = StellarTxOpRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarTxOpRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarTxOpRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarTxOpRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarTxOpRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: ask device to confirm this operation type
///  @next StellarTxOpRequest
///  @next StellarSignedTx
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarPaymentOp)
pub struct StellarPaymentOp {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPaymentOp.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPaymentOp.destination_account)
    pub destination_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPaymentOp.asset)
    pub asset: ::protobuf::MessageField<StellarAssetType>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPaymentOp.amount)
    pub amount: ::std::option::Option<i64>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarPaymentOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarPaymentOp {
    fn default() -> &'a StellarPaymentOp {
        <StellarPaymentOp as ::protobuf::Message>::default_instance()
    }
}

impl StellarPaymentOp {
    pub fn new() -> StellarPaymentOp {
        ::std::default::Default::default()
    }

    // optional string source_account = 1;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string destination_account = 2;

    pub fn destination_account(&self) -> &str {
        match self.destination_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_destination_account(&mut self) {
        self.destination_account = ::std::option::Option::None;
    }

    pub fn has_destination_account(&self) -> bool {
        self.destination_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_destination_account(&mut self, v: ::std::string::String) {
        self.destination_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_destination_account(&mut self) -> &mut ::std::string::String {
        if self.destination_account.is_none() {
            self.destination_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.destination_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_destination_account(&mut self) -> ::std::string::String {
        self.destination_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional sint64 amount = 4;

    pub fn amount(&self) -> i64 {
        self.amount.unwrap_or(0)
    }

    pub fn clear_amount(&mut self) {
        self.amount = ::std::option::Option::None;
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: i64) {
        self.amount = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarPaymentOp| { &m.source_account },
            |m: &mut StellarPaymentOp| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "destination_account",
            |m: &StellarPaymentOp| { &m.destination_account },
            |m: &mut StellarPaymentOp| { &mut m.destination_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarAssetType>(
            "asset",
            |m: &StellarPaymentOp| { &m.asset },
            |m: &mut StellarPaymentOp| { &mut m.asset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "amount",
            |m: &StellarPaymentOp| { &m.amount },
            |m: &mut StellarPaymentOp| { &mut m.amount },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarPaymentOp>(
            "StellarPaymentOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarPaymentOp {
    const NAME: &'static str = "StellarPaymentOp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.destination_account = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.asset)?;
                },
                32 => {
                    self.amount = ::std::option::Option::Some(is.read_sint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.destination_account.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.asset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.amount {
            my_size += ::protobuf::rt::sint64_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.destination_account.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.asset.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.amount {
            os.write_sint64(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarPaymentOp {
        StellarPaymentOp::new()
    }

    fn clear(&mut self) {
        self.source_account = ::std::option::Option::None;
        self.destination_account = ::std::option::Option::None;
        self.asset.clear();
        self.amount = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarPaymentOp {
        static instance: StellarPaymentOp = StellarPaymentOp {
            source_account: ::std::option::Option::None,
            destination_account: ::std::option::Option::None,
            asset: ::protobuf::MessageField::none(),
            amount: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarPaymentOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarPaymentOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarPaymentOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarPaymentOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: ask device to confirm this operation type
///  @next StellarTxOpRequest
///  @next StellarSignedTx
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarCreateAccountOp)
pub struct StellarCreateAccountOp {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarCreateAccountOp.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarCreateAccountOp.new_account)
    pub new_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarCreateAccountOp.starting_balance)
    pub starting_balance: ::std::option::Option<i64>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarCreateAccountOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarCreateAccountOp {
    fn default() -> &'a StellarCreateAccountOp {
        <StellarCreateAccountOp as ::protobuf::Message>::default_instance()
    }
}

impl StellarCreateAccountOp {
    pub fn new() -> StellarCreateAccountOp {
        ::std::default::Default::default()
    }

    // optional string source_account = 1;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string new_account = 2;

    pub fn new_account(&self) -> &str {
        match self.new_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_new_account(&mut self) {
        self.new_account = ::std::option::Option::None;
    }

    pub fn has_new_account(&self) -> bool {
        self.new_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_account(&mut self, v: ::std::string::String) {
        self.new_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_account(&mut self) -> &mut ::std::string::String {
        if self.new_account.is_none() {
            self.new_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.new_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_new_account(&mut self) -> ::std::string::String {
        self.new_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional sint64 starting_balance = 3;

    pub fn starting_balance(&self) -> i64 {
        self.starting_balance.unwrap_or(0)
    }

    pub fn clear_starting_balance(&mut self) {
        self.starting_balance = ::std::option::Option::None;
    }

    pub fn has_starting_balance(&self) -> bool {
        self.starting_balance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_starting_balance(&mut self, v: i64) {
        self.starting_balance = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarCreateAccountOp| { &m.source_account },
            |m: &mut StellarCreateAccountOp| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "new_account",
            |m: &StellarCreateAccountOp| { &m.new_account },
            |m: &mut StellarCreateAccountOp| { &mut m.new_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "starting_balance",
            |m: &StellarCreateAccountOp| { &m.starting_balance },
            |m: &mut StellarCreateAccountOp| { &mut m.starting_balance },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarCreateAccountOp>(
            "StellarCreateAccountOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarCreateAccountOp {
    const NAME: &'static str = "StellarCreateAccountOp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.new_account = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.starting_balance = ::std::option::Option::Some(is.read_sint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.new_account.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.starting_balance {
            my_size += ::protobuf::rt::sint64_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.new_account.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.starting_balance {
            os.write_sint64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarCreateAccountOp {
        StellarCreateAccountOp::new()
    }

    fn clear(&mut self) {
        self.source_account = ::std::option::Option::None;
        self.new_account = ::std::option::Option::None;
        self.starting_balance = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarCreateAccountOp {
        static instance: StellarCreateAccountOp = StellarCreateAccountOp {
            source_account: ::std::option::Option::None,
            new_account: ::std::option::Option::None,
            starting_balance: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarCreateAccountOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarCreateAccountOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarCreateAccountOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarCreateAccountOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: ask device to confirm this operation type
///  @next StellarTxOpRequest
///  @next StellarSignedTx
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarPathPaymentOp)
pub struct StellarPathPaymentOp {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPathPaymentOp.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPathPaymentOp.send_asset)
    pub send_asset: ::protobuf::MessageField<StellarAssetType>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPathPaymentOp.send_max)
    pub send_max: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPathPaymentOp.destination_account)
    pub destination_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPathPaymentOp.destination_asset)
    pub destination_asset: ::protobuf::MessageField<StellarAssetType>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPathPaymentOp.destination_amount)
    pub destination_amount: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarPathPaymentOp.paths)
    pub paths: ::std::vec::Vec<StellarAssetType>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarPathPaymentOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarPathPaymentOp {
    fn default() -> &'a StellarPathPaymentOp {
        <StellarPathPaymentOp as ::protobuf::Message>::default_instance()
    }
}

impl StellarPathPaymentOp {
    pub fn new() -> StellarPathPaymentOp {
        ::std::default::Default::default()
    }

    // optional string source_account = 1;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional sint64 send_max = 3;

    pub fn send_max(&self) -> i64 {
        self.send_max.unwrap_or(0)
    }

    pub fn clear_send_max(&mut self) {
        self.send_max = ::std::option::Option::None;
    }

    pub fn has_send_max(&self) -> bool {
        self.send_max.is_some()
    }

    // Param is passed by value, moved
    pub fn set_send_max(&mut self, v: i64) {
        self.send_max = ::std::option::Option::Some(v);
    }

    // optional string destination_account = 4;

    pub fn destination_account(&self) -> &str {
        match self.destination_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_destination_account(&mut self) {
        self.destination_account = ::std::option::Option::None;
    }

    pub fn has_destination_account(&self) -> bool {
        self.destination_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_destination_account(&mut self, v: ::std::string::String) {
        self.destination_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_destination_account(&mut self) -> &mut ::std::string::String {
        if self.destination_account.is_none() {
            self.destination_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.destination_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_destination_account(&mut self) -> ::std::string::String {
        self.destination_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional sint64 destination_amount = 6;

    pub fn destination_amount(&self) -> i64 {
        self.destination_amount.unwrap_or(0)
    }

    pub fn clear_destination_amount(&mut self) {
        self.destination_amount = ::std::option::Option::None;
    }

    pub fn has_destination_amount(&self) -> bool {
        self.destination_amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_destination_amount(&mut self, v: i64) {
        self.destination_amount = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarPathPaymentOp| { &m.source_account },
            |m: &mut StellarPathPaymentOp| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarAssetType>(
            "send_asset",
            |m: &StellarPathPaymentOp| { &m.send_asset },
            |m: &mut StellarPathPaymentOp| { &mut m.send_asset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "send_max",
            |m: &StellarPathPaymentOp| { &m.send_max },
            |m: &mut StellarPathPaymentOp| { &mut m.send_max },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "destination_account",
            |m: &StellarPathPaymentOp| { &m.destination_account },
            |m: &mut StellarPathPaymentOp| { &mut m.destination_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarAssetType>(
            "destination_asset",
            |m: &StellarPathPaymentOp| { &m.destination_asset },
            |m: &mut StellarPathPaymentOp| { &mut m.destination_asset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "destination_amount",
            |m: &StellarPathPaymentOp| { &m.destination_amount },
            |m: &mut StellarPathPaymentOp| { &mut m.destination_amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "paths",
            |m: &StellarPathPaymentOp| { &m.paths },
            |m: &mut StellarPathPaymentOp| { &mut m.paths },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarPathPaymentOp>(
            "StellarPathPaymentOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarPathPaymentOp {
    const NAME: &'static str = "StellarPathPaymentOp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.send_asset)?;
                },
                24 => {
                    self.send_max = ::std::option::Option::Some(is.read_sint64()?);
                },
                34 => {
                    self.destination_account = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.destination_asset)?;
                },
                48 => {
                    self.destination_amount = ::std::option::Option::Some(is.read_sint64()?);
                },
                58 => {
                    self.paths.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.send_asset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.send_max {
            my_size += ::protobuf::rt::sint64_size(3, v);
        }
        if let Some(v) = self.destination_account.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.destination_asset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.destination_amount {
            my_size += ::protobuf::rt::sint64_size(6, v);
        }
        for value in &self.paths {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.send_asset.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.send_max {
            os.write_sint64(3, v)?;
        }
        if let Some(v) = self.destination_account.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.destination_asset.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.destination_amount {
            os.write_sint64(6, v)?;
        }
        for v in &self.paths {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarPathPaymentOp {
        StellarPathPaymentOp::new()
    }

    fn clear(&mut self) {
        self.source_account = ::std::option::Option::None;
        self.send_asset.clear();
        self.send_max = ::std::option::Option::None;
        self.destination_account = ::std::option::Option::None;
        self.destination_asset.clear();
        self.destination_amount = ::std::option::Option::None;
        self.paths.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarPathPaymentOp {
        static instance: StellarPathPaymentOp = StellarPathPaymentOp {
            source_account: ::std::option::Option::None,
            send_asset: ::protobuf::MessageField::none(),
            send_max: ::std::option::Option::None,
            destination_account: ::std::option::Option::None,
            destination_asset: ::protobuf::MessageField::none(),
            destination_amount: ::std::option::Option::None,
            paths: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarPathPaymentOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarPathPaymentOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarPathPaymentOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarPathPaymentOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: ask device to confirm this operation type
///  @next StellarTxOpRequest
///  @next StellarSignedTx
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarManageOfferOp)
pub struct StellarManageOfferOp {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarManageOfferOp.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarManageOfferOp.selling_asset)
    pub selling_asset: ::protobuf::MessageField<StellarAssetType>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarManageOfferOp.buying_asset)
    pub buying_asset: ::protobuf::MessageField<StellarAssetType>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarManageOfferOp.amount)
    pub amount: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarManageOfferOp.price_n)
    pub price_n: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarManageOfferOp.price_d)
    pub price_d: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarManageOfferOp.offer_id)
    pub offer_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarManageOfferOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarManageOfferOp {
    fn default() -> &'a StellarManageOfferOp {
        <StellarManageOfferOp as ::protobuf::Message>::default_instance()
    }
}

impl StellarManageOfferOp {
    pub fn new() -> StellarManageOfferOp {
        ::std::default::Default::default()
    }

    // optional string source_account = 1;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional sint64 amount = 4;

    pub fn amount(&self) -> i64 {
        self.amount.unwrap_or(0)
    }

    pub fn clear_amount(&mut self) {
        self.amount = ::std::option::Option::None;
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: i64) {
        self.amount = ::std::option::Option::Some(v);
    }

    // optional uint32 price_n = 5;

    pub fn price_n(&self) -> u32 {
        self.price_n.unwrap_or(0)
    }

    pub fn clear_price_n(&mut self) {
        self.price_n = ::std::option::Option::None;
    }

    pub fn has_price_n(&self) -> bool {
        self.price_n.is_some()
    }

    // Param is passed by value, moved
    pub fn set_price_n(&mut self, v: u32) {
        self.price_n = ::std::option::Option::Some(v);
    }

    // optional uint32 price_d = 6;

    pub fn price_d(&self) -> u32 {
        self.price_d.unwrap_or(0)
    }

    pub fn clear_price_d(&mut self) {
        self.price_d = ::std::option::Option::None;
    }

    pub fn has_price_d(&self) -> bool {
        self.price_d.is_some()
    }

    // Param is passed by value, moved
    pub fn set_price_d(&mut self, v: u32) {
        self.price_d = ::std::option::Option::Some(v);
    }

    // optional uint64 offer_id = 7;

    pub fn offer_id(&self) -> u64 {
        self.offer_id.unwrap_or(0)
    }

    pub fn clear_offer_id(&mut self) {
        self.offer_id = ::std::option::Option::None;
    }

    pub fn has_offer_id(&self) -> bool {
        self.offer_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_offer_id(&mut self, v: u64) {
        self.offer_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarManageOfferOp| { &m.source_account },
            |m: &mut StellarManageOfferOp| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarAssetType>(
            "selling_asset",
            |m: &StellarManageOfferOp| { &m.selling_asset },
            |m: &mut StellarManageOfferOp| { &mut m.selling_asset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarAssetType>(
            "buying_asset",
            |m: &StellarManageOfferOp| { &m.buying_asset },
            |m: &mut StellarManageOfferOp| { &mut m.buying_asset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "amount",
            |m: &StellarManageOfferOp| { &m.amount },
            |m: &mut StellarManageOfferOp| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "price_n",
            |m: &StellarManageOfferOp| { &m.price_n },
            |m: &mut StellarManageOfferOp| { &mut m.price_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "price_d",
            |m: &StellarManageOfferOp| { &m.price_d },
            |m: &mut StellarManageOfferOp| { &mut m.price_d },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "offer_id",
            |m: &StellarManageOfferOp| { &m.offer_id },
            |m: &mut StellarManageOfferOp| { &mut m.offer_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarManageOfferOp>(
            "StellarManageOfferOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarManageOfferOp {
    const NAME: &'static str = "StellarManageOfferOp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.selling_asset)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.buying_asset)?;
                },
                32 => {
                    self.amount = ::std::option::Option::Some(is.read_sint64()?);
                },
                40 => {
                    self.price_n = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.price_d = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.offer_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.selling_asset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.buying_asset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.amount {
            my_size += ::protobuf::rt::sint64_size(4, v);
        }
        if let Some(v) = self.price_n {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.price_d {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.offer_id {
            my_size += ::protobuf::rt::uint64_size(7, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.selling_asset.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.buying_asset.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.amount {
            os.write_sint64(4, v)?;
        }
        if let Some(v) = self.price_n {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.price_d {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.offer_id {
            os.write_uint64(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarManageOfferOp {
        StellarManageOfferOp::new()
    }

    fn clear(&mut self) {
        self.source_account = ::std::option::Option::None;
        self.selling_asset.clear();
        self.buying_asset.clear();
        self.amount = ::std::option::Option::None;
        self.price_n = ::std::option::Option::None;
        self.price_d = ::std::option::Option::None;
        self.offer_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarManageOfferOp {
        static instance: StellarManageOfferOp = StellarManageOfferOp {
            source_account: ::std::option::Option::None,
            selling_asset: ::protobuf::MessageField::none(),
            buying_asset: ::protobuf::MessageField::none(),
            amount: ::std::option::Option::None,
            price_n: ::std::option::Option::None,
            price_d: ::std::option::Option::None,
            offer_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarManageOfferOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarManageOfferOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarManageOfferOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarManageOfferOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: ask device to confirm this operation type
///  @next StellarTxOpRequest
///  @next StellarSignedTx
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarCreatePassiveOfferOp)
pub struct StellarCreatePassiveOfferOp {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarCreatePassiveOfferOp.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarCreatePassiveOfferOp.selling_asset)
    pub selling_asset: ::protobuf::MessageField<StellarAssetType>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarCreatePassiveOfferOp.buying_asset)
    pub buying_asset: ::protobuf::MessageField<StellarAssetType>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarCreatePassiveOfferOp.amount)
    pub amount: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarCreatePassiveOfferOp.price_n)
    pub price_n: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarCreatePassiveOfferOp.price_d)
    pub price_d: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarCreatePassiveOfferOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarCreatePassiveOfferOp {
    fn default() -> &'a StellarCreatePassiveOfferOp {
        <StellarCreatePassiveOfferOp as ::protobuf::Message>::default_instance()
    }
}

impl StellarCreatePassiveOfferOp {
    pub fn new() -> StellarCreatePassiveOfferOp {
        ::std::default::Default::default()
    }

    // optional string source_account = 1;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional sint64 amount = 4;

    pub fn amount(&self) -> i64 {
        self.amount.unwrap_or(0)
    }

    pub fn clear_amount(&mut self) {
        self.amount = ::std::option::Option::None;
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: i64) {
        self.amount = ::std::option::Option::Some(v);
    }

    // optional uint32 price_n = 5;

    pub fn price_n(&self) -> u32 {
        self.price_n.unwrap_or(0)
    }

    pub fn clear_price_n(&mut self) {
        self.price_n = ::std::option::Option::None;
    }

    pub fn has_price_n(&self) -> bool {
        self.price_n.is_some()
    }

    // Param is passed by value, moved
    pub fn set_price_n(&mut self, v: u32) {
        self.price_n = ::std::option::Option::Some(v);
    }

    // optional uint32 price_d = 6;

    pub fn price_d(&self) -> u32 {
        self.price_d.unwrap_or(0)
    }

    pub fn clear_price_d(&mut self) {
        self.price_d = ::std::option::Option::None;
    }

    pub fn has_price_d(&self) -> bool {
        self.price_d.is_some()
    }

    // Param is passed by value, moved
    pub fn set_price_d(&mut self, v: u32) {
        self.price_d = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarCreatePassiveOfferOp| { &m.source_account },
            |m: &mut StellarCreatePassiveOfferOp| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarAssetType>(
            "selling_asset",
            |m: &StellarCreatePassiveOfferOp| { &m.selling_asset },
            |m: &mut StellarCreatePassiveOfferOp| { &mut m.selling_asset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarAssetType>(
            "buying_asset",
            |m: &StellarCreatePassiveOfferOp| { &m.buying_asset },
            |m: &mut StellarCreatePassiveOfferOp| { &mut m.buying_asset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "amount",
            |m: &StellarCreatePassiveOfferOp| { &m.amount },
            |m: &mut StellarCreatePassiveOfferOp| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "price_n",
            |m: &StellarCreatePassiveOfferOp| { &m.price_n },
            |m: &mut StellarCreatePassiveOfferOp| { &mut m.price_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "price_d",
            |m: &StellarCreatePassiveOfferOp| { &m.price_d },
            |m: &mut StellarCreatePassiveOfferOp| { &mut m.price_d },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarCreatePassiveOfferOp>(
            "StellarCreatePassiveOfferOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarCreatePassiveOfferOp {
    const NAME: &'static str = "StellarCreatePassiveOfferOp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.selling_asset)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.buying_asset)?;
                },
                32 => {
                    self.amount = ::std::option::Option::Some(is.read_sint64()?);
                },
                40 => {
                    self.price_n = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.price_d = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.selling_asset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.buying_asset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.amount {
            my_size += ::protobuf::rt::sint64_size(4, v);
        }
        if let Some(v) = self.price_n {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.price_d {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.selling_asset.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.buying_asset.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.amount {
            os.write_sint64(4, v)?;
        }
        if let Some(v) = self.price_n {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.price_d {
            os.write_uint32(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarCreatePassiveOfferOp {
        StellarCreatePassiveOfferOp::new()
    }

    fn clear(&mut self) {
        self.source_account = ::std::option::Option::None;
        self.selling_asset.clear();
        self.buying_asset.clear();
        self.amount = ::std::option::Option::None;
        self.price_n = ::std::option::Option::None;
        self.price_d = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarCreatePassiveOfferOp {
        static instance: StellarCreatePassiveOfferOp = StellarCreatePassiveOfferOp {
            source_account: ::std::option::Option::None,
            selling_asset: ::protobuf::MessageField::none(),
            buying_asset: ::protobuf::MessageField::none(),
            amount: ::std::option::Option::None,
            price_n: ::std::option::Option::None,
            price_d: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarCreatePassiveOfferOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarCreatePassiveOfferOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarCreatePassiveOfferOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarCreatePassiveOfferOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: ask device to confirm this operation type
///  @next StellarTxOpRequest
///  @next StellarSignedTx
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarSetOptionsOp)
pub struct StellarSetOptionsOp {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSetOptionsOp.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSetOptionsOp.inflation_destination_account)
    pub inflation_destination_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSetOptionsOp.clear_flags)
    pub clear_flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSetOptionsOp.set_flags)
    pub set_flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSetOptionsOp.master_weight)
    pub master_weight: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSetOptionsOp.low_threshold)
    pub low_threshold: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSetOptionsOp.medium_threshold)
    pub medium_threshold: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSetOptionsOp.high_threshold)
    pub high_threshold: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSetOptionsOp.home_domain)
    pub home_domain: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSetOptionsOp.signer_type)
    pub signer_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSetOptionsOp.signer_key)
    pub signer_key: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSetOptionsOp.signer_weight)
    pub signer_weight: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarSetOptionsOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarSetOptionsOp {
    fn default() -> &'a StellarSetOptionsOp {
        <StellarSetOptionsOp as ::protobuf::Message>::default_instance()
    }
}

impl StellarSetOptionsOp {
    pub fn new() -> StellarSetOptionsOp {
        ::std::default::Default::default()
    }

    // optional string source_account = 1;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string inflation_destination_account = 2;

    pub fn inflation_destination_account(&self) -> &str {
        match self.inflation_destination_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_inflation_destination_account(&mut self) {
        self.inflation_destination_account = ::std::option::Option::None;
    }

    pub fn has_inflation_destination_account(&self) -> bool {
        self.inflation_destination_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_inflation_destination_account(&mut self, v: ::std::string::String) {
        self.inflation_destination_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inflation_destination_account(&mut self) -> &mut ::std::string::String {
        if self.inflation_destination_account.is_none() {
            self.inflation_destination_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.inflation_destination_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_inflation_destination_account(&mut self) -> ::std::string::String {
        self.inflation_destination_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 clear_flags = 3;

    pub fn clear_flags(&self) -> u32 {
        self.clear_flags.unwrap_or(0)
    }

    pub fn clear_clear_flags(&mut self) {
        self.clear_flags = ::std::option::Option::None;
    }

    pub fn has_clear_flags(&self) -> bool {
        self.clear_flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clear_flags(&mut self, v: u32) {
        self.clear_flags = ::std::option::Option::Some(v);
    }

    // optional uint32 set_flags = 4;

    pub fn set_flags(&self) -> u32 {
        self.set_flags.unwrap_or(0)
    }

    pub fn clear_set_flags(&mut self) {
        self.set_flags = ::std::option::Option::None;
    }

    pub fn has_set_flags(&self) -> bool {
        self.set_flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_set_flags(&mut self, v: u32) {
        self.set_flags = ::std::option::Option::Some(v);
    }

    // optional uint32 master_weight = 5;

    pub fn master_weight(&self) -> u32 {
        self.master_weight.unwrap_or(0)
    }

    pub fn clear_master_weight(&mut self) {
        self.master_weight = ::std::option::Option::None;
    }

    pub fn has_master_weight(&self) -> bool {
        self.master_weight.is_some()
    }

    // Param is passed by value, moved
    pub fn set_master_weight(&mut self, v: u32) {
        self.master_weight = ::std::option::Option::Some(v);
    }

    // optional uint32 low_threshold = 6;

    pub fn low_threshold(&self) -> u32 {
        self.low_threshold.unwrap_or(0)
    }

    pub fn clear_low_threshold(&mut self) {
        self.low_threshold = ::std::option::Option::None;
    }

    pub fn has_low_threshold(&self) -> bool {
        self.low_threshold.is_some()
    }

    // Param is passed by value, moved
    pub fn set_low_threshold(&mut self, v: u32) {
        self.low_threshold = ::std::option::Option::Some(v);
    }

    // optional uint32 medium_threshold = 7;

    pub fn medium_threshold(&self) -> u32 {
        self.medium_threshold.unwrap_or(0)
    }

    pub fn clear_medium_threshold(&mut self) {
        self.medium_threshold = ::std::option::Option::None;
    }

    pub fn has_medium_threshold(&self) -> bool {
        self.medium_threshold.is_some()
    }

    // Param is passed by value, moved
    pub fn set_medium_threshold(&mut self, v: u32) {
        self.medium_threshold = ::std::option::Option::Some(v);
    }

    // optional uint32 high_threshold = 8;

    pub fn high_threshold(&self) -> u32 {
        self.high_threshold.unwrap_or(0)
    }

    pub fn clear_high_threshold(&mut self) {
        self.high_threshold = ::std::option::Option::None;
    }

    pub fn has_high_threshold(&self) -> bool {
        self.high_threshold.is_some()
    }

    // Param is passed by value, moved
    pub fn set_high_threshold(&mut self, v: u32) {
        self.high_threshold = ::std::option::Option::Some(v);
    }

    // optional string home_domain = 9;

    pub fn home_domain(&self) -> &str {
        match self.home_domain.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_home_domain(&mut self) {
        self.home_domain = ::std::option::Option::None;
    }

    pub fn has_home_domain(&self) -> bool {
        self.home_domain.is_some()
    }

    // Param is passed by value, moved
    pub fn set_home_domain(&mut self, v: ::std::string::String) {
        self.home_domain = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_home_domain(&mut self) -> &mut ::std::string::String {
        if self.home_domain.is_none() {
            self.home_domain = ::std::option::Option::Some(::std::string::String::new());
        }
        self.home_domain.as_mut().unwrap()
    }

    // Take field
    pub fn take_home_domain(&mut self) -> ::std::string::String {
        self.home_domain.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 signer_type = 10;

    pub fn signer_type(&self) -> u32 {
        self.signer_type.unwrap_or(0)
    }

    pub fn clear_signer_type(&mut self) {
        self.signer_type = ::std::option::Option::None;
    }

    pub fn has_signer_type(&self) -> bool {
        self.signer_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signer_type(&mut self, v: u32) {
        self.signer_type = ::std::option::Option::Some(v);
    }

    // optional bytes signer_key = 11;

    pub fn signer_key(&self) -> &[u8] {
        match self.signer_key.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signer_key(&mut self) {
        self.signer_key = ::std::option::Option::None;
    }

    pub fn has_signer_key(&self) -> bool {
        self.signer_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signer_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.signer_key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signer_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signer_key.is_none() {
            self.signer_key = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.signer_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_signer_key(&mut self) -> ::std::vec::Vec<u8> {
        self.signer_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 signer_weight = 12;

    pub fn signer_weight(&self) -> u32 {
        self.signer_weight.unwrap_or(0)
    }

    pub fn clear_signer_weight(&mut self) {
        self.signer_weight = ::std::option::Option::None;
    }

    pub fn has_signer_weight(&self) -> bool {
        self.signer_weight.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signer_weight(&mut self, v: u32) {
        self.signer_weight = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarSetOptionsOp| { &m.source_account },
            |m: &mut StellarSetOptionsOp| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "inflation_destination_account",
            |m: &StellarSetOptionsOp| { &m.inflation_destination_account },
            |m: &mut StellarSetOptionsOp| { &mut m.inflation_destination_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "clear_flags",
            |m: &StellarSetOptionsOp| { &m.clear_flags },
            |m: &mut StellarSetOptionsOp| { &mut m.clear_flags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "set_flags",
            |m: &StellarSetOptionsOp| { &m.set_flags },
            |m: &mut StellarSetOptionsOp| { &mut m.set_flags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "master_weight",
            |m: &StellarSetOptionsOp| { &m.master_weight },
            |m: &mut StellarSetOptionsOp| { &mut m.master_weight },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "low_threshold",
            |m: &StellarSetOptionsOp| { &m.low_threshold },
            |m: &mut StellarSetOptionsOp| { &mut m.low_threshold },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "medium_threshold",
            |m: &StellarSetOptionsOp| { &m.medium_threshold },
            |m: &mut StellarSetOptionsOp| { &mut m.medium_threshold },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "high_threshold",
            |m: &StellarSetOptionsOp| { &m.high_threshold },
            |m: &mut StellarSetOptionsOp| { &mut m.high_threshold },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "home_domain",
            |m: &StellarSetOptionsOp| { &m.home_domain },
            |m: &mut StellarSetOptionsOp| { &mut m.home_domain },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signer_type",
            |m: &StellarSetOptionsOp| { &m.signer_type },
            |m: &mut StellarSetOptionsOp| { &mut m.signer_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signer_key",
            |m: &StellarSetOptionsOp| { &m.signer_key },
            |m: &mut StellarSetOptionsOp| { &mut m.signer_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signer_weight",
            |m: &StellarSetOptionsOp| { &m.signer_weight },
            |m: &mut StellarSetOptionsOp| { &mut m.signer_weight },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarSetOptionsOp>(
            "StellarSetOptionsOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarSetOptionsOp {
    const NAME: &'static str = "StellarSetOptionsOp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.inflation_destination_account = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.clear_flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.set_flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.master_weight = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.low_threshold = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.medium_threshold = ::std::option::Option::Some(is.read_uint32()?);
                },
                64 => {
                    self.high_threshold = ::std::option::Option::Some(is.read_uint32()?);
                },
                74 => {
                    self.home_domain = ::std::option::Option::Some(is.read_string()?);
                },
                80 => {
                    self.signer_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                90 => {
                    self.signer_key = ::std::option::Option::Some(is.read_bytes()?);
                },
                96 => {
                    self.signer_weight = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.inflation_destination_account.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.clear_flags {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.set_flags {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.master_weight {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.low_threshold {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.medium_threshold {
            my_size += ::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.high_threshold {
            my_size += ::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.home_domain.as_ref() {
            my_size += ::protobuf::rt::string_size(9, &v);
        }
        if let Some(v) = self.signer_type {
            my_size += ::protobuf::rt::uint32_size(10, v);
        }
        if let Some(v) = self.signer_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(11, &v);
        }
        if let Some(v) = self.signer_weight {
            my_size += ::protobuf::rt::uint32_size(12, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.inflation_destination_account.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.clear_flags {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.set_flags {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.master_weight {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.low_threshold {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.medium_threshold {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.high_threshold {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.home_domain.as_ref() {
            os.write_string(9, v)?;
        }
        if let Some(v) = self.signer_type {
            os.write_uint32(10, v)?;
        }
        if let Some(v) = self.signer_key.as_ref() {
            os.write_bytes(11, v)?;
        }
        if let Some(v) = self.signer_weight {
            os.write_uint32(12, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarSetOptionsOp {
        StellarSetOptionsOp::new()
    }

    fn clear(&mut self) {
        self.source_account = ::std::option::Option::None;
        self.inflation_destination_account = ::std::option::Option::None;
        self.clear_flags = ::std::option::Option::None;
        self.set_flags = ::std::option::Option::None;
        self.master_weight = ::std::option::Option::None;
        self.low_threshold = ::std::option::Option::None;
        self.medium_threshold = ::std::option::Option::None;
        self.high_threshold = ::std::option::Option::None;
        self.home_domain = ::std::option::Option::None;
        self.signer_type = ::std::option::Option::None;
        self.signer_key = ::std::option::Option::None;
        self.signer_weight = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarSetOptionsOp {
        static instance: StellarSetOptionsOp = StellarSetOptionsOp {
            source_account: ::std::option::Option::None,
            inflation_destination_account: ::std::option::Option::None,
            clear_flags: ::std::option::Option::None,
            set_flags: ::std::option::Option::None,
            master_weight: ::std::option::Option::None,
            low_threshold: ::std::option::Option::None,
            medium_threshold: ::std::option::Option::None,
            high_threshold: ::std::option::Option::None,
            home_domain: ::std::option::Option::None,
            signer_type: ::std::option::Option::None,
            signer_key: ::std::option::Option::None,
            signer_weight: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarSetOptionsOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarSetOptionsOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarSetOptionsOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarSetOptionsOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: ask device to confirm this operation type
///  @next StellarTxOpRequest
///  @next StellarSignedTx
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarChangeTrustOp)
pub struct StellarChangeTrustOp {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarChangeTrustOp.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarChangeTrustOp.asset)
    pub asset: ::protobuf::MessageField<StellarAssetType>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarChangeTrustOp.limit)
    pub limit: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarChangeTrustOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarChangeTrustOp {
    fn default() -> &'a StellarChangeTrustOp {
        <StellarChangeTrustOp as ::protobuf::Message>::default_instance()
    }
}

impl StellarChangeTrustOp {
    pub fn new() -> StellarChangeTrustOp {
        ::std::default::Default::default()
    }

    // optional string source_account = 1;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 limit = 3;

    pub fn limit(&self) -> u64 {
        self.limit.unwrap_or(0)
    }

    pub fn clear_limit(&mut self) {
        self.limit = ::std::option::Option::None;
    }

    pub fn has_limit(&self) -> bool {
        self.limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: u64) {
        self.limit = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarChangeTrustOp| { &m.source_account },
            |m: &mut StellarChangeTrustOp| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, StellarAssetType>(
            "asset",
            |m: &StellarChangeTrustOp| { &m.asset },
            |m: &mut StellarChangeTrustOp| { &mut m.asset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "limit",
            |m: &StellarChangeTrustOp| { &m.limit },
            |m: &mut StellarChangeTrustOp| { &mut m.limit },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarChangeTrustOp>(
            "StellarChangeTrustOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarChangeTrustOp {
    const NAME: &'static str = "StellarChangeTrustOp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.asset)?;
                },
                24 => {
                    self.limit = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.asset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.limit {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.asset.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.limit {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarChangeTrustOp {
        StellarChangeTrustOp::new()
    }

    fn clear(&mut self) {
        self.source_account = ::std::option::Option::None;
        self.asset.clear();
        self.limit = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarChangeTrustOp {
        static instance: StellarChangeTrustOp = StellarChangeTrustOp {
            source_account: ::std::option::Option::None,
            asset: ::protobuf::MessageField::none(),
            limit: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarChangeTrustOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarChangeTrustOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarChangeTrustOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarChangeTrustOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: ask device to confirm this operation type
///  @next StellarTxOpRequest
///  @next StellarSignedTx
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarAllowTrustOp)
pub struct StellarAllowTrustOp {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarAllowTrustOp.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarAllowTrustOp.trusted_account)
    pub trusted_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarAllowTrustOp.asset_type)
    pub asset_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarAllowTrustOp.asset_code)
    pub asset_code: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarAllowTrustOp.is_authorized)
    pub is_authorized: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarAllowTrustOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarAllowTrustOp {
    fn default() -> &'a StellarAllowTrustOp {
        <StellarAllowTrustOp as ::protobuf::Message>::default_instance()
    }
}

impl StellarAllowTrustOp {
    pub fn new() -> StellarAllowTrustOp {
        ::std::default::Default::default()
    }

    // optional string source_account = 1;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string trusted_account = 2;

    pub fn trusted_account(&self) -> &str {
        match self.trusted_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_trusted_account(&mut self) {
        self.trusted_account = ::std::option::Option::None;
    }

    pub fn has_trusted_account(&self) -> bool {
        self.trusted_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trusted_account(&mut self, v: ::std::string::String) {
        self.trusted_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trusted_account(&mut self) -> &mut ::std::string::String {
        if self.trusted_account.is_none() {
            self.trusted_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.trusted_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_trusted_account(&mut self) -> ::std::string::String {
        self.trusted_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 asset_type = 3;

    pub fn asset_type(&self) -> u32 {
        self.asset_type.unwrap_or(0)
    }

    pub fn clear_asset_type(&mut self) {
        self.asset_type = ::std::option::Option::None;
    }

    pub fn has_asset_type(&self) -> bool {
        self.asset_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_asset_type(&mut self, v: u32) {
        self.asset_type = ::std::option::Option::Some(v);
    }

    // optional string asset_code = 4;

    pub fn asset_code(&self) -> &str {
        match self.asset_code.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_asset_code(&mut self) {
        self.asset_code = ::std::option::Option::None;
    }

    pub fn has_asset_code(&self) -> bool {
        self.asset_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_asset_code(&mut self, v: ::std::string::String) {
        self.asset_code = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_code(&mut self) -> &mut ::std::string::String {
        if self.asset_code.is_none() {
            self.asset_code = ::std::option::Option::Some(::std::string::String::new());
        }
        self.asset_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_asset_code(&mut self) -> ::std::string::String {
        self.asset_code.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 is_authorized = 5;

    pub fn is_authorized(&self) -> u32 {
        self.is_authorized.unwrap_or(0)
    }

    pub fn clear_is_authorized(&mut self) {
        self.is_authorized = ::std::option::Option::None;
    }

    pub fn has_is_authorized(&self) -> bool {
        self.is_authorized.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_authorized(&mut self, v: u32) {
        self.is_authorized = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarAllowTrustOp| { &m.source_account },
            |m: &mut StellarAllowTrustOp| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "trusted_account",
            |m: &StellarAllowTrustOp| { &m.trusted_account },
            |m: &mut StellarAllowTrustOp| { &mut m.trusted_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "asset_type",
            |m: &StellarAllowTrustOp| { &m.asset_type },
            |m: &mut StellarAllowTrustOp| { &mut m.asset_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "asset_code",
            |m: &StellarAllowTrustOp| { &m.asset_code },
            |m: &mut StellarAllowTrustOp| { &mut m.asset_code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_authorized",
            |m: &StellarAllowTrustOp| { &m.is_authorized },
            |m: &mut StellarAllowTrustOp| { &mut m.is_authorized },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarAllowTrustOp>(
            "StellarAllowTrustOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarAllowTrustOp {
    const NAME: &'static str = "StellarAllowTrustOp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.trusted_account = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.asset_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    self.asset_code = ::std::option::Option::Some(is.read_string()?);
                },
                40 => {
                    self.is_authorized = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.trusted_account.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.asset_type {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.asset_code.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.is_authorized {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.trusted_account.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.asset_type {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.asset_code.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.is_authorized {
            os.write_uint32(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarAllowTrustOp {
        StellarAllowTrustOp::new()
    }

    fn clear(&mut self) {
        self.source_account = ::std::option::Option::None;
        self.trusted_account = ::std::option::Option::None;
        self.asset_type = ::std::option::Option::None;
        self.asset_code = ::std::option::Option::None;
        self.is_authorized = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarAllowTrustOp {
        static instance: StellarAllowTrustOp = StellarAllowTrustOp {
            source_account: ::std::option::Option::None,
            trusted_account: ::std::option::Option::None,
            asset_type: ::std::option::Option::None,
            asset_code: ::std::option::Option::None,
            is_authorized: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarAllowTrustOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarAllowTrustOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarAllowTrustOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarAllowTrustOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: ask device to confirm this operation type
///  @next StellarTxOpRequest
///  @next StellarSignedTx
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarAccountMergeOp)
pub struct StellarAccountMergeOp {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarAccountMergeOp.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarAccountMergeOp.destination_account)
    pub destination_account: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarAccountMergeOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarAccountMergeOp {
    fn default() -> &'a StellarAccountMergeOp {
        <StellarAccountMergeOp as ::protobuf::Message>::default_instance()
    }
}

impl StellarAccountMergeOp {
    pub fn new() -> StellarAccountMergeOp {
        ::std::default::Default::default()
    }

    // optional string source_account = 1;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string destination_account = 2;

    pub fn destination_account(&self) -> &str {
        match self.destination_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_destination_account(&mut self) {
        self.destination_account = ::std::option::Option::None;
    }

    pub fn has_destination_account(&self) -> bool {
        self.destination_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_destination_account(&mut self, v: ::std::string::String) {
        self.destination_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_destination_account(&mut self) -> &mut ::std::string::String {
        if self.destination_account.is_none() {
            self.destination_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.destination_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_destination_account(&mut self) -> ::std::string::String {
        self.destination_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarAccountMergeOp| { &m.source_account },
            |m: &mut StellarAccountMergeOp| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "destination_account",
            |m: &StellarAccountMergeOp| { &m.destination_account },
            |m: &mut StellarAccountMergeOp| { &mut m.destination_account },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarAccountMergeOp>(
            "StellarAccountMergeOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarAccountMergeOp {
    const NAME: &'static str = "StellarAccountMergeOp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.destination_account = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.destination_account.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.destination_account.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarAccountMergeOp {
        StellarAccountMergeOp::new()
    }

    fn clear(&mut self) {
        self.source_account = ::std::option::Option::None;
        self.destination_account = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarAccountMergeOp {
        static instance: StellarAccountMergeOp = StellarAccountMergeOp {
            source_account: ::std::option::Option::None,
            destination_account: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarAccountMergeOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarAccountMergeOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarAccountMergeOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarAccountMergeOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: ask device to confirm this operation type
///  @next StellarTxOpRequest
///  @next StellarSignedTx
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarManageDataOp)
pub struct StellarManageDataOp {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarManageDataOp.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarManageDataOp.key)
    pub key: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarManageDataOp.value)
    pub value: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarManageDataOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarManageDataOp {
    fn default() -> &'a StellarManageDataOp {
        <StellarManageDataOp as ::protobuf::Message>::default_instance()
    }
}

impl StellarManageDataOp {
    pub fn new() -> StellarManageDataOp {
        ::std::default::Default::default()
    }

    // optional string source_account = 1;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string key = 2;

    pub fn key(&self) -> &str {
        match self.key.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_key(&mut self) {
        self.key = ::std::option::Option::None;
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        if self.key.is_none() {
            self.key = ::std::option::Option::Some(::std::string::String::new());
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        self.key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes value = 3;

    pub fn value(&self) -> &[u8] {
        match self.value.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.value.is_none() {
            self.value = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        self.value.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarManageDataOp| { &m.source_account },
            |m: &mut StellarManageDataOp| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "key",
            |m: &StellarManageDataOp| { &m.key },
            |m: &mut StellarManageDataOp| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "value",
            |m: &StellarManageDataOp| { &m.value },
            |m: &mut StellarManageDataOp| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarManageDataOp>(
            "StellarManageDataOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarManageDataOp {
    const NAME: &'static str = "StellarManageDataOp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.key = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.value = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.key.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.value.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.key.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.value.as_ref() {
            os.write_bytes(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarManageDataOp {
        StellarManageDataOp::new()
    }

    fn clear(&mut self) {
        self.source_account = ::std::option::Option::None;
        self.key = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarManageDataOp {
        static instance: StellarManageDataOp = StellarManageDataOp {
            source_account: ::std::option::Option::None,
            key: ::std::option::Option::None,
            value: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarManageDataOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarManageDataOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarManageDataOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarManageDataOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: ask device to confirm this operation type
///  @next StellarTxOpRequest
///  @next StellarSignedTx
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarBumpSequenceOp)
pub struct StellarBumpSequenceOp {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarBumpSequenceOp.source_account)
    pub source_account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarBumpSequenceOp.bump_to)
    pub bump_to: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarBumpSequenceOp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarBumpSequenceOp {
    fn default() -> &'a StellarBumpSequenceOp {
        <StellarBumpSequenceOp as ::protobuf::Message>::default_instance()
    }
}

impl StellarBumpSequenceOp {
    pub fn new() -> StellarBumpSequenceOp {
        ::std::default::Default::default()
    }

    // optional string source_account = 1;

    pub fn source_account(&self) -> &str {
        match self.source_account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source_account(&mut self) {
        self.source_account = ::std::option::Option::None;
    }

    pub fn has_source_account(&self) -> bool {
        self.source_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_account(&mut self, v: ::std::string::String) {
        self.source_account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_account(&mut self) -> &mut ::std::string::String {
        if self.source_account.is_none() {
            self.source_account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_account(&mut self) -> ::std::string::String {
        self.source_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 bump_to = 2;

    pub fn bump_to(&self) -> u64 {
        self.bump_to.unwrap_or(0)
    }

    pub fn clear_bump_to(&mut self) {
        self.bump_to = ::std::option::Option::None;
    }

    pub fn has_bump_to(&self) -> bool {
        self.bump_to.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bump_to(&mut self, v: u64) {
        self.bump_to = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source_account",
            |m: &StellarBumpSequenceOp| { &m.source_account },
            |m: &mut StellarBumpSequenceOp| { &mut m.source_account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "bump_to",
            |m: &StellarBumpSequenceOp| { &m.bump_to },
            |m: &mut StellarBumpSequenceOp| { &mut m.bump_to },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarBumpSequenceOp>(
            "StellarBumpSequenceOp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarBumpSequenceOp {
    const NAME: &'static str = "StellarBumpSequenceOp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.source_account = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.bump_to = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.source_account.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.bump_to {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.source_account.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.bump_to {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarBumpSequenceOp {
        StellarBumpSequenceOp::new()
    }

    fn clear(&mut self) {
        self.source_account = ::std::option::Option::None;
        self.bump_to = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarBumpSequenceOp {
        static instance: StellarBumpSequenceOp = StellarBumpSequenceOp {
            source_account: ::std::option::Option::None,
            bump_to: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarBumpSequenceOp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarBumpSequenceOp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarBumpSequenceOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarBumpSequenceOp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Response: signature for transaction
///  @end
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.stellar.StellarSignedTx)
pub struct StellarSignedTx {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignedTx.public_key)
    pub public_key: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.stellar.StellarSignedTx.signature)
    pub signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.stellar.StellarSignedTx.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StellarSignedTx {
    fn default() -> &'a StellarSignedTx {
        <StellarSignedTx as ::protobuf::Message>::default_instance()
    }
}

impl StellarSignedTx {
    pub fn new() -> StellarSignedTx {
        ::std::default::Default::default()
    }

    // optional bytes public_key = 1;

    pub fn public_key(&self) -> &[u8] {
        match self.public_key.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_public_key(&mut self) {
        self.public_key = ::std::option::Option::None;
    }

    pub fn has_public_key(&self) -> bool {
        self.public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.public_key.is_none() {
            self.public_key = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
        self.public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes signature = 2;

    pub fn signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "public_key",
            |m: &StellarSignedTx| { &m.public_key },
            |m: &mut StellarSignedTx| { &mut m.public_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature",
            |m: &StellarSignedTx| { &m.signature },
            |m: &mut StellarSignedTx| { &mut m.signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StellarSignedTx>(
            "StellarSignedTx",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StellarSignedTx {
    const NAME: &'static str = "StellarSignedTx";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.public_key = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.public_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.public_key.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.signature.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StellarSignedTx {
        StellarSignedTx::new()
    }

    fn clear(&mut self) {
        self.public_key = ::std::option::Option::None;
        self.signature = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StellarSignedTx {
        static instance: StellarSignedTx = StellarSignedTx {
            public_key: ::std::option::Option::None,
            signature: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StellarSignedTx {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StellarSignedTx").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StellarSignedTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StellarSignedTx {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16messages-stellar.proto\x12\x1ahw.trezor.messages.stellar\"R\n\x10S\
    tellarAssetType\x12\x12\n\x04type\x18\x01\x20\x01(\rR\x04type\x12\x12\n\
    \x04code\x18\x02\x20\x01(\tR\x04code\x12\x16\n\x06issuer\x18\x03\x20\x01\
    (\tR\x06issuer\"S\n\x11StellarGetAddress\x12\x1b\n\taddress_n\x18\x01\
    \x20\x03(\rR\x08addressN\x12!\n\x0cshow_display\x18\x02\x20\x01(\x08R\
    \x0bshowDisplay\"*\n\x0eStellarAddress\x12\x18\n\x07address\x18\x01\x20\
    \x01(\tR\x07address\"\xa6\x03\n\rStellarSignTx\x12\x1b\n\taddress_n\x18\
    \x02\x20\x03(\rR\x08addressN\x12-\n\x12network_passphrase\x18\x03\x20\
    \x01(\tR\x11networkPassphrase\x12%\n\x0esource_account\x18\x04\x20\x01(\
    \tR\rsourceAccount\x12\x10\n\x03fee\x18\x05\x20\x01(\rR\x03fee\x12'\n\
    \x0fsequence_number\x18\x06\x20\x01(\x04R\x0esequenceNumber\x12)\n\x10ti\
    mebounds_start\x18\x08\x20\x01(\rR\x0ftimeboundsStart\x12%\n\x0etimeboun\
    ds_end\x18\t\x20\x01(\rR\rtimeboundsEnd\x12\x1b\n\tmemo_type\x18\n\x20\
    \x01(\rR\x08memoType\x12\x1b\n\tmemo_text\x18\x0b\x20\x01(\tR\x08memoTex\
    t\x12\x17\n\x07memo_id\x18\x0c\x20\x01(\x04R\x06memoId\x12\x1b\n\tmemo_h\
    ash\x18\r\x20\x01(\x0cR\x08memoHash\x12%\n\x0enum_operations\x18\x0e\x20\
    \x01(\rR\rnumOperations\"\x14\n\x12StellarTxOpRequest\"\xc6\x01\n\x10Ste\
    llarPaymentOp\x12%\n\x0esource_account\x18\x01\x20\x01(\tR\rsourceAccoun\
    t\x12/\n\x13destination_account\x18\x02\x20\x01(\tR\x12destinationAccoun\
    t\x12B\n\x05asset\x18\x03\x20\x01(\x0b2,.hw.trezor.messages.stellar.Stel\
    larAssetTypeR\x05asset\x12\x16\n\x06amount\x18\x04\x20\x01(\x12R\x06amou\
    nt\"\x8b\x01\n\x16StellarCreateAccountOp\x12%\n\x0esource_account\x18\
    \x01\x20\x01(\tR\rsourceAccount\x12\x1f\n\x0bnew_account\x18\x02\x20\x01\
    (\tR\nnewAccount\x12)\n\x10starting_balance\x18\x03\x20\x01(\x12R\x0fsta\
    rtingBalance\"\xa4\x03\n\x14StellarPathPaymentOp\x12%\n\x0esource_accoun\
    t\x18\x01\x20\x01(\tR\rsourceAccount\x12K\n\nsend_asset\x18\x02\x20\x01(\
    \x0b2,.hw.trezor.messages.stellar.StellarAssetTypeR\tsendAsset\x12\x19\n\
    \x08send_max\x18\x03\x20\x01(\x12R\x07sendMax\x12/\n\x13destination_acco\
    unt\x18\x04\x20\x01(\tR\x12destinationAccount\x12Y\n\x11destination_asse\
    t\x18\x05\x20\x01(\x0b2,.hw.trezor.messages.stellar.StellarAssetTypeR\
    \x10destinationAsset\x12-\n\x12destination_amount\x18\x06\x20\x01(\x12R\
    \x11destinationAmount\x12B\n\x05paths\x18\x07\x20\x03(\x0b2,.hw.trezor.m\
    essages.stellar.StellarAssetTypeR\x05paths\"\xc6\x02\n\x14StellarManageO\
    fferOp\x12%\n\x0esource_account\x18\x01\x20\x01(\tR\rsourceAccount\x12Q\
    \n\rselling_asset\x18\x02\x20\x01(\x0b2,.hw.trezor.messages.stellar.Stel\
    larAssetTypeR\x0csellingAsset\x12O\n\x0cbuying_asset\x18\x03\x20\x01(\
    \x0b2,.hw.trezor.messages.stellar.StellarAssetTypeR\x0bbuyingAsset\x12\
    \x16\n\x06amount\x18\x04\x20\x01(\x12R\x06amount\x12\x17\n\x07price_n\
    \x18\x05\x20\x01(\rR\x06priceN\x12\x17\n\x07price_d\x18\x06\x20\x01(\rR\
    \x06priceD\x12\x19\n\x08offer_id\x18\x07\x20\x01(\x04R\x07offerId\"\xb2\
    \x02\n\x1bStellarCreatePassiveOfferOp\x12%\n\x0esource_account\x18\x01\
    \x20\x01(\tR\rsourceAccount\x12Q\n\rselling_asset\x18\x02\x20\x01(\x0b2,\
    .hw.trezor.messages.stellar.StellarAssetTypeR\x0csellingAsset\x12O\n\x0c\
    buying_asset\x18\x03\x20\x01(\x0b2,.hw.trezor.messages.stellar.StellarAs\
    setTypeR\x0bbuyingAsset\x12\x16\n\x06amount\x18\x04\x20\x01(\x12R\x06amo\
    unt\x12\x17\n\x07price_n\x18\x05\x20\x01(\rR\x06priceN\x12\x17\n\x07pric\
    e_d\x18\x06\x20\x01(\rR\x06priceD\"\xe0\x03\n\x13StellarSetOptionsOp\x12\
    %\n\x0esource_account\x18\x01\x20\x01(\tR\rsourceAccount\x12B\n\x1dinfla\
    tion_destination_account\x18\x02\x20\x01(\tR\x1binflationDestinationAcco\
    unt\x12\x1f\n\x0bclear_flags\x18\x03\x20\x01(\rR\nclearFlags\x12\x1b\n\t\
    set_flags\x18\x04\x20\x01(\rR\x08setFlags\x12#\n\rmaster_weight\x18\x05\
    \x20\x01(\rR\x0cmasterWeight\x12#\n\rlow_threshold\x18\x06\x20\x01(\rR\
    \x0clowThreshold\x12)\n\x10medium_threshold\x18\x07\x20\x01(\rR\x0fmediu\
    mThreshold\x12%\n\x0ehigh_threshold\x18\x08\x20\x01(\rR\rhighThreshold\
    \x12\x1f\n\x0bhome_domain\x18\t\x20\x01(\tR\nhomeDomain\x12\x1f\n\x0bsig\
    ner_type\x18\n\x20\x01(\rR\nsignerType\x12\x1d\n\nsigner_key\x18\x0b\x20\
    \x01(\x0cR\tsignerKey\x12#\n\rsigner_weight\x18\x0c\x20\x01(\rR\x0csigne\
    rWeight\"\x97\x01\n\x14StellarChangeTrustOp\x12%\n\x0esource_account\x18\
    \x01\x20\x01(\tR\rsourceAccount\x12B\n\x05asset\x18\x02\x20\x01(\x0b2,.h\
    w.trezor.messages.stellar.StellarAssetTypeR\x05asset\x12\x14\n\x05limit\
    \x18\x03\x20\x01(\x04R\x05limit\"\xc8\x01\n\x13StellarAllowTrustOp\x12%\
    \n\x0esource_account\x18\x01\x20\x01(\tR\rsourceAccount\x12'\n\x0ftruste\
    d_account\x18\x02\x20\x01(\tR\x0etrustedAccount\x12\x1d\n\nasset_type\
    \x18\x03\x20\x01(\rR\tassetType\x12\x1d\n\nasset_code\x18\x04\x20\x01(\t\
    R\tassetCode\x12#\n\ris_authorized\x18\x05\x20\x01(\rR\x0cisAuthorized\"\
    o\n\x15StellarAccountMergeOp\x12%\n\x0esource_account\x18\x01\x20\x01(\t\
    R\rsourceAccount\x12/\n\x13destination_account\x18\x02\x20\x01(\tR\x12de\
    stinationAccount\"d\n\x13StellarManageDataOp\x12%\n\x0esource_account\
    \x18\x01\x20\x01(\tR\rsourceAccount\x12\x10\n\x03key\x18\x02\x20\x01(\tR\
    \x03key\x12\x14\n\x05value\x18\x03\x20\x01(\x0cR\x05value\"W\n\x15Stella\
    rBumpSequenceOp\x12%\n\x0esource_account\x18\x01\x20\x01(\tR\rsourceAcco\
    unt\x12\x17\n\x07bump_to\x18\x02\x20\x01(\x04R\x06bumpTo\"N\n\x0fStellar\
    SignedTx\x12\x1d\n\npublic_key\x18\x01\x20\x01(\x0cR\tpublicKey\x12\x1c\
    \n\tsignature\x18\x02\x20\x01(\x0cR\tsignatureB;\n#com.satoshilabs.trezo\
    r.lib.protobufB\x14TrezorMessageStellarJ\xf2J\n\x07\x12\x05\0\0\xdd\x01\
    \x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0#\n\
    \x08\n\x01\x08\x12\x03\x04\0<\n.\n\x02\x08\x01\x12\x03\x04\0<\x1a#\x20Su\
    gar\x20for\x20easier\x20handling\x20in\x20Java\n\n\x08\n\x01\x08\x12\x03\
    \x05\05\n\t\n\x02\x08\x08\x12\x03\x05\05\n1\n\x02\x04\0\x12\x04\x0b\0\
    \x0f\x01\x1a%*\n\x20Describes\x20a\x20Stellar\x20asset\n\x20@embed\n\n\n\
    \n\x03\x04\0\x01\x12\x03\x0b\x08\x18\nF\n\x04\x04\0\x02\0\x12\x03\x0c\
    \x04\x1d\"9\x200\x20=\x20native\x20asset\x20(XLM),\x201\x20=\x20alphanum\
    \x204,\x202\x20=\x20alphanum\x2012\n\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\
    \x0c\x04\x0c\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0c\r\x13\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x0c\x14\x18\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x0c\x1b\x1c\n@\n\x04\x04\0\x02\x01\x12\x03\r\x04\x1d\"3\x20for\x20non-n\
    ative\x20assets,\x20string\x20describing\x20the\x20code\n\n\x0c\n\x05\
    \x04\0\x02\x01\x04\x12\x03\r\x04\x0c\n\x0c\n\x05\x04\0\x02\x01\x05\x12\
    \x03\r\r\x13\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\r\x14\x18\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03\r\x1b\x1c\n\x1e\n\x04\x04\0\x02\x02\x12\x03\
    \x0e\x04\x1f\"\x11\x20issuing\x20address\n\n\x0c\n\x05\x04\0\x02\x02\x04\
    \x12\x03\x0e\x04\x0c\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x0e\r\x13\n\
    \x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x0e\x14\x1a\n\x0c\n\x05\x04\0\x02\
    \x02\x03\x12\x03\x0e\x1d\x1e\nU\n\x02\x04\x01\x12\x04\x16\0\x19\x01\x1aI\
    *\n\x20Request:\x20Address\x20at\x20the\x20specified\x20index\n\x20@star\
    t\n\x20@next\x20StellarAddress\n\n\n\n\x03\x04\x01\x01\x12\x03\x16\x08\
    \x19\n[\n\x04\x04\x01\x02\0\x12\x03\x17\x04\"\"N\x20BIP-32\x20path.\x20F\
    or\x20compatibility\x20with\x20other\x20wallets,\x20must\x20be\x20m/44'/\
    148'/index'\n\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x17\x04\x0c\n\x0c\n\
    \x05\x04\x01\x02\0\x05\x12\x03\x17\r\x13\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\x17\x14\x1d\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x17\x20!\nC\n\
    \x04\x04\x01\x02\x01\x12\x03\x18\x04#\"6\x20optionally\x20show\x20on\x20\
    display\x20before\x20sending\x20the\x20result\n\n\x0c\n\x05\x04\x01\x02\
    \x01\x04\x12\x03\x18\x04\x0c\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x18\
    \r\x11\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x18\x12\x1e\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x03\x18!\"\n;\n\x02\x04\x02\x12\x04\x1f\0!\x01\
    \x1a/*\n\x20Response:\x20Address\x20for\x20the\x20given\x20index\n\x20@e\
    nd\n\n\n\n\x03\x04\x02\x01\x12\x03\x1f\x08\x16\nK\n\x04\x04\x02\x02\0\
    \x12\x03\x20\x04\x20\">\x20Address\x20in\x20Stellar\x20format\x20(base32\
    \x20of\x20a\x20pubkey\x20with\x20checksum)\n\n\x0c\n\x05\x04\x02\x02\0\
    \x04\x12\x03\x20\x04\x0c\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x20\r\x13\
    \n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x20\x14\x1b\n\x0c\n\x05\x04\x02\
    \x02\0\x03\x12\x03\x20\x1e\x1f\na\n\x02\x04\x03\x12\x04(\05\x01\x1aU*\n\
    \x20Request:\x20ask\x20device\x20to\x20sign\x20Stellar\x20transaction\n\
    \x20@start\n\x20@next\x20StellarTxOpRequest\n\n\n\n\x03\x04\x03\x01\x12\
    \x03(\x08\x15\n[\n\x04\x04\x03\x02\0\x12\x03)\x04\"\"N\x20BIP-32\x20path\
    .\x20For\x20compatibility\x20with\x20other\x20wallets,\x20must\x20be\x20\
    m/44'/148'/index'\n\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03)\x04\x0c\n\x0c\
    \n\x05\x04\x03\x02\0\x05\x12\x03)\r\x13\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x03)\x14\x1d\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03)\x20!\nI\n\x04\
    \x04\x03\x02\x01\x12\x03*\x04+\"<\x20passphrase\x20for\x20signing\x20mes\
    sages\x20on\x20the\x20destination\x20network\n\n\x0c\n\x05\x04\x03\x02\
    \x01\x04\x12\x03*\x04\x0c\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03*\r\x13\
    \n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03*\x14&\n\x0c\n\x05\x04\x03\x02\
    \x01\x03\x12\x03*)*\n%\n\x04\x04\x03\x02\x02\x12\x03+\x04'\"\x18\x20sour\
    ce\x20account\x20address\n\n\x0c\n\x05\x04\x03\x02\x02\x04\x12\x03+\x04\
    \x0c\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03+\r\x13\n\x0c\n\x05\x04\x03\
    \x02\x02\x01\x12\x03+\x14\"\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03+%&\n\
    3\n\x04\x04\x03\x02\x03\x12\x03,\x04\x1c\"&\x20Fee\x20(in\x20stroops)\
    \x20for\x20the\x20transaction\n\n\x0c\n\x05\x04\x03\x02\x03\x04\x12\x03,\
    \x04\x0c\n\x0c\n\x05\x04\x03\x02\x03\x05\x12\x03,\r\x13\n\x0c\n\x05\x04\
    \x03\x02\x03\x01\x12\x03,\x14\x17\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\
    \x03,\x1a\x1b\n*\n\x04\x04\x03\x02\x04\x12\x03-\x04(\"\x1d\x20transactio\
    n\x20sequence\x20number\n\n\x0c\n\x05\x04\x03\x02\x04\x04\x12\x03-\x04\
    \x0c\n\x0c\n\x05\x04\x03\x02\x04\x05\x12\x03-\r\x13\n\x0c\n\x05\x04\x03\
    \x02\x04\x01\x12\x03-\x14#\n\x0c\n\x05\x04\x03\x02\x04\x03\x12\x03-&'\nE\
    \n\x04\x04\x03\x02\x05\x12\x03.\x04)\"8\x20unix\x20timestamp\x20(client\
    \x20must\x20truncate\x20this\x20to\x2032\x20bytes)\n\n\x0c\n\x05\x04\x03\
    \x02\x05\x04\x12\x03.\x04\x0c\n\x0c\n\x05\x04\x03\x02\x05\x05\x12\x03.\r\
    \x13\n\x0c\n\x05\x04\x03\x02\x05\x01\x12\x03.\x14$\n\x0c\n\x05\x04\x03\
    \x02\x05\x03\x12\x03.'(\nE\n\x04\x04\x03\x02\x06\x12\x03/\x04'\"8\x20uni\
    x\x20timestamp\x20(client\x20must\x20truncate\x20this\x20to\x2032\x20byt\
    es)\n\n\x0c\n\x05\x04\x03\x02\x06\x04\x12\x03/\x04\x0c\n\x0c\n\x05\x04\
    \x03\x02\x06\x05\x12\x03/\r\x13\n\x0c\n\x05\x04\x03\x02\x06\x01\x12\x03/\
    \x14\"\n\x0c\n\x05\x04\x03\x02\x06\x03\x12\x03/%&\n?\n\x04\x04\x03\x02\
    \x07\x12\x030\x04#\"2\x200\x20=\x20none,\x201\x20=\x20text,\x202\x20=\
    \x20id,\x203\x20=\x20hash,\x204\x20=\x20return\n\n\x0c\n\x05\x04\x03\x02\
    \x07\x04\x12\x030\x04\x0c\n\x0c\n\x05\x04\x03\x02\x07\x05\x12\x030\r\x13\
    \n\x0c\n\x05\x04\x03\x02\x07\x01\x12\x030\x14\x1d\n\x0c\n\x05\x04\x03\
    \x02\x07\x03\x12\x030\x20\"\n;\n\x04\x04\x03\x02\x08\x12\x031\x04#\".\
    \x20up\x20to\x2028\x20characters\x20(4\x20bytes\x20are\x20for\x20length)\
    \n\n\x0c\n\x05\x04\x03\x02\x08\x04\x12\x031\x04\x0c\n\x0c\n\x05\x04\x03\
    \x02\x08\x05\x12\x031\r\x13\n\x0c\n\x05\x04\x03\x02\x08\x01\x12\x031\x14\
    \x1d\n\x0c\n\x05\x04\x03\x02\x08\x03\x12\x031\x20\"\n\x1c\n\x04\x04\x03\
    \x02\t\x12\x032\x04!\"\x0f\x208-byte\x20uint64\n\n\x0c\n\x05\x04\x03\x02\
    \t\x04\x12\x032\x04\x0c\n\x0c\n\x05\x04\x03\x02\t\x05\x12\x032\r\x13\n\
    \x0c\n\x05\x04\x03\x02\t\x01\x12\x032\x14\x1b\n\x0c\n\x05\x04\x03\x02\t\
    \x03\x12\x032\x1e\x20\n+\n\x04\x04\x03\x02\n\x12\x033\x04\"\"\x1e\x2032\
    \x20bytes\x20representing\x20a\x20hash\n\n\x0c\n\x05\x04\x03\x02\n\x04\
    \x12\x033\x04\x0c\n\x0c\n\x05\x04\x03\x02\n\x05\x12\x033\r\x12\n\x0c\n\
    \x05\x04\x03\x02\n\x01\x12\x033\x13\x1c\n\x0c\n\x05\x04\x03\x02\n\x03\
    \x12\x033\x1f!\n7\n\x04\x04\x03\x02\x0b\x12\x034\x04(\"*\x20number\x20of\
    \x20operations\x20in\x20this\x20transaction\n\n\x0c\n\x05\x04\x03\x02\
    \x0b\x04\x12\x034\x04\x0c\n\x0c\n\x05\x04\x03\x02\x0b\x05\x12\x034\r\x13\
    \n\x0c\n\x05\x04\x03\x02\x0b\x01\x12\x034\x14\"\n\x0c\n\x05\x04\x03\x02\
    \x0b\x03\x12\x034%'\n\x88\x03\n\x02\x04\x04\x12\x04E\0F\x01\x1a\xfb\x02*\
    \n\x20Response:\x20device\x20is\x20ready\x20for\x20client\x20to\x20send\
    \x20the\x20next\x20operation\n\x20@next\x20StellarPaymentOp\n\x20@next\
    \x20StellarCreateAccountOp\n\x20@next\x20StellarPathPaymentOp\n\x20@next\
    \x20StellarManageOfferOp\n\x20@next\x20StellarCreatePassiveOfferOp\n\x20\
    @next\x20StellarSetOptionsOp\n\x20@next\x20StellarChangeTrustOp\n\x20@ne\
    xt\x20StellarAllowTrustOp\n\x20@next\x20StellarAccountMergeOp\n\x20@next\
    \x20StellarManageDataOp\n\x20@next\x20StellarBumpSequenceOp\n\n\n\n\x03\
    \x04\x04\x01\x12\x03E\x08\x1a\ns\n\x02\x04\x05\x12\x04M\0R\x01\x1ag*\n\
    \x20Request:\x20ask\x20device\x20to\x20confirm\x20this\x20operation\x20t\
    ype\n\x20@next\x20StellarTxOpRequest\n\x20@next\x20StellarSignedTx\n\n\n\
    \n\x03\x04\x05\x01\x12\x03M\x08\x18\n0\n\x04\x04\x05\x02\0\x12\x03N\x04'\
    \"#\x20(optional)\x20source\x20account\x20address\n\n\x0c\n\x05\x04\x05\
    \x02\0\x04\x12\x03N\x04\x0c\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03N\r\x13\
    \n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03N\x14\"\n\x0c\n\x05\x04\x05\x02\0\
    \x03\x12\x03N%&\n*\n\x04\x04\x05\x02\x01\x12\x03O\x04,\"\x1d\x20destinat\
    ion\x20account\x20address\n\n\x0c\n\x05\x04\x05\x02\x01\x04\x12\x03O\x04\
    \x0c\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03O\r\x13\n\x0c\n\x05\x04\x05\
    \x02\x01\x01\x12\x03O\x14'\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03O*+\n.\
    \n\x04\x04\x05\x02\x02\x12\x03P\x04(\"!\x20asset\x20involved\x20in\x20th\
    e\x20operation\n\n\x0c\n\x05\x04\x05\x02\x02\x04\x12\x03P\x04\x0c\n\x0c\
    \n\x05\x04\x05\x02\x02\x06\x12\x03P\r\x1d\n\x0c\n\x05\x04\x05\x02\x02\
    \x01\x12\x03P\x1e#\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03P&'\n/\n\x04\
    \x04\x05\x02\x03\x12\x03Q\x04\x1f\"\"\x20amount\x20of\x20the\x20given\
    \x20asset\x20to\x20pay\n\n\x0c\n\x05\x04\x05\x02\x03\x04\x12\x03Q\x04\
    \x0c\n\x0c\n\x05\x04\x05\x02\x03\x05\x12\x03Q\r\x13\n\x0c\n\x05\x04\x05\
    \x02\x03\x01\x12\x03Q\x14\x1a\n\x0c\n\x05\x04\x05\x02\x03\x03\x12\x03Q\
    \x1d\x1e\ns\n\x02\x04\x06\x12\x04Y\0]\x01\x1ag*\n\x20Request:\x20ask\x20\
    device\x20to\x20confirm\x20this\x20operation\x20type\n\x20@next\x20Stell\
    arTxOpRequest\n\x20@next\x20StellarSignedTx\n\n\n\n\x03\x04\x06\x01\x12\
    \x03Y\x08\x1e\n0\n\x04\x04\x06\x02\0\x12\x03Z\x04'\"#\x20(optional)\x20s\
    ource\x20account\x20address\n\n\x0c\n\x05\x04\x06\x02\0\x04\x12\x03Z\x04\
    \x0c\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03Z\r\x13\n\x0c\n\x05\x04\x06\
    \x02\0\x01\x12\x03Z\x14\"\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03Z%&\n(\n\
    \x04\x04\x06\x02\x01\x12\x03[\x04$\"\x1b\x20account\x20address\x20to\x20\
    create\n\n\x0c\n\x05\x04\x06\x02\x01\x04\x12\x03[\x04\x0c\n\x0c\n\x05\
    \x04\x06\x02\x01\x05\x12\x03[\r\x13\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\
    \x03[\x14\x1f\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03[\"#\n;\n\x04\x04\
    \x06\x02\x02\x12\x03\\\x04)\".\x20initial\x20starting\x20balance\x20for\
    \x20the\x20new\x20account\n\n\x0c\n\x05\x04\x06\x02\x02\x04\x12\x03\\\
    \x04\x0c\n\x0c\n\x05\x04\x06\x02\x02\x05\x12\x03\\\r\x13\n\x0c\n\x05\x04\
    \x06\x02\x02\x01\x12\x03\\\x14$\n\x0c\n\x05\x04\x06\x02\x02\x03\x12\x03\
    \\'(\ns\n\x02\x04\x07\x12\x04d\0l\x01\x1ag*\n\x20Request:\x20ask\x20devi\
    ce\x20to\x20confirm\x20this\x20operation\x20type\n\x20@next\x20StellarTx\
    OpRequest\n\x20@next\x20StellarSignedTx\n\n\n\n\x03\x04\x07\x01\x12\x03d\
    \x08\x1c\n(\n\x04\x04\x07\x02\0\x12\x03e\x04'\"\x1b\x20(optional)\x20sou\
    rce\x20address\n\n\x0c\n\x05\x04\x07\x02\0\x04\x12\x03e\x04\x0c\n\x0c\n\
    \x05\x04\x07\x02\0\x05\x12\x03e\r\x13\n\x0c\n\x05\x04\x07\x02\0\x01\x12\
    \x03e\x14\"\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03e%&\n\x0b\n\x04\x04\x07\
    \x02\x01\x12\x03f\x04-\n\x0c\n\x05\x04\x07\x02\x01\x04\x12\x03f\x04\x0c\
    \n\x0c\n\x05\x04\x07\x02\x01\x06\x12\x03f\r\x1d\n\x0c\n\x05\x04\x07\x02\
    \x01\x01\x12\x03f\x1e(\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03f+,\n\x0b\
    \n\x04\x04\x07\x02\x02\x12\x03g\x04!\n\x0c\n\x05\x04\x07\x02\x02\x04\x12\
    \x03g\x04\x0c\n\x0c\n\x05\x04\x07\x02\x02\x05\x12\x03g\r\x13\n\x0c\n\x05\
    \x04\x07\x02\x02\x01\x12\x03g\x14\x1c\n\x0c\n\x05\x04\x07\x02\x02\x03\
    \x12\x03g\x1f\x20\n\x0b\n\x04\x04\x07\x02\x03\x12\x03h\x04,\n\x0c\n\x05\
    \x04\x07\x02\x03\x04\x12\x03h\x04\x0c\n\x0c\n\x05\x04\x07\x02\x03\x05\
    \x12\x03h\r\x13\n\x0c\n\x05\x04\x07\x02\x03\x01\x12\x03h\x14'\n\x0c\n\
    \x05\x04\x07\x02\x03\x03\x12\x03h*+\n\x0b\n\x04\x04\x07\x02\x04\x12\x03i\
    \x044\n\x0c\n\x05\x04\x07\x02\x04\x04\x12\x03i\x04\x0c\n\x0c\n\x05\x04\
    \x07\x02\x04\x06\x12\x03i\r\x1d\n\x0c\n\x05\x04\x07\x02\x04\x01\x12\x03i\
    \x1e/\n\x0c\n\x05\x04\x07\x02\x04\x03\x12\x03i23\n\x0b\n\x04\x04\x07\x02\
    \x05\x12\x03j\x04+\n\x0c\n\x05\x04\x07\x02\x05\x04\x12\x03j\x04\x0c\n\
    \x0c\n\x05\x04\x07\x02\x05\x05\x12\x03j\r\x13\n\x0c\n\x05\x04\x07\x02\
    \x05\x01\x12\x03j\x14&\n\x0c\n\x05\x04\x07\x02\x05\x03\x12\x03j)*\n\x0b\
    \n\x04\x04\x07\x02\x06\x12\x03k\x04(\n\x0c\n\x05\x04\x07\x02\x06\x04\x12\
    \x03k\x04\x0c\n\x0c\n\x05\x04\x07\x02\x06\x06\x12\x03k\r\x1d\n\x0c\n\x05\
    \x04\x07\x02\x06\x01\x12\x03k\x1e#\n\x0c\n\x05\x04\x07\x02\x06\x03\x12\
    \x03k&'\ns\n\x02\x04\x08\x12\x04s\0{\x01\x1ag*\n\x20Request:\x20ask\x20d\
    evice\x20to\x20confirm\x20this\x20operation\x20type\n\x20@next\x20Stella\
    rTxOpRequest\n\x20@next\x20StellarSignedTx\n\n\n\n\x03\x04\x08\x01\x12\
    \x03s\x08\x1c\n0\n\x04\x04\x08\x02\0\x12\x03t\x04'\"#\x20(optional)\x20s\
    ource\x20account\x20address\n\n\x0c\n\x05\x04\x08\x02\0\x04\x12\x03t\x04\
    \x0c\n\x0c\n\x05\x04\x08\x02\0\x05\x12\x03t\r\x13\n\x0c\n\x05\x04\x08\
    \x02\0\x01\x12\x03t\x14\"\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03t%&\n\x0b\
    \n\x04\x04\x08\x02\x01\x12\x03u\x040\n\x0c\n\x05\x04\x08\x02\x01\x04\x12\
    \x03u\x04\x0c\n\x0c\n\x05\x04\x08\x02\x01\x06\x12\x03u\r\x1d\n\x0c\n\x05\
    \x04\x08\x02\x01\x01\x12\x03u\x1e+\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\
    \x03u./\n\x0b\n\x04\x04\x08\x02\x02\x12\x03v\x04/\n\x0c\n\x05\x04\x08\
    \x02\x02\x04\x12\x03v\x04\x0c\n\x0c\n\x05\x04\x08\x02\x02\x06\x12\x03v\r\
    \x1d\n\x0c\n\x05\x04\x08\x02\x02\x01\x12\x03v\x1e*\n\x0c\n\x05\x04\x08\
    \x02\x02\x03\x12\x03v-.\n\x0b\n\x04\x04\x08\x02\x03\x12\x03w\x04\x1f\n\
    \x0c\n\x05\x04\x08\x02\x03\x04\x12\x03w\x04\x0c\n\x0c\n\x05\x04\x08\x02\
    \x03\x05\x12\x03w\r\x13\n\x0c\n\x05\x04\x08\x02\x03\x01\x12\x03w\x14\x1a\
    \n\x0c\n\x05\x04\x08\x02\x03\x03\x12\x03w\x1d\x1e\n\x1e\n\x04\x04\x08\
    \x02\x04\x12\x03x\x04\x20\"\x11\x20Price\x20numerator\n\n\x0c\n\x05\x04\
    \x08\x02\x04\x04\x12\x03x\x04\x0c\n\x0c\n\x05\x04\x08\x02\x04\x05\x12\
    \x03x\r\x13\n\x0c\n\x05\x04\x08\x02\x04\x01\x12\x03x\x14\x1b\n\x0c\n\x05\
    \x04\x08\x02\x04\x03\x12\x03x\x1e\x1f\n\x20\n\x04\x04\x08\x02\x05\x12\
    \x03y\x04\x20\"\x13\x20Price\x20denominator\n\n\x0c\n\x05\x04\x08\x02\
    \x05\x04\x12\x03y\x04\x0c\n\x0c\n\x05\x04\x08\x02\x05\x05\x12\x03y\r\x13\
    \n\x0c\n\x05\x04\x08\x02\x05\x01\x12\x03y\x14\x1b\n\x0c\n\x05\x04\x08\
    \x02\x05\x03\x12\x03y\x1e\x1f\n6\n\x04\x04\x08\x02\x06\x12\x03z\x04!\")\
    \x20Offer\x20ID\x20for\x20updating\x20an\x20existing\x20offer\n\n\x0c\n\
    \x05\x04\x08\x02\x06\x04\x12\x03z\x04\x0c\n\x0c\n\x05\x04\x08\x02\x06\
    \x05\x12\x03z\r\x13\n\x0c\n\x05\x04\x08\x02\x06\x01\x12\x03z\x14\x1c\n\
    \x0c\n\x05\x04\x08\x02\x06\x03\x12\x03z\x1f\x20\nu\n\x02\x04\t\x12\x06\
    \x82\x01\0\x89\x01\x01\x1ag*\n\x20Request:\x20ask\x20device\x20to\x20con\
    firm\x20this\x20operation\x20type\n\x20@next\x20StellarTxOpRequest\n\x20\
    @next\x20StellarSignedTx\n\n\x0b\n\x03\x04\t\x01\x12\x04\x82\x01\x08#\n1\
    \n\x04\x04\t\x02\0\x12\x04\x83\x01\x04'\"#\x20(optional)\x20source\x20ac\
    count\x20address\n\n\r\n\x05\x04\t\x02\0\x04\x12\x04\x83\x01\x04\x0c\n\r\
    \n\x05\x04\t\x02\0\x05\x12\x04\x83\x01\r\x13\n\r\n\x05\x04\t\x02\0\x01\
    \x12\x04\x83\x01\x14\"\n\r\n\x05\x04\t\x02\0\x03\x12\x04\x83\x01%&\n\x0c\
    \n\x04\x04\t\x02\x01\x12\x04\x84\x01\x040\n\r\n\x05\x04\t\x02\x01\x04\
    \x12\x04\x84\x01\x04\x0c\n\r\n\x05\x04\t\x02\x01\x06\x12\x04\x84\x01\r\
    \x1d\n\r\n\x05\x04\t\x02\x01\x01\x12\x04\x84\x01\x1e+\n\r\n\x05\x04\t\
    \x02\x01\x03\x12\x04\x84\x01./\n\x0c\n\x04\x04\t\x02\x02\x12\x04\x85\x01\
    \x04/\n\r\n\x05\x04\t\x02\x02\x04\x12\x04\x85\x01\x04\x0c\n\r\n\x05\x04\
    \t\x02\x02\x06\x12\x04\x85\x01\r\x1d\n\r\n\x05\x04\t\x02\x02\x01\x12\x04\
    \x85\x01\x1e*\n\r\n\x05\x04\t\x02\x02\x03\x12\x04\x85\x01-.\n\x0c\n\x04\
    \x04\t\x02\x03\x12\x04\x86\x01\x04\x1f\n\r\n\x05\x04\t\x02\x03\x04\x12\
    \x04\x86\x01\x04\x0c\n\r\n\x05\x04\t\x02\x03\x05\x12\x04\x86\x01\r\x13\n\
    \r\n\x05\x04\t\x02\x03\x01\x12\x04\x86\x01\x14\x1a\n\r\n\x05\x04\t\x02\
    \x03\x03\x12\x04\x86\x01\x1d\x1e\n\x1f\n\x04\x04\t\x02\x04\x12\x04\x87\
    \x01\x04\x20\"\x11\x20Price\x20numerator\n\n\r\n\x05\x04\t\x02\x04\x04\
    \x12\x04\x87\x01\x04\x0c\n\r\n\x05\x04\t\x02\x04\x05\x12\x04\x87\x01\r\
    \x13\n\r\n\x05\x04\t\x02\x04\x01\x12\x04\x87\x01\x14\x1b\n\r\n\x05\x04\t\
    \x02\x04\x03\x12\x04\x87\x01\x1e\x1f\n!\n\x04\x04\t\x02\x05\x12\x04\x88\
    \x01\x04\x20\"\x13\x20Price\x20denominator\n\n\r\n\x05\x04\t\x02\x05\x04\
    \x12\x04\x88\x01\x04\x0c\n\r\n\x05\x04\t\x02\x05\x05\x12\x04\x88\x01\r\
    \x13\n\r\n\x05\x04\t\x02\x05\x01\x12\x04\x88\x01\x14\x1b\n\r\n\x05\x04\t\
    \x02\x05\x03\x12\x04\x88\x01\x1e\x1f\nu\n\x02\x04\n\x12\x06\x90\x01\0\
    \x9d\x01\x01\x1ag*\n\x20Request:\x20ask\x20device\x20to\x20confirm\x20th\
    is\x20operation\x20type\n\x20@next\x20StellarTxOpRequest\n\x20@next\x20S\
    tellarSignedTx\n\n\x0b\n\x03\x04\n\x01\x12\x04\x90\x01\x08\x1b\n1\n\x04\
    \x04\n\x02\0\x12\x04\x91\x01\x04'\"#\x20(optional)\x20source\x20account\
    \x20address\n\n\r\n\x05\x04\n\x02\0\x04\x12\x04\x91\x01\x04\x0c\n\r\n\
    \x05\x04\n\x02\0\x05\x12\x04\x91\x01\r\x13\n\r\n\x05\x04\n\x02\0\x01\x12\
    \x04\x91\x01\x14\"\n\r\n\x05\x04\n\x02\0\x03\x12\x04\x91\x01%&\n8\n\x04\
    \x04\n\x02\x01\x12\x04\x92\x01\x046\"*\x20(optional)\x20inflation\x20des\
    tination\x20address\n\n\r\n\x05\x04\n\x02\x01\x04\x12\x04\x92\x01\x04\
    \x0c\n\r\n\x05\x04\n\x02\x01\x05\x12\x04\x92\x01\r\x13\n\r\n\x05\x04\n\
    \x02\x01\x01\x12\x04\x92\x01\x141\n\r\n\x05\x04\n\x02\x01\x03\x12\x04\
    \x92\x0145\n\x0c\n\x04\x04\n\x02\x02\x12\x04\x93\x01\x04$\n\r\n\x05\x04\
    \n\x02\x02\x04\x12\x04\x93\x01\x04\x0c\n\r\n\x05\x04\n\x02\x02\x05\x12\
    \x04\x93\x01\r\x13\n\r\n\x05\x04\n\x02\x02\x01\x12\x04\x93\x01\x14\x1f\n\
    \r\n\x05\x04\n\x02\x02\x03\x12\x04\x93\x01\"#\n\x0c\n\x04\x04\n\x02\x03\
    \x12\x04\x94\x01\x04\"\n\r\n\x05\x04\n\x02\x03\x04\x12\x04\x94\x01\x04\
    \x0c\n\r\n\x05\x04\n\x02\x03\x05\x12\x04\x94\x01\r\x13\n\r\n\x05\x04\n\
    \x02\x03\x01\x12\x04\x94\x01\x14\x1d\n\r\n\x05\x04\n\x02\x03\x03\x12\x04\
    \x94\x01\x20!\n\x0c\n\x04\x04\n\x02\x04\x12\x04\x95\x01\x04&\n\r\n\x05\
    \x04\n\x02\x04\x04\x12\x04\x95\x01\x04\x0c\n\r\n\x05\x04\n\x02\x04\x05\
    \x12\x04\x95\x01\r\x13\n\r\n\x05\x04\n\x02\x04\x01\x12\x04\x95\x01\x14!\
    \n\r\n\x05\x04\n\x02\x04\x03\x12\x04\x95\x01$%\n\x0c\n\x04\x04\n\x02\x05\
    \x12\x04\x96\x01\x04&\n\r\n\x05\x04\n\x02\x05\x04\x12\x04\x96\x01\x04\
    \x0c\n\r\n\x05\x04\n\x02\x05\x05\x12\x04\x96\x01\r\x13\n\r\n\x05\x04\n\
    \x02\x05\x01\x12\x04\x96\x01\x14!\n\r\n\x05\x04\n\x02\x05\x03\x12\x04\
    \x96\x01$%\n\x0c\n\x04\x04\n\x02\x06\x12\x04\x97\x01\x04)\n\r\n\x05\x04\
    \n\x02\x06\x04\x12\x04\x97\x01\x04\x0c\n\r\n\x05\x04\n\x02\x06\x05\x12\
    \x04\x97\x01\r\x13\n\r\n\x05\x04\n\x02\x06\x01\x12\x04\x97\x01\x14$\n\r\
    \n\x05\x04\n\x02\x06\x03\x12\x04\x97\x01'(\n\x0c\n\x04\x04\n\x02\x07\x12\
    \x04\x98\x01\x04'\n\r\n\x05\x04\n\x02\x07\x04\x12\x04\x98\x01\x04\x0c\n\
    \r\n\x05\x04\n\x02\x07\x05\x12\x04\x98\x01\r\x13\n\r\n\x05\x04\n\x02\x07\
    \x01\x12\x04\x98\x01\x14\"\n\r\n\x05\x04\n\x02\x07\x03\x12\x04\x98\x01%&\
    \n\x0c\n\x04\x04\n\x02\x08\x12\x04\x99\x01\x04$\n\r\n\x05\x04\n\x02\x08\
    \x04\x12\x04\x99\x01\x04\x0c\n\r\n\x05\x04\n\x02\x08\x05\x12\x04\x99\x01\
    \r\x13\n\r\n\x05\x04\n\x02\x08\x01\x12\x04\x99\x01\x14\x1f\n\r\n\x05\x04\
    \n\x02\x08\x03\x12\x04\x99\x01\"#\n\x0c\n\x04\x04\n\x02\t\x12\x04\x9a\
    \x01\x04%\n\r\n\x05\x04\n\x02\t\x04\x12\x04\x9a\x01\x04\x0c\n\r\n\x05\
    \x04\n\x02\t\x05\x12\x04\x9a\x01\r\x13\n\r\n\x05\x04\n\x02\t\x01\x12\x04\
    \x9a\x01\x14\x1f\n\r\n\x05\x04\n\x02\t\x03\x12\x04\x9a\x01\"$\n\x0c\n\
    \x04\x04\n\x02\n\x12\x04\x9b\x01\x04#\n\r\n\x05\x04\n\x02\n\x04\x12\x04\
    \x9b\x01\x04\x0c\n\r\n\x05\x04\n\x02\n\x05\x12\x04\x9b\x01\r\x12\n\r\n\
    \x05\x04\n\x02\n\x01\x12\x04\x9b\x01\x13\x1d\n\r\n\x05\x04\n\x02\n\x03\
    \x12\x04\x9b\x01\x20\"\n\x0c\n\x04\x04\n\x02\x0b\x12\x04\x9c\x01\x04'\n\
    \r\n\x05\x04\n\x02\x0b\x04\x12\x04\x9c\x01\x04\x0c\n\r\n\x05\x04\n\x02\
    \x0b\x05\x12\x04\x9c\x01\r\x13\n\r\n\x05\x04\n\x02\x0b\x01\x12\x04\x9c\
    \x01\x14!\n\r\n\x05\x04\n\x02\x0b\x03\x12\x04\x9c\x01$&\nu\n\x02\x04\x0b\
    \x12\x06\xa4\x01\0\xa8\x01\x01\x1ag*\n\x20Request:\x20ask\x20device\x20t\
    o\x20confirm\x20this\x20operation\x20type\n\x20@next\x20StellarTxOpReque\
    st\n\x20@next\x20StellarSignedTx\n\n\x0b\n\x03\x04\x0b\x01\x12\x04\xa4\
    \x01\x08\x1c\n1\n\x04\x04\x0b\x02\0\x12\x04\xa5\x01\x04'\"#\x20(optional\
    )\x20source\x20account\x20address\n\n\r\n\x05\x04\x0b\x02\0\x04\x12\x04\
    \xa5\x01\x04\x0c\n\r\n\x05\x04\x0b\x02\0\x05\x12\x04\xa5\x01\r\x13\n\r\n\
    \x05\x04\x0b\x02\0\x01\x12\x04\xa5\x01\x14\"\n\r\n\x05\x04\x0b\x02\0\x03\
    \x12\x04\xa5\x01%&\n\x0c\n\x04\x04\x0b\x02\x01\x12\x04\xa6\x01\x04(\n\r\
    \n\x05\x04\x0b\x02\x01\x04\x12\x04\xa6\x01\x04\x0c\n\r\n\x05\x04\x0b\x02\
    \x01\x06\x12\x04\xa6\x01\r\x1d\n\r\n\x05\x04\x0b\x02\x01\x01\x12\x04\xa6\
    \x01\x1e#\n\r\n\x05\x04\x0b\x02\x01\x03\x12\x04\xa6\x01&'\n\x0c\n\x04\
    \x04\x0b\x02\x02\x12\x04\xa7\x01\x04\x1e\n\r\n\x05\x04\x0b\x02\x02\x04\
    \x12\x04\xa7\x01\x04\x0c\n\r\n\x05\x04\x0b\x02\x02\x05\x12\x04\xa7\x01\r\
    \x13\n\r\n\x05\x04\x0b\x02\x02\x01\x12\x04\xa7\x01\x14\x19\n\r\n\x05\x04\
    \x0b\x02\x02\x03\x12\x04\xa7\x01\x1c\x1d\nu\n\x02\x04\x0c\x12\x06\xaf\
    \x01\0\xb5\x01\x01\x1ag*\n\x20Request:\x20ask\x20device\x20to\x20confirm\
    \x20this\x20operation\x20type\n\x20@next\x20StellarTxOpRequest\n\x20@nex\
    t\x20StellarSignedTx\n\n\x0b\n\x03\x04\x0c\x01\x12\x04\xaf\x01\x08\x1b\n\
    1\n\x04\x04\x0c\x02\0\x12\x04\xb0\x01\x04'\"#\x20(optional)\x20source\
    \x20account\x20address\n\n\r\n\x05\x04\x0c\x02\0\x04\x12\x04\xb0\x01\x04\
    \x0c\n\r\n\x05\x04\x0c\x02\0\x05\x12\x04\xb0\x01\r\x13\n\r\n\x05\x04\x0c\
    \x02\0\x01\x12\x04\xb0\x01\x14\"\n\r\n\x05\x04\x0c\x02\0\x03\x12\x04\xb0\
    \x01%&\n;\n\x04\x04\x0c\x02\x01\x12\x04\xb1\x01\x04(\"-\x20The\x20accoun\
    t\x20being\x20allowed\x20to\x20hold\x20the\x20asset\n\n\r\n\x05\x04\x0c\
    \x02\x01\x04\x12\x04\xb1\x01\x04\x0c\n\r\n\x05\x04\x0c\x02\x01\x05\x12\
    \x04\xb1\x01\r\x13\n\r\n\x05\x04\x0c\x02\x01\x01\x12\x04\xb1\x01\x14#\n\
    \r\n\x05\x04\x0c\x02\x01\x03\x12\x04\xb1\x01&'\n1\n\x04\x04\x0c\x02\x02\
    \x12\x04\xb2\x01\x04#\"#\x201\x20=\x204-character,\x202\x20=\x2012-chara\
    cter\n\n\r\n\x05\x04\x0c\x02\x02\x04\x12\x04\xb2\x01\x04\x0c\n\r\n\x05\
    \x04\x0c\x02\x02\x05\x12\x04\xb2\x01\r\x13\n\r\n\x05\x04\x0c\x02\x02\x01\
    \x12\x04\xb2\x01\x14\x1e\n\r\n\x05\x04\x0c\x02\x02\x03\x12\x04\xb2\x01!\
    \"\n)\n\x04\x04\x0c\x02\x03\x12\x04\xb3\x01\x04#\"\x1b\x20human-readable\
    \x20asset\x20code\n\n\r\n\x05\x04\x0c\x02\x03\x04\x12\x04\xb3\x01\x04\
    \x0c\n\r\n\x05\x04\x0c\x02\x03\x05\x12\x04\xb3\x01\r\x13\n\r\n\x05\x04\
    \x0c\x02\x03\x01\x12\x04\xb3\x01\x14\x1e\n\r\n\x05\x04\x0c\x02\x03\x03\
    \x12\x04\xb3\x01!\"\n\x0c\n\x04\x04\x0c\x02\x04\x12\x04\xb4\x01\x04&\n\r\
    \n\x05\x04\x0c\x02\x04\x04\x12\x04\xb4\x01\x04\x0c\n\r\n\x05\x04\x0c\x02\
    \x04\x05\x12\x04\xb4\x01\r\x13\n\r\n\x05\x04\x0c\x02\x04\x01\x12\x04\xb4\
    \x01\x14!\n\r\n\x05\x04\x0c\x02\x04\x03\x12\x04\xb4\x01$%\nu\n\x02\x04\r\
    \x12\x06\xbc\x01\0\xbf\x01\x01\x1ag*\n\x20Request:\x20ask\x20device\x20t\
    o\x20confirm\x20this\x20operation\x20type\n\x20@next\x20StellarTxOpReque\
    st\n\x20@next\x20StellarSignedTx\n\n\x0b\n\x03\x04\r\x01\x12\x04\xbc\x01\
    \x08\x1d\n1\n\x04\x04\r\x02\0\x12\x04\xbd\x01\x04'\"#\x20(optional)\x20s\
    ource\x20account\x20address\n\n\r\n\x05\x04\r\x02\0\x04\x12\x04\xbd\x01\
    \x04\x0c\n\r\n\x05\x04\r\x02\0\x05\x12\x04\xbd\x01\r\x13\n\r\n\x05\x04\r\
    \x02\0\x01\x12\x04\xbd\x01\x14\"\n\r\n\x05\x04\r\x02\0\x03\x12\x04\xbd\
    \x01%&\n+\n\x04\x04\r\x02\x01\x12\x04\xbe\x01\x04,\"\x1d\x20destination\
    \x20account\x20address\n\n\r\n\x05\x04\r\x02\x01\x04\x12\x04\xbe\x01\x04\
    \x0c\n\r\n\x05\x04\r\x02\x01\x05\x12\x04\xbe\x01\r\x13\n\r\n\x05\x04\r\
    \x02\x01\x01\x12\x04\xbe\x01\x14'\n\r\n\x05\x04\r\x02\x01\x03\x12\x04\
    \xbe\x01*+\nu\n\x02\x04\x0e\x12\x06\xc6\x01\0\xca\x01\x01\x1ag*\n\x20Req\
    uest:\x20ask\x20device\x20to\x20confirm\x20this\x20operation\x20type\n\
    \x20@next\x20StellarTxOpRequest\n\x20@next\x20StellarSignedTx\n\n\x0b\n\
    \x03\x04\x0e\x01\x12\x04\xc6\x01\x08\x1b\n1\n\x04\x04\x0e\x02\0\x12\x04\
    \xc7\x01\x04'\"#\x20(optional)\x20source\x20account\x20address\n\n\r\n\
    \x05\x04\x0e\x02\0\x04\x12\x04\xc7\x01\x04\x0c\n\r\n\x05\x04\x0e\x02\0\
    \x05\x12\x04\xc7\x01\r\x13\n\r\n\x05\x04\x0e\x02\0\x01\x12\x04\xc7\x01\
    \x14\"\n\r\n\x05\x04\x0e\x02\0\x03\x12\x04\xc7\x01%&\n\x0c\n\x04\x04\x0e\
    \x02\x01\x12\x04\xc8\x01\x04\x1c\n\r\n\x05\x04\x0e\x02\x01\x04\x12\x04\
    \xc8\x01\x04\x0c\n\r\n\x05\x04\x0e\x02\x01\x05\x12\x04\xc8\x01\r\x13\n\r\
    \n\x05\x04\x0e\x02\x01\x01\x12\x04\xc8\x01\x14\x17\n\r\n\x05\x04\x0e\x02\
    \x01\x03\x12\x04\xc8\x01\x1a\x1b\n*\n\x04\x04\x0e\x02\x02\x12\x04\xc9\
    \x01\x04\x1d\"\x1c\x2064\x20bytes\x20of\x20arbitrary\x20data\n\n\r\n\x05\
    \x04\x0e\x02\x02\x04\x12\x04\xc9\x01\x04\x0c\n\r\n\x05\x04\x0e\x02\x02\
    \x05\x12\x04\xc9\x01\r\x12\n\r\n\x05\x04\x0e\x02\x02\x01\x12\x04\xc9\x01\
    \x13\x18\n\r\n\x05\x04\x0e\x02\x02\x03\x12\x04\xc9\x01\x1b\x1c\nu\n\x02\
    \x04\x0f\x12\x06\xd1\x01\0\xd4\x01\x01\x1ag*\n\x20Request:\x20ask\x20dev\
    ice\x20to\x20confirm\x20this\x20operation\x20type\n\x20@next\x20StellarT\
    xOpRequest\n\x20@next\x20StellarSignedTx\n\n\x0b\n\x03\x04\x0f\x01\x12\
    \x04\xd1\x01\x08\x1d\n1\n\x04\x04\x0f\x02\0\x12\x04\xd2\x01\x04'\"#\x20(\
    optional)\x20source\x20account\x20address\n\n\r\n\x05\x04\x0f\x02\0\x04\
    \x12\x04\xd2\x01\x04\x0c\n\r\n\x05\x04\x0f\x02\0\x05\x12\x04\xd2\x01\r\
    \x13\n\r\n\x05\x04\x0f\x02\0\x01\x12\x04\xd2\x01\x14\"\n\r\n\x05\x04\x0f\
    \x02\0\x03\x12\x04\xd2\x01%&\n#\n\x04\x04\x0f\x02\x01\x12\x04\xd3\x01\
    \x04\x20\"\x15\x20new\x20sequence\x20number\n\n\r\n\x05\x04\x0f\x02\x01\
    \x04\x12\x04\xd3\x01\x04\x0c\n\r\n\x05\x04\x0f\x02\x01\x05\x12\x04\xd3\
    \x01\r\x13\n\r\n\x05\x04\x0f\x02\x01\x01\x12\x04\xd3\x01\x14\x1b\n\r\n\
    \x05\x04\x0f\x02\x01\x03\x12\x04\xd3\x01\x1e\x1f\n;\n\x02\x04\x10\x12\
    \x06\xda\x01\0\xdd\x01\x01\x1a-*\n\x20Response:\x20signature\x20for\x20t\
    ransaction\n\x20@end\n\n\x0b\n\x03\x04\x10\x01\x12\x04\xda\x01\x08\x17\n\
    @\n\x04\x04\x10\x02\0\x12\x04\xdb\x01\x04\"\"2\x20public\x20key\x20for\
    \x20the\x20private\x20key\x20used\x20to\x20sign\x20data\n\n\r\n\x05\x04\
    \x10\x02\0\x04\x12\x04\xdb\x01\x04\x0c\n\r\n\x05\x04\x10\x02\0\x05\x12\
    \x04\xdb\x01\r\x12\n\r\n\x05\x04\x10\x02\0\x01\x12\x04\xdb\x01\x13\x1d\n\
    \r\n\x05\x04\x10\x02\0\x03\x12\x04\xdb\x01\x20!\nE\n\x04\x04\x10\x02\x01\
    \x12\x04\xdc\x01\x04!\"7\x20signature\x20suitable\x20for\x20sending\x20t\
    o\x20the\x20Stellar\x20network\n\n\r\n\x05\x04\x10\x02\x01\x04\x12\x04\
    \xdc\x01\x04\x0c\n\r\n\x05\x04\x10\x02\x01\x05\x12\x04\xdc\x01\r\x12\n\r\
    \n\x05\x04\x10\x02\x01\x01\x12\x04\xdc\x01\x13\x1c\n\r\n\x05\x04\x10\x02\
    \x01\x03\x12\x04\xdc\x01\x1f\x20\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(17);
            messages.push(StellarAssetType::generated_message_descriptor_data());
            messages.push(StellarGetAddress::generated_message_descriptor_data());
            messages.push(StellarAddress::generated_message_descriptor_data());
            messages.push(StellarSignTx::generated_message_descriptor_data());
            messages.push(StellarTxOpRequest::generated_message_descriptor_data());
            messages.push(StellarPaymentOp::generated_message_descriptor_data());
            messages.push(StellarCreateAccountOp::generated_message_descriptor_data());
            messages.push(StellarPathPaymentOp::generated_message_descriptor_data());
            messages.push(StellarManageOfferOp::generated_message_descriptor_data());
            messages.push(StellarCreatePassiveOfferOp::generated_message_descriptor_data());
            messages.push(StellarSetOptionsOp::generated_message_descriptor_data());
            messages.push(StellarChangeTrustOp::generated_message_descriptor_data());
            messages.push(StellarAllowTrustOp::generated_message_descriptor_data());
            messages.push(StellarAccountMergeOp::generated_message_descriptor_data());
            messages.push(StellarManageDataOp::generated_message_descriptor_data());
            messages.push(StellarBumpSequenceOp::generated_message_descriptor_data());
            messages.push(StellarSignedTx::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
