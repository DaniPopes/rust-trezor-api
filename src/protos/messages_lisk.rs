// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `messages-lisk.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

/// *
///  Request: Ask device for Lisk address corresponding to address_n path
///  @start
///  @next LiskAddress
///  @next Failure
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.lisk.LiskGetAddress)
pub struct LiskGetAddress {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskGetAddress.address_n)
    pub address_n: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskGetAddress.show_display)
    pub show_display: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.lisk.LiskGetAddress.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LiskGetAddress {
    fn default() -> &'a LiskGetAddress {
        <LiskGetAddress as ::protobuf::Message>::default_instance()
    }
}

impl LiskGetAddress {
    pub fn new() -> LiskGetAddress {
        ::std::default::Default::default()
    }

    // optional bool show_display = 2;

    pub fn show_display(&self) -> bool {
        self.show_display.unwrap_or(false)
    }

    pub fn clear_show_display(&mut self) {
        self.show_display = ::std::option::Option::None;
    }

    pub fn has_show_display(&self) -> bool {
        self.show_display.is_some()
    }

    // Param is passed by value, moved
    pub fn set_show_display(&mut self, v: bool) {
        self.show_display = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "address_n",
            |m: &LiskGetAddress| { &m.address_n },
            |m: &mut LiskGetAddress| { &mut m.address_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "show_display",
            |m: &LiskGetAddress| { &m.show_display },
            |m: &mut LiskGetAddress| { &mut m.show_display },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LiskGetAddress>(
            "LiskGetAddress",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LiskGetAddress {
    const NAME: &'static str = "LiskGetAddress";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                },
                8 => {
                    self.address_n.push(is.read_uint32()?);
                },
                16 => {
                    self.show_display = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.show_display {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.show_display {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LiskGetAddress {
        LiskGetAddress::new()
    }

    fn clear(&mut self) {
        self.address_n.clear();
        self.show_display = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LiskGetAddress {
        static instance: LiskGetAddress = LiskGetAddress {
            address_n: ::std::vec::Vec::new(),
            show_display: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LiskGetAddress {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LiskGetAddress").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LiskGetAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LiskGetAddress {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Response: Contains Lisk address derived from device private seed
///  @end
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.lisk.LiskAddress)
pub struct LiskAddress {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskAddress.address)
    pub address: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.lisk.LiskAddress.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LiskAddress {
    fn default() -> &'a LiskAddress {
        <LiskAddress as ::protobuf::Message>::default_instance()
    }
}

impl LiskAddress {
    pub fn new() -> LiskAddress {
        ::std::default::Default::default()
    }

    // optional string address = 1;

    pub fn address(&self) -> &str {
        match self.address.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_address(&mut self) {
        self.address = ::std::option::Option::None;
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        if self.address.is_none() {
            self.address = ::std::option::Option::Some(::std::string::String::new());
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        self.address.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "address",
            |m: &LiskAddress| { &m.address },
            |m: &mut LiskAddress| { &mut m.address },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LiskAddress>(
            "LiskAddress",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LiskAddress {
    const NAME: &'static str = "LiskAddress";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.address = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.address.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.address.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LiskAddress {
        LiskAddress::new()
    }

    fn clear(&mut self) {
        self.address = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LiskAddress {
        static instance: LiskAddress = LiskAddress {
            address: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LiskAddress {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LiskAddress").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LiskAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LiskAddress {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: Ask device for Lisk public key corresponding to address_n path
///  @start
///  @next LiskPublicKey
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.lisk.LiskGetPublicKey)
pub struct LiskGetPublicKey {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskGetPublicKey.address_n)
    pub address_n: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskGetPublicKey.show_display)
    pub show_display: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.lisk.LiskGetPublicKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LiskGetPublicKey {
    fn default() -> &'a LiskGetPublicKey {
        <LiskGetPublicKey as ::protobuf::Message>::default_instance()
    }
}

impl LiskGetPublicKey {
    pub fn new() -> LiskGetPublicKey {
        ::std::default::Default::default()
    }

    // optional bool show_display = 2;

    pub fn show_display(&self) -> bool {
        self.show_display.unwrap_or(false)
    }

    pub fn clear_show_display(&mut self) {
        self.show_display = ::std::option::Option::None;
    }

    pub fn has_show_display(&self) -> bool {
        self.show_display.is_some()
    }

    // Param is passed by value, moved
    pub fn set_show_display(&mut self, v: bool) {
        self.show_display = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "address_n",
            |m: &LiskGetPublicKey| { &m.address_n },
            |m: &mut LiskGetPublicKey| { &mut m.address_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "show_display",
            |m: &LiskGetPublicKey| { &m.show_display },
            |m: &mut LiskGetPublicKey| { &mut m.show_display },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LiskGetPublicKey>(
            "LiskGetPublicKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LiskGetPublicKey {
    const NAME: &'static str = "LiskGetPublicKey";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                },
                8 => {
                    self.address_n.push(is.read_uint32()?);
                },
                16 => {
                    self.show_display = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.show_display {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.show_display {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LiskGetPublicKey {
        LiskGetPublicKey::new()
    }

    fn clear(&mut self) {
        self.address_n.clear();
        self.show_display = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LiskGetPublicKey {
        static instance: LiskGetPublicKey = LiskGetPublicKey {
            address_n: ::std::vec::Vec::new(),
            show_display: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LiskGetPublicKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LiskGetPublicKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LiskGetPublicKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LiskGetPublicKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Response: Contains Lisk public key derived from device private seed
///  @end
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.lisk.LiskPublicKey)
pub struct LiskPublicKey {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskPublicKey.public_key)
    pub public_key: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.lisk.LiskPublicKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LiskPublicKey {
    fn default() -> &'a LiskPublicKey {
        <LiskPublicKey as ::protobuf::Message>::default_instance()
    }
}

impl LiskPublicKey {
    pub fn new() -> LiskPublicKey {
        ::std::default::Default::default()
    }

    // optional bytes public_key = 1;

    pub fn public_key(&self) -> &[u8] {
        match self.public_key.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_public_key(&mut self) {
        self.public_key = ::std::option::Option::None;
    }

    pub fn has_public_key(&self) -> bool {
        self.public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.public_key.is_none() {
            self.public_key = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
        self.public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "public_key",
            |m: &LiskPublicKey| { &m.public_key },
            |m: &mut LiskPublicKey| { &mut m.public_key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LiskPublicKey>(
            "LiskPublicKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LiskPublicKey {
    const NAME: &'static str = "LiskPublicKey";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.public_key = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.public_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.public_key.as_ref() {
            os.write_bytes(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LiskPublicKey {
        LiskPublicKey::new()
    }

    fn clear(&mut self) {
        self.public_key = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LiskPublicKey {
        static instance: LiskPublicKey = LiskPublicKey {
            public_key: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LiskPublicKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LiskPublicKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LiskPublicKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LiskPublicKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: Ask device to sign Lisk transaction
///  @start
///  @next LiskSignedTx
///  @next Failure
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.lisk.LiskSignTx)
pub struct LiskSignTx {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskSignTx.address_n)
    pub address_n: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskSignTx.transaction)
    pub transaction: ::protobuf::MessageField<lisk_sign_tx::LiskTransactionCommon>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.lisk.LiskSignTx.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LiskSignTx {
    fn default() -> &'a LiskSignTx {
        <LiskSignTx as ::protobuf::Message>::default_instance()
    }
}

impl LiskSignTx {
    pub fn new() -> LiskSignTx {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "address_n",
            |m: &LiskSignTx| { &m.address_n },
            |m: &mut LiskSignTx| { &mut m.address_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, lisk_sign_tx::LiskTransactionCommon>(
            "transaction",
            |m: &LiskSignTx| { &m.transaction },
            |m: &mut LiskSignTx| { &mut m.transaction },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LiskSignTx>(
            "LiskSignTx",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LiskSignTx {
    const NAME: &'static str = "LiskSignTx";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                },
                8 => {
                    self.address_n.push(is.read_uint32()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.transaction)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.transaction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.transaction.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LiskSignTx {
        LiskSignTx::new()
    }

    fn clear(&mut self) {
        self.address_n.clear();
        self.transaction.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LiskSignTx {
        static instance: LiskSignTx = LiskSignTx {
            address_n: ::std::vec::Vec::new(),
            transaction: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LiskSignTx {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LiskSignTx").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LiskSignTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LiskSignTx {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `LiskSignTx`
pub mod lisk_sign_tx {
    /// *
    ///  Structure representing the common part for Lisk transactions
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon)
    pub struct LiskTransactionCommon {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.type)
        pub type_: ::std::option::Option<::protobuf::EnumOrUnknown<lisk_transaction_common::LiskTransactionType>>,
        // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.amount)
        pub amount: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.fee)
        pub fee: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.recipient_id)
        pub recipient_id: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.sender_public_key)
        pub sender_public_key: ::std::option::Option<::std::vec::Vec<u8>>,
        // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.requester_public_key)
        pub requester_public_key: ::std::option::Option<::std::vec::Vec<u8>>,
        // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.signature)
        pub signature: ::std::option::Option<::std::vec::Vec<u8>>,
        // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.timestamp)
        pub timestamp: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.asset)
        pub asset: ::protobuf::MessageField<lisk_transaction_common::LiskTransactionAsset>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a LiskTransactionCommon {
        fn default() -> &'a LiskTransactionCommon {
            <LiskTransactionCommon as ::protobuf::Message>::default_instance()
        }
    }

    impl LiskTransactionCommon {
        pub fn new() -> LiskTransactionCommon {
            ::std::default::Default::default()
        }

        // optional .hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionType type = 1;

        pub fn type_(&self) -> lisk_transaction_common::LiskTransactionType {
            match self.type_ {
                Some(e) => e.enum_value_or(lisk_transaction_common::LiskTransactionType::Transfer),
                None => lisk_transaction_common::LiskTransactionType::Transfer,
            }
        }

        pub fn clear_type_(&mut self) {
            self.type_ = ::std::option::Option::None;
        }

        pub fn has_type(&self) -> bool {
            self.type_.is_some()
        }

        // Param is passed by value, moved
        pub fn set_type(&mut self, v: lisk_transaction_common::LiskTransactionType) {
            self.type_ = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
        }

        // optional uint64 amount = 2;

        pub fn amount(&self) -> u64 {
            self.amount.unwrap_or(0u64)
        }

        pub fn clear_amount(&mut self) {
            self.amount = ::std::option::Option::None;
        }

        pub fn has_amount(&self) -> bool {
            self.amount.is_some()
        }

        // Param is passed by value, moved
        pub fn set_amount(&mut self, v: u64) {
            self.amount = ::std::option::Option::Some(v);
        }

        // optional uint64 fee = 3;

        pub fn fee(&self) -> u64 {
            self.fee.unwrap_or(0)
        }

        pub fn clear_fee(&mut self) {
            self.fee = ::std::option::Option::None;
        }

        pub fn has_fee(&self) -> bool {
            self.fee.is_some()
        }

        // Param is passed by value, moved
        pub fn set_fee(&mut self, v: u64) {
            self.fee = ::std::option::Option::Some(v);
        }

        // optional string recipient_id = 4;

        pub fn recipient_id(&self) -> &str {
            match self.recipient_id.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_recipient_id(&mut self) {
            self.recipient_id = ::std::option::Option::None;
        }

        pub fn has_recipient_id(&self) -> bool {
            self.recipient_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_recipient_id(&mut self, v: ::std::string::String) {
            self.recipient_id = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_recipient_id(&mut self) -> &mut ::std::string::String {
            if self.recipient_id.is_none() {
                self.recipient_id = ::std::option::Option::Some(::std::string::String::new());
            }
            self.recipient_id.as_mut().unwrap()
        }

        // Take field
        pub fn take_recipient_id(&mut self) -> ::std::string::String {
            self.recipient_id.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bytes sender_public_key = 5;

        pub fn sender_public_key(&self) -> &[u8] {
            match self.sender_public_key.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_sender_public_key(&mut self) {
            self.sender_public_key = ::std::option::Option::None;
        }

        pub fn has_sender_public_key(&self) -> bool {
            self.sender_public_key.is_some()
        }

        // Param is passed by value, moved
        pub fn set_sender_public_key(&mut self, v: ::std::vec::Vec<u8>) {
            self.sender_public_key = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_sender_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.sender_public_key.is_none() {
                self.sender_public_key = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.sender_public_key.as_mut().unwrap()
        }

        // Take field
        pub fn take_sender_public_key(&mut self) -> ::std::vec::Vec<u8> {
            self.sender_public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        // optional bytes requester_public_key = 6;

        pub fn requester_public_key(&self) -> &[u8] {
            match self.requester_public_key.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_requester_public_key(&mut self) {
            self.requester_public_key = ::std::option::Option::None;
        }

        pub fn has_requester_public_key(&self) -> bool {
            self.requester_public_key.is_some()
        }

        // Param is passed by value, moved
        pub fn set_requester_public_key(&mut self, v: ::std::vec::Vec<u8>) {
            self.requester_public_key = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_requester_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.requester_public_key.is_none() {
                self.requester_public_key = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.requester_public_key.as_mut().unwrap()
        }

        // Take field
        pub fn take_requester_public_key(&mut self) -> ::std::vec::Vec<u8> {
            self.requester_public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        // optional bytes signature = 7;

        pub fn signature(&self) -> &[u8] {
            match self.signature.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_signature(&mut self) {
            self.signature = ::std::option::Option::None;
        }

        pub fn has_signature(&self) -> bool {
            self.signature.is_some()
        }

        // Param is passed by value, moved
        pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
            self.signature = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.signature.is_none() {
                self.signature = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.signature.as_mut().unwrap()
        }

        // Take field
        pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
            self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        // optional uint32 timestamp = 8;

        pub fn timestamp(&self) -> u32 {
            self.timestamp.unwrap_or(0)
        }

        pub fn clear_timestamp(&mut self) {
            self.timestamp = ::std::option::Option::None;
        }

        pub fn has_timestamp(&self) -> bool {
            self.timestamp.is_some()
        }

        // Param is passed by value, moved
        pub fn set_timestamp(&mut self, v: u32) {
            self.timestamp = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(9);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "type",
                |m: &LiskTransactionCommon| { &m.type_ },
                |m: &mut LiskTransactionCommon| { &mut m.type_ },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "amount",
                |m: &LiskTransactionCommon| { &m.amount },
                |m: &mut LiskTransactionCommon| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "fee",
                |m: &LiskTransactionCommon| { &m.fee },
                |m: &mut LiskTransactionCommon| { &mut m.fee },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "recipient_id",
                |m: &LiskTransactionCommon| { &m.recipient_id },
                |m: &mut LiskTransactionCommon| { &mut m.recipient_id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "sender_public_key",
                |m: &LiskTransactionCommon| { &m.sender_public_key },
                |m: &mut LiskTransactionCommon| { &mut m.sender_public_key },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "requester_public_key",
                |m: &LiskTransactionCommon| { &m.requester_public_key },
                |m: &mut LiskTransactionCommon| { &mut m.requester_public_key },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "signature",
                |m: &LiskTransactionCommon| { &m.signature },
                |m: &mut LiskTransactionCommon| { &mut m.signature },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "timestamp",
                |m: &LiskTransactionCommon| { &m.timestamp },
                |m: &mut LiskTransactionCommon| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, lisk_transaction_common::LiskTransactionAsset>(
                "asset",
                |m: &LiskTransactionCommon| { &m.asset },
                |m: &mut LiskTransactionCommon| { &mut m.asset },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LiskTransactionCommon>(
                "LiskSignTx.LiskTransactionCommon",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for LiskTransactionCommon {
        const NAME: &'static str = "LiskTransactionCommon";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.type_ = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                    },
                    16 => {
                        self.amount = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    24 => {
                        self.fee = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    34 => {
                        self.recipient_id = ::std::option::Option::Some(is.read_string()?);
                    },
                    42 => {
                        self.sender_public_key = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    50 => {
                        self.requester_public_key = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    58 => {
                        self.signature = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    64 => {
                        self.timestamp = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    74 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.asset)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.type_ {
                my_size += ::protobuf::rt::int32_size(1, v.value());
            }
            if let Some(v) = self.amount {
                my_size += ::protobuf::rt::uint64_size(2, v);
            }
            if let Some(v) = self.fee {
                my_size += ::protobuf::rt::uint64_size(3, v);
            }
            if let Some(v) = self.recipient_id.as_ref() {
                my_size += ::protobuf::rt::string_size(4, &v);
            }
            if let Some(v) = self.sender_public_key.as_ref() {
                my_size += ::protobuf::rt::bytes_size(5, &v);
            }
            if let Some(v) = self.requester_public_key.as_ref() {
                my_size += ::protobuf::rt::bytes_size(6, &v);
            }
            if let Some(v) = self.signature.as_ref() {
                my_size += ::protobuf::rt::bytes_size(7, &v);
            }
            if let Some(v) = self.timestamp {
                my_size += ::protobuf::rt::uint32_size(8, v);
            }
            if let Some(v) = self.asset.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.type_ {
                os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
            }
            if let Some(v) = self.amount {
                os.write_uint64(2, v)?;
            }
            if let Some(v) = self.fee {
                os.write_uint64(3, v)?;
            }
            if let Some(v) = self.recipient_id.as_ref() {
                os.write_string(4, v)?;
            }
            if let Some(v) = self.sender_public_key.as_ref() {
                os.write_bytes(5, v)?;
            }
            if let Some(v) = self.requester_public_key.as_ref() {
                os.write_bytes(6, v)?;
            }
            if let Some(v) = self.signature.as_ref() {
                os.write_bytes(7, v)?;
            }
            if let Some(v) = self.timestamp {
                os.write_uint32(8, v)?;
            }
            if let Some(v) = self.asset.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> LiskTransactionCommon {
            LiskTransactionCommon::new()
        }

        fn clear(&mut self) {
            self.type_ = ::std::option::Option::None;
            self.amount = ::std::option::Option::None;
            self.fee = ::std::option::Option::None;
            self.recipient_id = ::std::option::Option::None;
            self.sender_public_key = ::std::option::Option::None;
            self.requester_public_key = ::std::option::Option::None;
            self.signature = ::std::option::Option::None;
            self.timestamp = ::std::option::Option::None;
            self.asset.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static LiskTransactionCommon {
            static instance: LiskTransactionCommon = LiskTransactionCommon {
                type_: ::std::option::Option::None,
                amount: ::std::option::Option::None,
                fee: ::std::option::Option::None,
                recipient_id: ::std::option::Option::None,
                sender_public_key: ::std::option::Option::None,
                requester_public_key: ::std::option::Option::None,
                signature: ::std::option::Option::None,
                timestamp: ::std::option::Option::None,
                asset: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for LiskTransactionCommon {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("LiskSignTx.LiskTransactionCommon").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for LiskTransactionCommon {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for LiskTransactionCommon {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `LiskTransactionCommon`
    pub mod lisk_transaction_common {
        /// *
        ///  Structure representing the asset field in the Lisk transaction
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset)
        pub struct LiskTransactionAsset {
            // message fields
            // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.signature)
            pub signature: ::protobuf::MessageField<lisk_transaction_asset::LiskSignatureType>,
            // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.delegate)
            pub delegate: ::protobuf::MessageField<lisk_transaction_asset::LiskDelegateType>,
            // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.votes)
            pub votes: ::std::vec::Vec<::std::string::String>,
            // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.multisignature)
            pub multisignature: ::protobuf::MessageField<lisk_transaction_asset::LiskMultisignatureType>,
            // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.data)
            pub data: ::std::option::Option<::std::string::String>,
            // special fields
            // @@protoc_insertion_point(special_field:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a LiskTransactionAsset {
            fn default() -> &'a LiskTransactionAsset {
                <LiskTransactionAsset as ::protobuf::Message>::default_instance()
            }
        }

        impl LiskTransactionAsset {
            pub fn new() -> LiskTransactionAsset {
                ::std::default::Default::default()
            }

            // optional string data = 5;

            pub fn data(&self) -> &str {
                match self.data.as_ref() {
                    Some(v) => v,
                    None => "",
                }
            }

            pub fn clear_data(&mut self) {
                self.data = ::std::option::Option::None;
            }

            pub fn has_data(&self) -> bool {
                self.data.is_some()
            }

            // Param is passed by value, moved
            pub fn set_data(&mut self, v: ::std::string::String) {
                self.data = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_data(&mut self) -> &mut ::std::string::String {
                if self.data.is_none() {
                    self.data = ::std::option::Option::Some(::std::string::String::new());
                }
                self.data.as_mut().unwrap()
            }

            // Take field
            pub fn take_data(&mut self) -> ::std::string::String {
                self.data.take().unwrap_or_else(|| ::std::string::String::new())
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(5);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, lisk_transaction_asset::LiskSignatureType>(
                    "signature",
                    |m: &LiskTransactionAsset| { &m.signature },
                    |m: &mut LiskTransactionAsset| { &mut m.signature },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, lisk_transaction_asset::LiskDelegateType>(
                    "delegate",
                    |m: &LiskTransactionAsset| { &m.delegate },
                    |m: &mut LiskTransactionAsset| { &mut m.delegate },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                    "votes",
                    |m: &LiskTransactionAsset| { &m.votes },
                    |m: &mut LiskTransactionAsset| { &mut m.votes },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, lisk_transaction_asset::LiskMultisignatureType>(
                    "multisignature",
                    |m: &LiskTransactionAsset| { &m.multisignature },
                    |m: &mut LiskTransactionAsset| { &mut m.multisignature },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "data",
                    |m: &LiskTransactionAsset| { &m.data },
                    |m: &mut LiskTransactionAsset| { &mut m.data },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LiskTransactionAsset>(
                    "LiskSignTx.LiskTransactionCommon.LiskTransactionAsset",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for LiskTransactionAsset {
            const NAME: &'static str = "LiskTransactionAsset";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            ::protobuf::rt::read_singular_message_into_field(is, &mut self.signature)?;
                        },
                        18 => {
                            ::protobuf::rt::read_singular_message_into_field(is, &mut self.delegate)?;
                        },
                        26 => {
                            self.votes.push(is.read_string()?);
                        },
                        34 => {
                            ::protobuf::rt::read_singular_message_into_field(is, &mut self.multisignature)?;
                        },
                        42 => {
                            self.data = ::std::option::Option::Some(is.read_string()?);
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.signature.as_ref() {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                }
                if let Some(v) = self.delegate.as_ref() {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                }
                for value in &self.votes {
                    my_size += ::protobuf::rt::string_size(3, &value);
                };
                if let Some(v) = self.multisignature.as_ref() {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                }
                if let Some(v) = self.data.as_ref() {
                    my_size += ::protobuf::rt::string_size(5, &v);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.signature.as_ref() {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                }
                if let Some(v) = self.delegate.as_ref() {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                }
                for v in &self.votes {
                    os.write_string(3, &v)?;
                };
                if let Some(v) = self.multisignature.as_ref() {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                }
                if let Some(v) = self.data.as_ref() {
                    os.write_string(5, v)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> LiskTransactionAsset {
                LiskTransactionAsset::new()
            }

            fn clear(&mut self) {
                self.signature.clear();
                self.delegate.clear();
                self.votes.clear();
                self.multisignature.clear();
                self.data = ::std::option::Option::None;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static LiskTransactionAsset {
                static instance: LiskTransactionAsset = LiskTransactionAsset {
                    signature: ::protobuf::MessageField::none(),
                    delegate: ::protobuf::MessageField::none(),
                    votes: ::std::vec::Vec::new(),
                    multisignature: ::protobuf::MessageField::none(),
                    data: ::std::option::Option::None,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for LiskTransactionAsset {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("LiskSignTx.LiskTransactionCommon.LiskTransactionAsset").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for LiskTransactionAsset {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for LiskTransactionAsset {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        /// Nested message and enums of message `LiskTransactionAsset`
        pub mod lisk_transaction_asset {
            /// *
            ///  Structure representing the signature field in the Lisk transaction asset field
            #[derive(PartialEq,Clone,Default,Debug)]
            // @@protoc_insertion_point(message:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType)
            pub struct LiskSignatureType {
                // message fields
                // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType.public_key)
                pub public_key: ::std::option::Option<::std::vec::Vec<u8>>,
                // special fields
                // @@protoc_insertion_point(special_field:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType.special_fields)
                pub special_fields: ::protobuf::SpecialFields,
            }

            impl<'a> ::std::default::Default for &'a LiskSignatureType {
                fn default() -> &'a LiskSignatureType {
                    <LiskSignatureType as ::protobuf::Message>::default_instance()
                }
            }

            impl LiskSignatureType {
                pub fn new() -> LiskSignatureType {
                    ::std::default::Default::default()
                }

                // optional bytes public_key = 1;

                pub fn public_key(&self) -> &[u8] {
                    match self.public_key.as_ref() {
                        Some(v) => v,
                        None => &[],
                    }
                }

                pub fn clear_public_key(&mut self) {
                    self.public_key = ::std::option::Option::None;
                }

                pub fn has_public_key(&self) -> bool {
                    self.public_key.is_some()
                }

                // Param is passed by value, moved
                pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
                    self.public_key = ::std::option::Option::Some(v);
                }

                // Mutable pointer to the field.
                // If field is not initialized, it is initialized with default value first.
                pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
                    if self.public_key.is_none() {
                        self.public_key = ::std::option::Option::Some(::std::vec::Vec::new());
                    }
                    self.public_key.as_mut().unwrap()
                }

                // Take field
                pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
                    self.public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
                }

                pub(in super::super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                    let mut fields = ::std::vec::Vec::with_capacity(1);
                    let mut oneofs = ::std::vec::Vec::with_capacity(0);
                    fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                        "public_key",
                        |m: &LiskSignatureType| { &m.public_key },
                        |m: &mut LiskSignatureType| { &mut m.public_key },
                    ));
                    ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LiskSignatureType>(
                        "LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType",
                        fields,
                        oneofs,
                    )
                }
            }

            impl ::protobuf::Message for LiskSignatureType {
                const NAME: &'static str = "LiskSignatureType";

                fn is_initialized(&self) -> bool {
                    true
                }

                fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => {
                                self.public_key = ::std::option::Option::Some(is.read_bytes()?);
                            },
                            tag => {
                                ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                            },
                        };
                    }
                    ::std::result::Result::Ok(())
                }

                // Compute sizes of nested messages
                #[allow(unused_variables)]
                fn compute_size(&self) -> u64 {
                    let mut my_size = 0;
                    if let Some(v) = self.public_key.as_ref() {
                        my_size += ::protobuf::rt::bytes_size(1, &v);
                    }
                    my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                    self.special_fields.cached_size().set(my_size as u32);
                    my_size
                }

                fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                    if let Some(v) = self.public_key.as_ref() {
                        os.write_bytes(1, v)?;
                    }
                    os.write_unknown_fields(self.special_fields.unknown_fields())?;
                    ::std::result::Result::Ok(())
                }

                fn special_fields(&self) -> &::protobuf::SpecialFields {
                    &self.special_fields
                }

                fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                    &mut self.special_fields
                }

                fn new() -> LiskSignatureType {
                    LiskSignatureType::new()
                }

                fn clear(&mut self) {
                    self.public_key = ::std::option::Option::None;
                    self.special_fields.clear();
                }

                fn default_instance() -> &'static LiskSignatureType {
                    static instance: LiskSignatureType = LiskSignatureType {
                        public_key: ::std::option::Option::None,
                        special_fields: ::protobuf::SpecialFields::new(),
                    };
                    &instance
                }
            }

            impl ::protobuf::MessageFull for LiskSignatureType {
                fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                    static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                    descriptor.get(|| super::super::super::file_descriptor().message_by_package_relative_name("LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskSignatureType").unwrap()).clone()
                }
            }

            impl ::std::fmt::Display for LiskSignatureType {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    ::protobuf::text_format::fmt(self, f)
                }
            }

            impl ::protobuf::reflect::ProtobufValue for LiskSignatureType {
                type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
            }

            /// *
            ///  Structure representing the delegate field in the Lisk transaction asset field
            #[derive(PartialEq,Clone,Default,Debug)]
            // @@protoc_insertion_point(message:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType)
            pub struct LiskDelegateType {
                // message fields
                // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType.username)
                pub username: ::std::option::Option<::std::string::String>,
                // special fields
                // @@protoc_insertion_point(special_field:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType.special_fields)
                pub special_fields: ::protobuf::SpecialFields,
            }

            impl<'a> ::std::default::Default for &'a LiskDelegateType {
                fn default() -> &'a LiskDelegateType {
                    <LiskDelegateType as ::protobuf::Message>::default_instance()
                }
            }

            impl LiskDelegateType {
                pub fn new() -> LiskDelegateType {
                    ::std::default::Default::default()
                }

                // optional string username = 1;

                pub fn username(&self) -> &str {
                    match self.username.as_ref() {
                        Some(v) => v,
                        None => "",
                    }
                }

                pub fn clear_username(&mut self) {
                    self.username = ::std::option::Option::None;
                }

                pub fn has_username(&self) -> bool {
                    self.username.is_some()
                }

                // Param is passed by value, moved
                pub fn set_username(&mut self, v: ::std::string::String) {
                    self.username = ::std::option::Option::Some(v);
                }

                // Mutable pointer to the field.
                // If field is not initialized, it is initialized with default value first.
                pub fn mut_username(&mut self) -> &mut ::std::string::String {
                    if self.username.is_none() {
                        self.username = ::std::option::Option::Some(::std::string::String::new());
                    }
                    self.username.as_mut().unwrap()
                }

                // Take field
                pub fn take_username(&mut self) -> ::std::string::String {
                    self.username.take().unwrap_or_else(|| ::std::string::String::new())
                }

                pub(in super::super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                    let mut fields = ::std::vec::Vec::with_capacity(1);
                    let mut oneofs = ::std::vec::Vec::with_capacity(0);
                    fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                        "username",
                        |m: &LiskDelegateType| { &m.username },
                        |m: &mut LiskDelegateType| { &mut m.username },
                    ));
                    ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LiskDelegateType>(
                        "LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType",
                        fields,
                        oneofs,
                    )
                }
            }

            impl ::protobuf::Message for LiskDelegateType {
                const NAME: &'static str = "LiskDelegateType";

                fn is_initialized(&self) -> bool {
                    true
                }

                fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => {
                                self.username = ::std::option::Option::Some(is.read_string()?);
                            },
                            tag => {
                                ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                            },
                        };
                    }
                    ::std::result::Result::Ok(())
                }

                // Compute sizes of nested messages
                #[allow(unused_variables)]
                fn compute_size(&self) -> u64 {
                    let mut my_size = 0;
                    if let Some(v) = self.username.as_ref() {
                        my_size += ::protobuf::rt::string_size(1, &v);
                    }
                    my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                    self.special_fields.cached_size().set(my_size as u32);
                    my_size
                }

                fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                    if let Some(v) = self.username.as_ref() {
                        os.write_string(1, v)?;
                    }
                    os.write_unknown_fields(self.special_fields.unknown_fields())?;
                    ::std::result::Result::Ok(())
                }

                fn special_fields(&self) -> &::protobuf::SpecialFields {
                    &self.special_fields
                }

                fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                    &mut self.special_fields
                }

                fn new() -> LiskDelegateType {
                    LiskDelegateType::new()
                }

                fn clear(&mut self) {
                    self.username = ::std::option::Option::None;
                    self.special_fields.clear();
                }

                fn default_instance() -> &'static LiskDelegateType {
                    static instance: LiskDelegateType = LiskDelegateType {
                        username: ::std::option::Option::None,
                        special_fields: ::protobuf::SpecialFields::new(),
                    };
                    &instance
                }
            }

            impl ::protobuf::MessageFull for LiskDelegateType {
                fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                    static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                    descriptor.get(|| super::super::super::file_descriptor().message_by_package_relative_name("LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskDelegateType").unwrap()).clone()
                }
            }

            impl ::std::fmt::Display for LiskDelegateType {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    ::protobuf::text_format::fmt(self, f)
                }
            }

            impl ::protobuf::reflect::ProtobufValue for LiskDelegateType {
                type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
            }

            /// *
            ///  Structure representing the multisignature field in the Lisk transaction asset field
            #[derive(PartialEq,Clone,Default,Debug)]
            // @@protoc_insertion_point(message:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType)
            pub struct LiskMultisignatureType {
                // message fields
                // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType.min)
                pub min: ::std::option::Option<u32>,
                // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType.life_time)
                pub life_time: ::std::option::Option<u32>,
                // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType.keys_group)
                pub keys_group: ::std::vec::Vec<::std::string::String>,
                // special fields
                // @@protoc_insertion_point(special_field:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType.special_fields)
                pub special_fields: ::protobuf::SpecialFields,
            }

            impl<'a> ::std::default::Default for &'a LiskMultisignatureType {
                fn default() -> &'a LiskMultisignatureType {
                    <LiskMultisignatureType as ::protobuf::Message>::default_instance()
                }
            }

            impl LiskMultisignatureType {
                pub fn new() -> LiskMultisignatureType {
                    ::std::default::Default::default()
                }

                // optional uint32 min = 1;

                pub fn min(&self) -> u32 {
                    self.min.unwrap_or(0)
                }

                pub fn clear_min(&mut self) {
                    self.min = ::std::option::Option::None;
                }

                pub fn has_min(&self) -> bool {
                    self.min.is_some()
                }

                // Param is passed by value, moved
                pub fn set_min(&mut self, v: u32) {
                    self.min = ::std::option::Option::Some(v);
                }

                // optional uint32 life_time = 2;

                pub fn life_time(&self) -> u32 {
                    self.life_time.unwrap_or(0)
                }

                pub fn clear_life_time(&mut self) {
                    self.life_time = ::std::option::Option::None;
                }

                pub fn has_life_time(&self) -> bool {
                    self.life_time.is_some()
                }

                // Param is passed by value, moved
                pub fn set_life_time(&mut self, v: u32) {
                    self.life_time = ::std::option::Option::Some(v);
                }

                pub(in super::super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                    let mut fields = ::std::vec::Vec::with_capacity(3);
                    let mut oneofs = ::std::vec::Vec::with_capacity(0);
                    fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                        "min",
                        |m: &LiskMultisignatureType| { &m.min },
                        |m: &mut LiskMultisignatureType| { &mut m.min },
                    ));
                    fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                        "life_time",
                        |m: &LiskMultisignatureType| { &m.life_time },
                        |m: &mut LiskMultisignatureType| { &mut m.life_time },
                    ));
                    fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                        "keys_group",
                        |m: &LiskMultisignatureType| { &m.keys_group },
                        |m: &mut LiskMultisignatureType| { &mut m.keys_group },
                    ));
                    ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LiskMultisignatureType>(
                        "LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType",
                        fields,
                        oneofs,
                    )
                }
            }

            impl ::protobuf::Message for LiskMultisignatureType {
                const NAME: &'static str = "LiskMultisignatureType";

                fn is_initialized(&self) -> bool {
                    true
                }

                fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => {
                                self.min = ::std::option::Option::Some(is.read_uint32()?);
                            },
                            16 => {
                                self.life_time = ::std::option::Option::Some(is.read_uint32()?);
                            },
                            26 => {
                                self.keys_group.push(is.read_string()?);
                            },
                            tag => {
                                ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                            },
                        };
                    }
                    ::std::result::Result::Ok(())
                }

                // Compute sizes of nested messages
                #[allow(unused_variables)]
                fn compute_size(&self) -> u64 {
                    let mut my_size = 0;
                    if let Some(v) = self.min {
                        my_size += ::protobuf::rt::uint32_size(1, v);
                    }
                    if let Some(v) = self.life_time {
                        my_size += ::protobuf::rt::uint32_size(2, v);
                    }
                    for value in &self.keys_group {
                        my_size += ::protobuf::rt::string_size(3, &value);
                    };
                    my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                    self.special_fields.cached_size().set(my_size as u32);
                    my_size
                }

                fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                    if let Some(v) = self.min {
                        os.write_uint32(1, v)?;
                    }
                    if let Some(v) = self.life_time {
                        os.write_uint32(2, v)?;
                    }
                    for v in &self.keys_group {
                        os.write_string(3, &v)?;
                    };
                    os.write_unknown_fields(self.special_fields.unknown_fields())?;
                    ::std::result::Result::Ok(())
                }

                fn special_fields(&self) -> &::protobuf::SpecialFields {
                    &self.special_fields
                }

                fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                    &mut self.special_fields
                }

                fn new() -> LiskMultisignatureType {
                    LiskMultisignatureType::new()
                }

                fn clear(&mut self) {
                    self.min = ::std::option::Option::None;
                    self.life_time = ::std::option::Option::None;
                    self.keys_group.clear();
                    self.special_fields.clear();
                }

                fn default_instance() -> &'static LiskMultisignatureType {
                    static instance: LiskMultisignatureType = LiskMultisignatureType {
                        min: ::std::option::Option::None,
                        life_time: ::std::option::Option::None,
                        keys_group: ::std::vec::Vec::new(),
                        special_fields: ::protobuf::SpecialFields::new(),
                    };
                    &instance
                }
            }

            impl ::protobuf::MessageFull for LiskMultisignatureType {
                fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                    static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                    descriptor.get(|| super::super::super::file_descriptor().message_by_package_relative_name("LiskSignTx.LiskTransactionCommon.LiskTransactionAsset.LiskMultisignatureType").unwrap()).clone()
                }
            }

            impl ::std::fmt::Display for LiskMultisignatureType {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    ::protobuf::text_format::fmt(self, f)
                }
            }

            impl ::protobuf::reflect::ProtobufValue for LiskMultisignatureType {
                type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
            }
        }

        /// *
        ///  Type of Lisk transaction
        #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
        // @@protoc_insertion_point(enum:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionType)
        pub enum LiskTransactionType {
            // @@protoc_insertion_point(enum_value:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionType.Transfer)
            Transfer = 0,
            // @@protoc_insertion_point(enum_value:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionType.RegisterSecondPassphrase)
            RegisterSecondPassphrase = 1,
            // @@protoc_insertion_point(enum_value:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionType.RegisterDelegate)
            RegisterDelegate = 2,
            // @@protoc_insertion_point(enum_value:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionType.CastVotes)
            CastVotes = 3,
            // @@protoc_insertion_point(enum_value:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionType.RegisterMultisignatureAccount)
            RegisterMultisignatureAccount = 4,
            // @@protoc_insertion_point(enum_value:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionType.CreateDapp)
            CreateDapp = 5,
            // @@protoc_insertion_point(enum_value:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionType.TransferIntoDapp)
            TransferIntoDapp = 6,
            // @@protoc_insertion_point(enum_value:hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionType.TransferOutOfDapp)
            TransferOutOfDapp = 7,
        }

        impl ::protobuf::Enum for LiskTransactionType {
            const NAME: &'static str = "LiskTransactionType";

            fn value(&self) -> i32 {
                *self as i32
            }

            fn from_i32(value: i32) -> ::std::option::Option<LiskTransactionType> {
                match value {
                    0 => ::std::option::Option::Some(LiskTransactionType::Transfer),
                    1 => ::std::option::Option::Some(LiskTransactionType::RegisterSecondPassphrase),
                    2 => ::std::option::Option::Some(LiskTransactionType::RegisterDelegate),
                    3 => ::std::option::Option::Some(LiskTransactionType::CastVotes),
                    4 => ::std::option::Option::Some(LiskTransactionType::RegisterMultisignatureAccount),
                    5 => ::std::option::Option::Some(LiskTransactionType::CreateDapp),
                    6 => ::std::option::Option::Some(LiskTransactionType::TransferIntoDapp),
                    7 => ::std::option::Option::Some(LiskTransactionType::TransferOutOfDapp),
                    _ => ::std::option::Option::None
                }
            }

            const VALUES: &'static [LiskTransactionType] = &[
                LiskTransactionType::Transfer,
                LiskTransactionType::RegisterSecondPassphrase,
                LiskTransactionType::RegisterDelegate,
                LiskTransactionType::CastVotes,
                LiskTransactionType::RegisterMultisignatureAccount,
                LiskTransactionType::CreateDapp,
                LiskTransactionType::TransferIntoDapp,
                LiskTransactionType::TransferOutOfDapp,
            ];
        }

        impl ::protobuf::EnumFull for LiskTransactionType {
            fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().enum_by_package_relative_name("LiskSignTx.LiskTransactionCommon.LiskTransactionType").unwrap()).clone()
            }

            fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
                let index = *self as usize;
                Self::enum_descriptor().value_by_index(index)
            }
        }

        impl ::std::default::Default for LiskTransactionType {
            fn default() -> Self {
                LiskTransactionType::Transfer
            }
        }

        impl LiskTransactionType {
            pub(in super::super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
                ::protobuf::reflect::GeneratedEnumDescriptorData::new::<LiskTransactionType>("LiskSignTx.LiskTransactionCommon.LiskTransactionType")
            }
        }
    }
}

/// *
///  Response: Contains Lisk transaction signature
///  @end
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.lisk.LiskSignedTx)
pub struct LiskSignedTx {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskSignedTx.signature)
    pub signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.lisk.LiskSignedTx.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LiskSignedTx {
    fn default() -> &'a LiskSignedTx {
        <LiskSignedTx as ::protobuf::Message>::default_instance()
    }
}

impl LiskSignedTx {
    pub fn new() -> LiskSignedTx {
        ::std::default::Default::default()
    }

    // optional bytes signature = 1;

    pub fn signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature",
            |m: &LiskSignedTx| { &m.signature },
            |m: &mut LiskSignedTx| { &mut m.signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LiskSignedTx>(
            "LiskSignedTx",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LiskSignedTx {
    const NAME: &'static str = "LiskSignedTx";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.signature.as_ref() {
            os.write_bytes(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LiskSignedTx {
        LiskSignedTx::new()
    }

    fn clear(&mut self) {
        self.signature = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LiskSignedTx {
        static instance: LiskSignedTx = LiskSignedTx {
            signature: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LiskSignedTx {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LiskSignedTx").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LiskSignedTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LiskSignedTx {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: Ask device to sign message
///  @start
///  @next LiskMessageSignature
///  @next Failure
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.lisk.LiskSignMessage)
pub struct LiskSignMessage {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskSignMessage.address_n)
    pub address_n: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskSignMessage.message)
    pub message: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.lisk.LiskSignMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LiskSignMessage {
    fn default() -> &'a LiskSignMessage {
        <LiskSignMessage as ::protobuf::Message>::default_instance()
    }
}

impl LiskSignMessage {
    pub fn new() -> LiskSignMessage {
        ::std::default::Default::default()
    }

    // optional bytes message = 2;

    pub fn message(&self) -> &[u8] {
        match self.message.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_message(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::vec::Vec<u8>) {
        self.message = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.message.is_none() {
            self.message = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::vec::Vec<u8> {
        self.message.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "address_n",
            |m: &LiskSignMessage| { &m.address_n },
            |m: &mut LiskSignMessage| { &mut m.address_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "message",
            |m: &LiskSignMessage| { &m.message },
            |m: &mut LiskSignMessage| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LiskSignMessage>(
            "LiskSignMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LiskSignMessage {
    const NAME: &'static str = "LiskSignMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                },
                8 => {
                    self.address_n.push(is.read_uint32()?);
                },
                18 => {
                    self.message = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.message.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.message.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LiskSignMessage {
        LiskSignMessage::new()
    }

    fn clear(&mut self) {
        self.address_n.clear();
        self.message = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LiskSignMessage {
        static instance: LiskSignMessage = LiskSignMessage {
            address_n: ::std::vec::Vec::new(),
            message: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LiskSignMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LiskSignMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LiskSignMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LiskSignMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Response: Signed message
///  @end
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.lisk.LiskMessageSignature)
pub struct LiskMessageSignature {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskMessageSignature.public_key)
    pub public_key: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskMessageSignature.signature)
    pub signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.lisk.LiskMessageSignature.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LiskMessageSignature {
    fn default() -> &'a LiskMessageSignature {
        <LiskMessageSignature as ::protobuf::Message>::default_instance()
    }
}

impl LiskMessageSignature {
    pub fn new() -> LiskMessageSignature {
        ::std::default::Default::default()
    }

    // optional bytes public_key = 1;

    pub fn public_key(&self) -> &[u8] {
        match self.public_key.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_public_key(&mut self) {
        self.public_key = ::std::option::Option::None;
    }

    pub fn has_public_key(&self) -> bool {
        self.public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.public_key.is_none() {
            self.public_key = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
        self.public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes signature = 2;

    pub fn signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "public_key",
            |m: &LiskMessageSignature| { &m.public_key },
            |m: &mut LiskMessageSignature| { &mut m.public_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature",
            |m: &LiskMessageSignature| { &m.signature },
            |m: &mut LiskMessageSignature| { &mut m.signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LiskMessageSignature>(
            "LiskMessageSignature",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LiskMessageSignature {
    const NAME: &'static str = "LiskMessageSignature";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.public_key = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.public_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.public_key.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.signature.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LiskMessageSignature {
        LiskMessageSignature::new()
    }

    fn clear(&mut self) {
        self.public_key = ::std::option::Option::None;
        self.signature = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LiskMessageSignature {
        static instance: LiskMessageSignature = LiskMessageSignature {
            public_key: ::std::option::Option::None,
            signature: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LiskMessageSignature {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LiskMessageSignature").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LiskMessageSignature {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LiskMessageSignature {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: Ask device to verify message
///  @start
///  @next Success
///  @next Failure
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.lisk.LiskVerifyMessage)
pub struct LiskVerifyMessage {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskVerifyMessage.public_key)
    pub public_key: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskVerifyMessage.signature)
    pub signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.lisk.LiskVerifyMessage.message)
    pub message: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.lisk.LiskVerifyMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LiskVerifyMessage {
    fn default() -> &'a LiskVerifyMessage {
        <LiskVerifyMessage as ::protobuf::Message>::default_instance()
    }
}

impl LiskVerifyMessage {
    pub fn new() -> LiskVerifyMessage {
        ::std::default::Default::default()
    }

    // optional bytes public_key = 1;

    pub fn public_key(&self) -> &[u8] {
        match self.public_key.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_public_key(&mut self) {
        self.public_key = ::std::option::Option::None;
    }

    pub fn has_public_key(&self) -> bool {
        self.public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.public_key.is_none() {
            self.public_key = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
        self.public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes signature = 2;

    pub fn signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes message = 3;

    pub fn message(&self) -> &[u8] {
        match self.message.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_message(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::vec::Vec<u8>) {
        self.message = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.message.is_none() {
            self.message = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::vec::Vec<u8> {
        self.message.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "public_key",
            |m: &LiskVerifyMessage| { &m.public_key },
            |m: &mut LiskVerifyMessage| { &mut m.public_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature",
            |m: &LiskVerifyMessage| { &m.signature },
            |m: &mut LiskVerifyMessage| { &mut m.signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "message",
            |m: &LiskVerifyMessage| { &m.message },
            |m: &mut LiskVerifyMessage| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LiskVerifyMessage>(
            "LiskVerifyMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LiskVerifyMessage {
    const NAME: &'static str = "LiskVerifyMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.public_key = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                26 => {
                    self.message = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.public_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.message.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.public_key.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.signature.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.message.as_ref() {
            os.write_bytes(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LiskVerifyMessage {
        LiskVerifyMessage::new()
    }

    fn clear(&mut self) {
        self.public_key = ::std::option::Option::None;
        self.signature = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LiskVerifyMessage {
        static instance: LiskVerifyMessage = LiskVerifyMessage {
            public_key: ::std::option::Option::None,
            signature: ::std::option::Option::None,
            message: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LiskVerifyMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LiskVerifyMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LiskVerifyMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LiskVerifyMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13messages-lisk.proto\x12\x17hw.trezor.messages.lisk\"P\n\x0eLiskGet\
    Address\x12\x1b\n\taddress_n\x18\x01\x20\x03(\rR\x08addressN\x12!\n\x0cs\
    how_display\x18\x02\x20\x01(\x08R\x0bshowDisplay\"'\n\x0bLiskAddress\x12\
    \x18\n\x07address\x18\x01\x20\x01(\tR\x07address\"R\n\x10LiskGetPublicKe\
    y\x12\x1b\n\taddress_n\x18\x01\x20\x03(\rR\x08addressN\x12!\n\x0cshow_di\
    splay\x18\x02\x20\x01(\x08R\x0bshowDisplay\".\n\rLiskPublicKey\x12\x1d\n\
    \npublic_key\x18\x01\x20\x01(\x0cR\tpublicKey\"\xb8\x0b\n\nLiskSignTx\
    \x12\x1b\n\taddress_n\x18\x01\x20\x03(\rR\x08addressN\x12[\n\x0btransact\
    ion\x18\x02\x20\x01(\x0b29.hw.trezor.messages.lisk.LiskSignTx.LiskTransa\
    ctionCommonR\x0btransaction\x1a\xaf\n\n\x15LiskTransactionCommon\x12a\n\
    \x04type\x18\x01\x20\x01(\x0e2M.hw.trezor.messages.lisk.LiskSignTx.LiskT\
    ransactionCommon.LiskTransactionTypeR\x04type\x12\x19\n\x06amount\x18\
    \x02\x20\x01(\x04:\x010R\x06amount\x12\x10\n\x03fee\x18\x03\x20\x01(\x04\
    R\x03fee\x12!\n\x0crecipient_id\x18\x04\x20\x01(\tR\x0brecipientId\x12*\
    \n\x11sender_public_key\x18\x05\x20\x01(\x0cR\x0fsenderPublicKey\x120\n\
    \x14requester_public_key\x18\x06\x20\x01(\x0cR\x12requesterPublicKey\x12\
    \x1c\n\tsignature\x18\x07\x20\x01(\x0cR\tsignature\x12\x1c\n\ttimestamp\
    \x18\x08\x20\x01(\rR\ttimestamp\x12d\n\x05asset\x18\t\x20\x01(\x0b2N.hw.\
    trezor.messages.lisk.LiskSignTx.LiskTransactionCommon.LiskTransactionAss\
    etR\x05asset\x1a\x99\x05\n\x14LiskTransactionAsset\x12~\n\tsignature\x18\
    \x01\x20\x01(\x0b2`.hw.trezor.messages.lisk.LiskSignTx.LiskTransactionCo\
    mmon.LiskTransactionAsset.LiskSignatureTypeR\tsignature\x12{\n\x08delega\
    te\x18\x02\x20\x01(\x0b2_.hw.trezor.messages.lisk.LiskSignTx.LiskTransac\
    tionCommon.LiskTransactionAsset.LiskDelegateTypeR\x08delegate\x12\x14\n\
    \x05votes\x18\x03\x20\x03(\tR\x05votes\x12\x8d\x01\n\x0emultisignature\
    \x18\x04\x20\x01(\x0b2e.hw.trezor.messages.lisk.LiskSignTx.LiskTransacti\
    onCommon.LiskTransactionAsset.LiskMultisignatureTypeR\x0emultisignature\
    \x12\x12\n\x04data\x18\x05\x20\x01(\tR\x04data\x1a2\n\x11LiskSignatureTy\
    pe\x12\x1d\n\npublic_key\x18\x01\x20\x01(\x0cR\tpublicKey\x1a.\n\x10Lisk\
    DelegateType\x12\x1a\n\x08username\x18\x01\x20\x01(\tR\x08username\x1af\
    \n\x16LiskMultisignatureType\x12\x10\n\x03min\x18\x01\x20\x01(\rR\x03min\
    \x12\x1b\n\tlife_time\x18\x02\x20\x01(\rR\x08lifeTime\x12\x1d\n\nkeys_gr\
    oup\x18\x03\x20\x03(\tR\tkeysGroup\"\xc6\x01\n\x13LiskTransactionType\
    \x12\x0c\n\x08Transfer\x10\0\x12\x1c\n\x18RegisterSecondPassphrase\x10\
    \x01\x12\x14\n\x10RegisterDelegate\x10\x02\x12\r\n\tCastVotes\x10\x03\
    \x12!\n\x1dRegisterMultisignatureAccount\x10\x04\x12\x0e\n\nCreateDapp\
    \x10\x05\x12\x14\n\x10TransferIntoDapp\x10\x06\x12\x15\n\x11TransferOutO\
    fDapp\x10\x07\",\n\x0cLiskSignedTx\x12\x1c\n\tsignature\x18\x01\x20\x01(\
    \x0cR\tsignature\"H\n\x0fLiskSignMessage\x12\x1b\n\taddress_n\x18\x01\
    \x20\x03(\rR\x08addressN\x12\x18\n\x07message\x18\x02\x20\x01(\x0cR\x07m\
    essage\"S\n\x14LiskMessageSignature\x12\x1d\n\npublic_key\x18\x01\x20\
    \x01(\x0cR\tpublicKey\x12\x1c\n\tsignature\x18\x02\x20\x01(\x0cR\tsignat\
    ure\"j\n\x11LiskVerifyMessage\x12\x1d\n\npublic_key\x18\x01\x20\x01(\x0c\
    R\tpublicKey\x12\x1c\n\tsignature\x18\x02\x20\x01(\x0cR\tsignature\x12\
    \x18\n\x07message\x18\x03\x20\x01(\x0cR\x07messageB8\n#com.satoshilabs.t\
    rezor.lib.protobufB\x11TrezorMessageLiskJ\x87)\n\x07\x12\x05\0\0\x96\x01\
    \x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x20\n\
    \x08\n\x01\x08\x12\x03\x04\0<\n.\n\x02\x08\x01\x12\x03\x04\0<\x1a#\x20Su\
    gar\x20for\x20easier\x20handling\x20in\x20Java\n\n\x08\n\x01\x08\x12\x03\
    \x05\02\n\t\n\x02\x08\x08\x12\x03\x05\02\n~\n\x02\x04\0\x12\x04\r\0\x10\
    \x01\x1ar*\n\x20Request:\x20Ask\x20device\x20for\x20Lisk\x20address\x20c\
    orresponding\x20to\x20address_n\x20path\n\x20@start\n\x20@next\x20LiskAd\
    dress\n\x20@next\x20Failure\n\n\n\n\x03\x04\0\x01\x12\x03\r\x08\x16\n=\n\
    \x04\x04\0\x02\0\x12\x03\x0e\x04\"\"0\x20BIP-32\x20path\x20to\x20derive\
    \x20the\x20key\x20from\x20master\x20node\n\n\x0c\n\x05\x04\0\x02\0\x04\
    \x12\x03\x0e\x04\x0c\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0e\r\x13\n\x0c\
    \n\x05\x04\0\x02\0\x01\x12\x03\x0e\x14\x1d\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03\x0e\x20!\nC\n\x04\x04\0\x02\x01\x12\x03\x0f\x04#\"6\x20Optional\
    ly\x20show\x20on\x20display\x20before\x20sending\x20the\x20result\n\n\
    \x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x0f\x04\x0c\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03\x0f\r\x11\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0f\x12\
    \x1e\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0f!\"\nV\n\x02\x04\x01\x12\
    \x04\x16\0\x18\x01\x1aJ*\n\x20Response:\x20Contains\x20Lisk\x20address\
    \x20derived\x20from\x20device\x20private\x20seed\n\x20@end\n\n\n\n\x03\
    \x04\x01\x01\x12\x03\x16\x08\x13\n\x1b\n\x04\x04\x01\x02\0\x12\x03\x17\
    \x04\x20\"\x0e\x20Lisk\x20address\n\n\x0c\n\x05\x04\x01\x02\0\x04\x12\
    \x03\x17\x04\x0c\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x17\r\x13\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x17\x14\x1b\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x17\x1e\x1f\nt\n\x02\x04\x02\x12\x04\x1f\0\"\x01\x1ah*\n\x20Req\
    uest:\x20Ask\x20device\x20for\x20Lisk\x20public\x20key\x20corresponding\
    \x20to\x20address_n\x20path\n\x20@start\n\x20@next\x20LiskPublicKey\n\n\
    \n\n\x03\x04\x02\x01\x12\x03\x1f\x08\x18\n=\n\x04\x04\x02\x02\0\x12\x03\
    \x20\x04\"\"0\x20BIP-32\x20path\x20to\x20derive\x20the\x20key\x20from\
    \x20master\x20node\n\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03\x20\x04\x0c\n\
    \x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x20\r\x13\n\x0c\n\x05\x04\x02\x02\0\
    \x01\x12\x03\x20\x14\x1d\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x20\x20!\
    \nC\n\x04\x04\x02\x02\x01\x12\x03!\x04#\"6\x20Optionally\x20show\x20on\
    \x20display\x20before\x20sending\x20the\x20result\n\n\x0c\n\x05\x04\x02\
    \x02\x01\x04\x12\x03!\x04\x0c\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03!\r\
    \x11\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03!\x12\x1e\n\x0c\n\x05\x04\
    \x02\x02\x01\x03\x12\x03!!\"\nY\n\x02\x04\x03\x12\x04(\0*\x01\x1aM*\n\
    \x20Response:\x20Contains\x20Lisk\x20public\x20key\x20derived\x20from\
    \x20device\x20private\x20seed\n\x20@end\n\n\n\n\x03\x04\x03\x01\x12\x03(\
    \x08\x15\n\x1e\n\x04\x04\x03\x02\0\x12\x03)\x04\"\"\x11\x20Lisk\x20publi\
    c\x20key\n\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03)\x04\x0c\n\x0c\n\x05\
    \x04\x03\x02\0\x05\x12\x03)\r\x12\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03)\
    \x13\x1d\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03)\x20!\ng\n\x02\x04\x04\
    \x12\x042\0n\x01\x1a[*\n\x20Request:\x20Ask\x20device\x20to\x20sign\x20L\
    isk\x20transaction\n\x20@start\n\x20@next\x20LiskSignedTx\n\x20@next\x20\
    Failure\n\n\n\n\x03\x04\x04\x01\x12\x032\x08\x12\n=\n\x04\x04\x04\x02\0\
    \x12\x033\x04\"\"0\x20BIP-32\x20path\x20to\x20derive\x20the\x20key\x20fr\
    om\x20master\x20node\n\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x033\x04\x0c\n\
    \x0c\n\x05\x04\x04\x02\0\x05\x12\x033\r\x13\n\x0c\n\x05\x04\x04\x02\0\
    \x01\x12\x033\x14\x1d\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x033\x20!\n)\n\
    \x04\x04\x04\x02\x01\x12\x034\x043\"\x1c\x20Lisk\x20transaction\x20struc\
    ture\n\n\x0c\n\x05\x04\x04\x02\x01\x04\x12\x034\x04\x0c\n\x0c\n\x05\x04\
    \x04\x02\x01\x06\x12\x034\r\"\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x034#.\
    \n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03412\nN\n\x04\x04\x04\x03\0\x12\
    \x048\x04m\x05\x1a@*\n\x20Structure\x20representing\x20the\x20common\x20\
    part\x20for\x20Lisk\x20transactions\n\n\x0c\n\x05\x04\x04\x03\0\x01\x12\
    \x038\x0c!\n\r\n\x06\x04\x04\x03\0\x02\0\x12\x039\x08.\n\x0e\n\x07\x04\
    \x04\x03\0\x02\0\x04\x12\x039\x08\x10\n\x0e\n\x07\x04\x04\x03\0\x02\0\
    \x06\x12\x039\x11$\n\x0e\n\x07\x04\x04\x03\0\x02\0\x01\x12\x039%)\n\x0e\
    \n\x07\x04\x04\x03\0\x02\0\x03\x12\x039,-\n\r\n\x06\x04\x04\x03\0\x02\
    \x01\x12\x03:\x08/\n\x0e\n\x07\x04\x04\x03\0\x02\x01\x04\x12\x03:\x08\
    \x10\n\x0e\n\x07\x04\x04\x03\0\x02\x01\x05\x12\x03:\x11\x17\n\x0e\n\x07\
    \x04\x04\x03\0\x02\x01\x01\x12\x03:\x18\x1e\n\x0e\n\x07\x04\x04\x03\0\
    \x02\x01\x03\x12\x03:!\"\n\x0e\n\x07\x04\x04\x03\0\x02\x01\x08\x12\x03:#\
    .\n\x0e\n\x07\x04\x04\x03\0\x02\x01\x07\x12\x03:,-\n\r\n\x06\x04\x04\x03\
    \0\x02\x02\x12\x03;\x08\x20\n\x0e\n\x07\x04\x04\x03\0\x02\x02\x04\x12\
    \x03;\x08\x10\n\x0e\n\x07\x04\x04\x03\0\x02\x02\x05\x12\x03;\x11\x17\n\
    \x0e\n\x07\x04\x04\x03\0\x02\x02\x01\x12\x03;\x18\x1b\n\x0e\n\x07\x04\
    \x04\x03\0\x02\x02\x03\x12\x03;\x1e\x1f\n\r\n\x06\x04\x04\x03\0\x02\x03\
    \x12\x03<\x08)\n\x0e\n\x07\x04\x04\x03\0\x02\x03\x04\x12\x03<\x08\x10\n\
    \x0e\n\x07\x04\x04\x03\0\x02\x03\x05\x12\x03<\x11\x17\n\x0e\n\x07\x04\
    \x04\x03\0\x02\x03\x01\x12\x03<\x18$\n\x0e\n\x07\x04\x04\x03\0\x02\x03\
    \x03\x12\x03<'(\n\r\n\x06\x04\x04\x03\0\x02\x04\x12\x03=\x08-\n\x0e\n\
    \x07\x04\x04\x03\0\x02\x04\x04\x12\x03=\x08\x10\n\x0e\n\x07\x04\x04\x03\
    \0\x02\x04\x05\x12\x03=\x11\x16\n\x0e\n\x07\x04\x04\x03\0\x02\x04\x01\
    \x12\x03=\x17(\n\x0e\n\x07\x04\x04\x03\0\x02\x04\x03\x12\x03=+,\n\r\n\
    \x06\x04\x04\x03\0\x02\x05\x12\x03>\x080\n\x0e\n\x07\x04\x04\x03\0\x02\
    \x05\x04\x12\x03>\x08\x10\n\x0e\n\x07\x04\x04\x03\0\x02\x05\x05\x12\x03>\
    \x11\x16\n\x0e\n\x07\x04\x04\x03\0\x02\x05\x01\x12\x03>\x17+\n\x0e\n\x07\
    \x04\x04\x03\0\x02\x05\x03\x12\x03>./\n\r\n\x06\x04\x04\x03\0\x02\x06\
    \x12\x03?\x08%\n\x0e\n\x07\x04\x04\x03\0\x02\x06\x04\x12\x03?\x08\x10\n\
    \x0e\n\x07\x04\x04\x03\0\x02\x06\x05\x12\x03?\x11\x16\n\x0e\n\x07\x04\
    \x04\x03\0\x02\x06\x01\x12\x03?\x17\x20\n\x0e\n\x07\x04\x04\x03\0\x02\
    \x06\x03\x12\x03?#$\n\r\n\x06\x04\x04\x03\0\x02\x07\x12\x03@\x08&\n\x0e\
    \n\x07\x04\x04\x03\0\x02\x07\x04\x12\x03@\x08\x10\n\x0e\n\x07\x04\x04\
    \x03\0\x02\x07\x05\x12\x03@\x11\x17\n\x0e\n\x07\x04\x04\x03\0\x02\x07\
    \x01\x12\x03@\x18!\n\x0e\n\x07\x04\x04\x03\0\x02\x07\x03\x12\x03@$%\n\r\
    \n\x06\x04\x04\x03\0\x02\x08\x12\x03A\x080\n\x0e\n\x07\x04\x04\x03\0\x02\
    \x08\x04\x12\x03A\x08\x10\n\x0e\n\x07\x04\x04\x03\0\x02\x08\x06\x12\x03A\
    \x11%\n\x0e\n\x07\x04\x04\x03\0\x02\x08\x01\x12\x03A&+\n\x0e\n\x07\x04\
    \x04\x03\0\x02\x08\x03\x12\x03A./\n,\n\x06\x04\x04\x03\0\x04\0\x12\x04E\
    \x08N\t\x1a\x1c*\n\x20Type\x20of\x20Lisk\x20transaction\n\n\x0e\n\x07\
    \x04\x04\x03\0\x04\0\x01\x12\x03E\r\x20\n\x0f\n\x08\x04\x04\x03\0\x04\0\
    \x02\0\x12\x03F\x0c\x19\n\x10\n\t\x04\x04\x03\0\x04\0\x02\0\x01\x12\x03F\
    \x0c\x14\n\x10\n\t\x04\x04\x03\0\x04\0\x02\0\x02\x12\x03F\x17\x18\n\x0f\
    \n\x08\x04\x04\x03\0\x04\0\x02\x01\x12\x03G\x0c)\n\x10\n\t\x04\x04\x03\0\
    \x04\0\x02\x01\x01\x12\x03G\x0c$\n\x10\n\t\x04\x04\x03\0\x04\0\x02\x01\
    \x02\x12\x03G'(\n\x0f\n\x08\x04\x04\x03\0\x04\0\x02\x02\x12\x03H\x0c!\n\
    \x10\n\t\x04\x04\x03\0\x04\0\x02\x02\x01\x12\x03H\x0c\x1c\n\x10\n\t\x04\
    \x04\x03\0\x04\0\x02\x02\x02\x12\x03H\x1f\x20\n\x0f\n\x08\x04\x04\x03\0\
    \x04\0\x02\x03\x12\x03I\x0c\x1a\n\x10\n\t\x04\x04\x03\0\x04\0\x02\x03\
    \x01\x12\x03I\x0c\x15\n\x10\n\t\x04\x04\x03\0\x04\0\x02\x03\x02\x12\x03I\
    \x18\x19\n\x0f\n\x08\x04\x04\x03\0\x04\0\x02\x04\x12\x03J\x0c.\n\x10\n\t\
    \x04\x04\x03\0\x04\0\x02\x04\x01\x12\x03J\x0c)\n\x10\n\t\x04\x04\x03\0\
    \x04\0\x02\x04\x02\x12\x03J,-\n\x0f\n\x08\x04\x04\x03\0\x04\0\x02\x05\
    \x12\x03K\x0c\x1b\n\x10\n\t\x04\x04\x03\0\x04\0\x02\x05\x01\x12\x03K\x0c\
    \x16\n\x10\n\t\x04\x04\x03\0\x04\0\x02\x05\x02\x12\x03K\x19\x1a\n\x0f\n\
    \x08\x04\x04\x03\0\x04\0\x02\x06\x12\x03L\x0c!\n\x10\n\t\x04\x04\x03\0\
    \x04\0\x02\x06\x01\x12\x03L\x0c\x1c\n\x10\n\t\x04\x04\x03\0\x04\0\x02\
    \x06\x02\x12\x03L\x1f\x20\n\x0f\n\x08\x04\x04\x03\0\x04\0\x02\x07\x12\
    \x03M\x0c\"\n\x10\n\t\x04\x04\x03\0\x04\0\x02\x07\x01\x12\x03M\x0c\x1d\n\
    \x10\n\t\x04\x04\x03\0\x04\0\x02\x07\x02\x12\x03M\x20!\nR\n\x06\x04\x04\
    \x03\0\x03\0\x12\x04R\x08l\t\x1aB*\n\x20Structure\x20representing\x20the\
    \x20asset\x20field\x20in\x20the\x20Lisk\x20transaction\n\n\x0e\n\x07\x04\
    \x04\x03\0\x03\0\x01\x12\x03R\x10$\n\x0f\n\x08\x04\x04\x03\0\x03\0\x02\0\
    \x12\x03S\x0c5\n\x10\n\t\x04\x04\x03\0\x03\0\x02\0\x04\x12\x03S\x0c\x14\
    \n\x10\n\t\x04\x04\x03\0\x03\0\x02\0\x06\x12\x03S\x15&\n\x10\n\t\x04\x04\
    \x03\0\x03\0\x02\0\x01\x12\x03S'0\n\x10\n\t\x04\x04\x03\0\x03\0\x02\0\
    \x03\x12\x03S34\n\x0f\n\x08\x04\x04\x03\0\x03\0\x02\x01\x12\x03T\x0c3\n\
    \x10\n\t\x04\x04\x03\0\x03\0\x02\x01\x04\x12\x03T\x0c\x14\n\x10\n\t\x04\
    \x04\x03\0\x03\0\x02\x01\x06\x12\x03T\x15%\n\x10\n\t\x04\x04\x03\0\x03\0\
    \x02\x01\x01\x12\x03T&.\n\x10\n\t\x04\x04\x03\0\x03\0\x02\x01\x03\x12\
    \x03T12\n\x0f\n\x08\x04\x04\x03\0\x03\0\x02\x02\x12\x03U\x0c&\n\x10\n\t\
    \x04\x04\x03\0\x03\0\x02\x02\x04\x12\x03U\x0c\x14\n\x10\n\t\x04\x04\x03\
    \0\x03\0\x02\x02\x05\x12\x03U\x15\x1b\n\x10\n\t\x04\x04\x03\0\x03\0\x02\
    \x02\x01\x12\x03U\x1c!\n\x10\n\t\x04\x04\x03\0\x03\0\x02\x02\x03\x12\x03\
    U$%\n\x0f\n\x08\x04\x04\x03\0\x03\0\x02\x03\x12\x03V\x0c?\n\x10\n\t\x04\
    \x04\x03\0\x03\0\x02\x03\x04\x12\x03V\x0c\x14\n\x10\n\t\x04\x04\x03\0\
    \x03\0\x02\x03\x06\x12\x03V\x15+\n\x10\n\t\x04\x04\x03\0\x03\0\x02\x03\
    \x01\x12\x03V,:\n\x10\n\t\x04\x04\x03\0\x03\0\x02\x03\x03\x12\x03V=>\n\
    \x0f\n\x08\x04\x04\x03\0\x03\0\x02\x04\x12\x03W\x0c%\n\x10\n\t\x04\x04\
    \x03\0\x03\0\x02\x04\x04\x12\x03W\x0c\x14\n\x10\n\t\x04\x04\x03\0\x03\0\
    \x02\x04\x05\x12\x03W\x15\x1b\n\x10\n\t\x04\x04\x03\0\x03\0\x02\x04\x01\
    \x12\x03W\x1c\x20\n\x10\n\t\x04\x04\x03\0\x03\0\x02\x04\x03\x12\x03W#$\n\
    d\n\x08\x04\x04\x03\0\x03\0\x03\0\x12\x04[\x0c]\r\x1aR*\n\x20Structure\
    \x20representing\x20the\x20signature\x20field\x20in\x20the\x20Lisk\x20tr\
    ansaction\x20asset\x20field\n\n\x10\n\t\x04\x04\x03\0\x03\0\x03\0\x01\
    \x12\x03[\x14%\n\x11\n\n\x04\x04\x03\0\x03\0\x03\0\x02\0\x12\x03\\\x10.\
    \n\x12\n\x0b\x04\x04\x03\0\x03\0\x03\0\x02\0\x04\x12\x03\\\x10\x18\n\x12\
    \n\x0b\x04\x04\x03\0\x03\0\x03\0\x02\0\x05\x12\x03\\\x19\x1e\n\x12\n\x0b\
    \x04\x04\x03\0\x03\0\x03\0\x02\0\x01\x12\x03\\\x1f)\n\x12\n\x0b\x04\x04\
    \x03\0\x03\0\x03\0\x02\0\x03\x12\x03\\,-\nc\n\x08\x04\x04\x03\0\x03\0\
    \x03\x01\x12\x04a\x0cc\r\x1aQ*\n\x20Structure\x20representing\x20the\x20\
    delegate\x20field\x20in\x20the\x20Lisk\x20transaction\x20asset\x20field\
    \n\n\x10\n\t\x04\x04\x03\0\x03\0\x03\x01\x01\x12\x03a\x14$\n\x11\n\n\x04\
    \x04\x03\0\x03\0\x03\x01\x02\0\x12\x03b\x10.\n\x12\n\x0b\x04\x04\x03\0\
    \x03\0\x03\x01\x02\0\x04\x12\x03b\x10\x18\n\x12\n\x0b\x04\x04\x03\0\x03\
    \0\x03\x01\x02\0\x05\x12\x03b\x19\x1f\n\x12\n\x0b\x04\x04\x03\0\x03\0\
    \x03\x01\x02\0\x01\x12\x03b\x20(\n\x12\n\x0b\x04\x04\x03\0\x03\0\x03\x01\
    \x02\0\x03\x12\x03b,-\ni\n\x08\x04\x04\x03\0\x03\0\x03\x02\x12\x04g\x0ck\
    \r\x1aW*\n\x20Structure\x20representing\x20the\x20multisignature\x20fiel\
    d\x20in\x20the\x20Lisk\x20transaction\x20asset\x20field\n\n\x10\n\t\x04\
    \x04\x03\0\x03\0\x03\x02\x01\x12\x03g\x14*\n\x11\n\n\x04\x04\x03\0\x03\0\
    \x03\x02\x02\0\x12\x03h\x10(\n\x12\n\x0b\x04\x04\x03\0\x03\0\x03\x02\x02\
    \0\x04\x12\x03h\x10\x18\n\x12\n\x0b\x04\x04\x03\0\x03\0\x03\x02\x02\0\
    \x05\x12\x03h\x19\x1f\n\x12\n\x0b\x04\x04\x03\0\x03\0\x03\x02\x02\0\x01\
    \x12\x03h\x20#\n\x12\n\x0b\x04\x04\x03\0\x03\0\x03\x02\x02\0\x03\x12\x03\
    h&'\n\x11\n\n\x04\x04\x03\0\x03\0\x03\x02\x02\x01\x12\x03i\x10.\n\x12\n\
    \x0b\x04\x04\x03\0\x03\0\x03\x02\x02\x01\x04\x12\x03i\x10\x18\n\x12\n\
    \x0b\x04\x04\x03\0\x03\0\x03\x02\x02\x01\x05\x12\x03i\x19\x1f\n\x12\n\
    \x0b\x04\x04\x03\0\x03\0\x03\x02\x02\x01\x01\x12\x03i\x20)\n\x12\n\x0b\
    \x04\x04\x03\0\x03\0\x03\x02\x02\x01\x03\x12\x03i,-\n\x11\n\n\x04\x04\
    \x03\0\x03\0\x03\x02\x02\x02\x12\x03j\x10/\n\x12\n\x0b\x04\x04\x03\0\x03\
    \0\x03\x02\x02\x02\x04\x12\x03j\x10\x18\n\x12\n\x0b\x04\x04\x03\0\x03\0\
    \x03\x02\x02\x02\x05\x12\x03j\x19\x1f\n\x12\n\x0b\x04\x04\x03\0\x03\0\
    \x03\x02\x02\x02\x01\x12\x03j\x20*\n\x12\n\x0b\x04\x04\x03\0\x03\0\x03\
    \x02\x02\x02\x03\x12\x03j-.\nC\n\x02\x04\x05\x12\x04t\0v\x01\x1a7*\n\x20\
    Response:\x20Contains\x20Lisk\x20transaction\x20signature\n\x20@end\n\n\
    \n\n\x03\x04\x05\x01\x12\x03t\x08\x14\n\x0b\n\x04\x04\x05\x02\0\x12\x03u\
    \x04!\n\x0c\n\x05\x04\x05\x02\0\x04\x12\x03u\x04\x0c\n\x0c\n\x05\x04\x05\
    \x02\0\x05\x12\x03u\r\x12\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03u\x13\x1c\
    \n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03u\x1f\x20\ng\n\x02\x04\x06\x12\x05\
    ~\0\x81\x01\x01\x1aZ*\n\x20Request:\x20Ask\x20device\x20to\x20sign\x20me\
    ssage\n\x20@start\n\x20@next\x20LiskMessageSignature\n\x20@next\x20Failu\
    re\n\n\n\n\x03\x04\x06\x01\x12\x03~\x08\x17\n\x0b\n\x04\x04\x06\x02\0\
    \x12\x03\x7f\x04\"\n\x0c\n\x05\x04\x06\x02\0\x04\x12\x03\x7f\x04\x0c\n\
    \x0c\n\x05\x04\x06\x02\0\x05\x12\x03\x7f\r\x13\n\x0c\n\x05\x04\x06\x02\0\
    \x01\x12\x03\x7f\x14\x1d\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03\x7f\x20!\
    \n\x0c\n\x04\x04\x06\x02\x01\x12\x04\x80\x01\x04\x1f\n\r\n\x05\x04\x06\
    \x02\x01\x04\x12\x04\x80\x01\x04\x0c\n\r\n\x05\x04\x06\x02\x01\x05\x12\
    \x04\x80\x01\r\x12\n\r\n\x05\x04\x06\x02\x01\x01\x12\x04\x80\x01\x13\x1a\
    \n\r\n\x05\x04\x06\x02\x01\x03\x12\x04\x80\x01\x1d\x1e\n0\n\x02\x04\x07\
    \x12\x06\x87\x01\0\x8a\x01\x01\x1a\"*\n\x20Response:\x20Signed\x20messag\
    e\n\x20@end\n\n\x0b\n\x03\x04\x07\x01\x12\x04\x87\x01\x08\x1c\n\x0c\n\
    \x04\x04\x07\x02\0\x12\x04\x88\x01\x04\"\n\r\n\x05\x04\x07\x02\0\x04\x12\
    \x04\x88\x01\x04\x0c\n\r\n\x05\x04\x07\x02\0\x05\x12\x04\x88\x01\r\x12\n\
    \r\n\x05\x04\x07\x02\0\x01\x12\x04\x88\x01\x13\x1d\n\r\n\x05\x04\x07\x02\
    \0\x03\x12\x04\x88\x01\x20!\n\x0c\n\x04\x04\x07\x02\x01\x12\x04\x89\x01\
    \x04!\n\r\n\x05\x04\x07\x02\x01\x04\x12\x04\x89\x01\x04\x0c\n\r\n\x05\
    \x04\x07\x02\x01\x05\x12\x04\x89\x01\r\x12\n\r\n\x05\x04\x07\x02\x01\x01\
    \x12\x04\x89\x01\x13\x1c\n\r\n\x05\x04\x07\x02\x01\x03\x12\x04\x89\x01\
    \x1f\x20\n]\n\x02\x04\x08\x12\x06\x92\x01\0\x96\x01\x01\x1aO*\n\x20Reque\
    st:\x20Ask\x20device\x20to\x20verify\x20message\n\x20@start\n\x20@next\
    \x20Success\n\x20@next\x20Failure\n\n\x0b\n\x03\x04\x08\x01\x12\x04\x92\
    \x01\x08\x19\n\x0c\n\x04\x04\x08\x02\0\x12\x04\x93\x01\x04\"\n\r\n\x05\
    \x04\x08\x02\0\x04\x12\x04\x93\x01\x04\x0c\n\r\n\x05\x04\x08\x02\0\x05\
    \x12\x04\x93\x01\r\x12\n\r\n\x05\x04\x08\x02\0\x01\x12\x04\x93\x01\x13\
    \x1d\n\r\n\x05\x04\x08\x02\0\x03\x12\x04\x93\x01\x20!\n\x0c\n\x04\x04\
    \x08\x02\x01\x12\x04\x94\x01\x04!\n\r\n\x05\x04\x08\x02\x01\x04\x12\x04\
    \x94\x01\x04\x0c\n\r\n\x05\x04\x08\x02\x01\x05\x12\x04\x94\x01\r\x12\n\r\
    \n\x05\x04\x08\x02\x01\x01\x12\x04\x94\x01\x13\x1c\n\r\n\x05\x04\x08\x02\
    \x01\x03\x12\x04\x94\x01\x1f\x20\n\x0c\n\x04\x04\x08\x02\x02\x12\x04\x95\
    \x01\x04\x1f\n\r\n\x05\x04\x08\x02\x02\x04\x12\x04\x95\x01\x04\x0c\n\r\n\
    \x05\x04\x08\x02\x02\x05\x12\x04\x95\x01\r\x12\n\r\n\x05\x04\x08\x02\x02\
    \x01\x12\x04\x95\x01\x13\x1a\n\r\n\x05\x04\x08\x02\x02\x03\x12\x04\x95\
    \x01\x1d\x1e\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(14);
            messages.push(LiskGetAddress::generated_message_descriptor_data());
            messages.push(LiskAddress::generated_message_descriptor_data());
            messages.push(LiskGetPublicKey::generated_message_descriptor_data());
            messages.push(LiskPublicKey::generated_message_descriptor_data());
            messages.push(LiskSignTx::generated_message_descriptor_data());
            messages.push(LiskSignedTx::generated_message_descriptor_data());
            messages.push(LiskSignMessage::generated_message_descriptor_data());
            messages.push(LiskMessageSignature::generated_message_descriptor_data());
            messages.push(LiskVerifyMessage::generated_message_descriptor_data());
            messages.push(lisk_sign_tx::LiskTransactionCommon::generated_message_descriptor_data());
            messages.push(lisk_sign_tx::lisk_transaction_common::LiskTransactionAsset::generated_message_descriptor_data());
            messages.push(lisk_sign_tx::lisk_transaction_common::lisk_transaction_asset::LiskSignatureType::generated_message_descriptor_data());
            messages.push(lisk_sign_tx::lisk_transaction_common::lisk_transaction_asset::LiskDelegateType::generated_message_descriptor_data());
            messages.push(lisk_sign_tx::lisk_transaction_common::lisk_transaction_asset::LiskMultisignatureType::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(lisk_sign_tx::lisk_transaction_common::LiskTransactionType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
