// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `messages-debug.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

/// *
///  Request: "Press" the button on the device
///  @start
///  @next Success
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.debug.DebugLinkDecision)
pub struct DebugLinkDecision {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.debug.DebugLinkDecision.yes_no)
    pub yes_no: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:hw.trezor.messages.debug.DebugLinkDecision.up_down)
    pub up_down: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:hw.trezor.messages.debug.DebugLinkDecision.input)
    pub input: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.debug.DebugLinkDecision.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DebugLinkDecision {
    fn default() -> &'a DebugLinkDecision {
        <DebugLinkDecision as ::protobuf::Message>::default_instance()
    }
}

impl DebugLinkDecision {
    pub fn new() -> DebugLinkDecision {
        ::std::default::Default::default()
    }

    // optional bool yes_no = 1;

    pub fn yes_no(&self) -> bool {
        self.yes_no.unwrap_or(false)
    }

    pub fn clear_yes_no(&mut self) {
        self.yes_no = ::std::option::Option::None;
    }

    pub fn has_yes_no(&self) -> bool {
        self.yes_no.is_some()
    }

    // Param is passed by value, moved
    pub fn set_yes_no(&mut self, v: bool) {
        self.yes_no = ::std::option::Option::Some(v);
    }

    // optional bool up_down = 2;

    pub fn up_down(&self) -> bool {
        self.up_down.unwrap_or(false)
    }

    pub fn clear_up_down(&mut self) {
        self.up_down = ::std::option::Option::None;
    }

    pub fn has_up_down(&self) -> bool {
        self.up_down.is_some()
    }

    // Param is passed by value, moved
    pub fn set_up_down(&mut self, v: bool) {
        self.up_down = ::std::option::Option::Some(v);
    }

    // optional string input = 3;

    pub fn input(&self) -> &str {
        match self.input.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_input(&mut self) {
        self.input = ::std::option::Option::None;
    }

    pub fn has_input(&self) -> bool {
        self.input.is_some()
    }

    // Param is passed by value, moved
    pub fn set_input(&mut self, v: ::std::string::String) {
        self.input = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_input(&mut self) -> &mut ::std::string::String {
        if self.input.is_none() {
            self.input = ::std::option::Option::Some(::std::string::String::new());
        }
        self.input.as_mut().unwrap()
    }

    // Take field
    pub fn take_input(&mut self) -> ::std::string::String {
        self.input.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "yes_no",
            |m: &DebugLinkDecision| { &m.yes_no },
            |m: &mut DebugLinkDecision| { &mut m.yes_no },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "up_down",
            |m: &DebugLinkDecision| { &m.up_down },
            |m: &mut DebugLinkDecision| { &mut m.up_down },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "input",
            |m: &DebugLinkDecision| { &m.input },
            |m: &mut DebugLinkDecision| { &mut m.input },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DebugLinkDecision>(
            "DebugLinkDecision",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DebugLinkDecision {
    const NAME: &'static str = "DebugLinkDecision";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.yes_no = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.up_down = ::std::option::Option::Some(is.read_bool()?);
                },
                26 => {
                    self.input = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.yes_no {
            my_size += 1 + 1;
        }
        if let Some(v) = self.up_down {
            my_size += 1 + 1;
        }
        if let Some(v) = self.input.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.yes_no {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.up_down {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.input.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DebugLinkDecision {
        DebugLinkDecision::new()
    }

    fn clear(&mut self) {
        self.yes_no = ::std::option::Option::None;
        self.up_down = ::std::option::Option::None;
        self.input = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DebugLinkDecision {
        static instance: DebugLinkDecision = DebugLinkDecision {
            yes_no: ::std::option::Option::None,
            up_down: ::std::option::Option::None,
            input: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DebugLinkDecision {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DebugLinkDecision").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DebugLinkDecision {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DebugLinkDecision {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: Computer asks for device state
///  @start
///  @next DebugLinkState
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.debug.DebugLinkGetState)
pub struct DebugLinkGetState {
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.debug.DebugLinkGetState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DebugLinkGetState {
    fn default() -> &'a DebugLinkGetState {
        <DebugLinkGetState as ::protobuf::Message>::default_instance()
    }
}

impl DebugLinkGetState {
    pub fn new() -> DebugLinkGetState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DebugLinkGetState>(
            "DebugLinkGetState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DebugLinkGetState {
    const NAME: &'static str = "DebugLinkGetState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DebugLinkGetState {
        DebugLinkGetState::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DebugLinkGetState {
        static instance: DebugLinkGetState = DebugLinkGetState {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DebugLinkGetState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DebugLinkGetState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DebugLinkGetState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DebugLinkGetState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Response: Device current state
///  @end
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.debug.DebugLinkState)
pub struct DebugLinkState {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.debug.DebugLinkState.layout)
    pub layout: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.debug.DebugLinkState.pin)
    pub pin: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.debug.DebugLinkState.matrix)
    pub matrix: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.debug.DebugLinkState.mnemonic)
    pub mnemonic: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.debug.DebugLinkState.node)
    pub node: ::protobuf::MessageField<super::messages_common::HDNodeType>,
    // @@protoc_insertion_point(field:hw.trezor.messages.debug.DebugLinkState.passphrase_protection)
    pub passphrase_protection: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:hw.trezor.messages.debug.DebugLinkState.reset_word)
    pub reset_word: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.debug.DebugLinkState.reset_entropy)
    pub reset_entropy: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.debug.DebugLinkState.recovery_fake_word)
    pub recovery_fake_word: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.debug.DebugLinkState.recovery_word_pos)
    pub recovery_word_pos: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.debug.DebugLinkState.reset_word_pos)
    pub reset_word_pos: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.debug.DebugLinkState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DebugLinkState {
    fn default() -> &'a DebugLinkState {
        <DebugLinkState as ::protobuf::Message>::default_instance()
    }
}

impl DebugLinkState {
    pub fn new() -> DebugLinkState {
        ::std::default::Default::default()
    }

    // optional bytes layout = 1;

    pub fn layout(&self) -> &[u8] {
        match self.layout.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_layout(&mut self) {
        self.layout = ::std::option::Option::None;
    }

    pub fn has_layout(&self) -> bool {
        self.layout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_layout(&mut self, v: ::std::vec::Vec<u8>) {
        self.layout = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_layout(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.layout.is_none() {
            self.layout = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.layout.as_mut().unwrap()
    }

    // Take field
    pub fn take_layout(&mut self) -> ::std::vec::Vec<u8> {
        self.layout.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string pin = 2;

    pub fn pin(&self) -> &str {
        match self.pin.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_pin(&mut self) {
        self.pin = ::std::option::Option::None;
    }

    pub fn has_pin(&self) -> bool {
        self.pin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pin(&mut self, v: ::std::string::String) {
        self.pin = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pin(&mut self) -> &mut ::std::string::String {
        if self.pin.is_none() {
            self.pin = ::std::option::Option::Some(::std::string::String::new());
        }
        self.pin.as_mut().unwrap()
    }

    // Take field
    pub fn take_pin(&mut self) -> ::std::string::String {
        self.pin.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string matrix = 3;

    pub fn matrix(&self) -> &str {
        match self.matrix.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_matrix(&mut self) {
        self.matrix = ::std::option::Option::None;
    }

    pub fn has_matrix(&self) -> bool {
        self.matrix.is_some()
    }

    // Param is passed by value, moved
    pub fn set_matrix(&mut self, v: ::std::string::String) {
        self.matrix = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_matrix(&mut self) -> &mut ::std::string::String {
        if self.matrix.is_none() {
            self.matrix = ::std::option::Option::Some(::std::string::String::new());
        }
        self.matrix.as_mut().unwrap()
    }

    // Take field
    pub fn take_matrix(&mut self) -> ::std::string::String {
        self.matrix.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string mnemonic = 4;

    pub fn mnemonic(&self) -> &str {
        match self.mnemonic.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_mnemonic(&mut self) {
        self.mnemonic = ::std::option::Option::None;
    }

    pub fn has_mnemonic(&self) -> bool {
        self.mnemonic.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mnemonic(&mut self, v: ::std::string::String) {
        self.mnemonic = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mnemonic(&mut self) -> &mut ::std::string::String {
        if self.mnemonic.is_none() {
            self.mnemonic = ::std::option::Option::Some(::std::string::String::new());
        }
        self.mnemonic.as_mut().unwrap()
    }

    // Take field
    pub fn take_mnemonic(&mut self) -> ::std::string::String {
        self.mnemonic.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool passphrase_protection = 6;

    pub fn passphrase_protection(&self) -> bool {
        self.passphrase_protection.unwrap_or(false)
    }

    pub fn clear_passphrase_protection(&mut self) {
        self.passphrase_protection = ::std::option::Option::None;
    }

    pub fn has_passphrase_protection(&self) -> bool {
        self.passphrase_protection.is_some()
    }

    // Param is passed by value, moved
    pub fn set_passphrase_protection(&mut self, v: bool) {
        self.passphrase_protection = ::std::option::Option::Some(v);
    }

    // optional string reset_word = 7;

    pub fn reset_word(&self) -> &str {
        match self.reset_word.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_reset_word(&mut self) {
        self.reset_word = ::std::option::Option::None;
    }

    pub fn has_reset_word(&self) -> bool {
        self.reset_word.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reset_word(&mut self, v: ::std::string::String) {
        self.reset_word = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reset_word(&mut self) -> &mut ::std::string::String {
        if self.reset_word.is_none() {
            self.reset_word = ::std::option::Option::Some(::std::string::String::new());
        }
        self.reset_word.as_mut().unwrap()
    }

    // Take field
    pub fn take_reset_word(&mut self) -> ::std::string::String {
        self.reset_word.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes reset_entropy = 8;

    pub fn reset_entropy(&self) -> &[u8] {
        match self.reset_entropy.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_reset_entropy(&mut self) {
        self.reset_entropy = ::std::option::Option::None;
    }

    pub fn has_reset_entropy(&self) -> bool {
        self.reset_entropy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reset_entropy(&mut self, v: ::std::vec::Vec<u8>) {
        self.reset_entropy = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reset_entropy(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.reset_entropy.is_none() {
            self.reset_entropy = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.reset_entropy.as_mut().unwrap()
    }

    // Take field
    pub fn take_reset_entropy(&mut self) -> ::std::vec::Vec<u8> {
        self.reset_entropy.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string recovery_fake_word = 9;

    pub fn recovery_fake_word(&self) -> &str {
        match self.recovery_fake_word.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_recovery_fake_word(&mut self) {
        self.recovery_fake_word = ::std::option::Option::None;
    }

    pub fn has_recovery_fake_word(&self) -> bool {
        self.recovery_fake_word.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recovery_fake_word(&mut self, v: ::std::string::String) {
        self.recovery_fake_word = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recovery_fake_word(&mut self) -> &mut ::std::string::String {
        if self.recovery_fake_word.is_none() {
            self.recovery_fake_word = ::std::option::Option::Some(::std::string::String::new());
        }
        self.recovery_fake_word.as_mut().unwrap()
    }

    // Take field
    pub fn take_recovery_fake_word(&mut self) -> ::std::string::String {
        self.recovery_fake_word.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 recovery_word_pos = 10;

    pub fn recovery_word_pos(&self) -> u32 {
        self.recovery_word_pos.unwrap_or(0)
    }

    pub fn clear_recovery_word_pos(&mut self) {
        self.recovery_word_pos = ::std::option::Option::None;
    }

    pub fn has_recovery_word_pos(&self) -> bool {
        self.recovery_word_pos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recovery_word_pos(&mut self, v: u32) {
        self.recovery_word_pos = ::std::option::Option::Some(v);
    }

    // optional uint32 reset_word_pos = 11;

    pub fn reset_word_pos(&self) -> u32 {
        self.reset_word_pos.unwrap_or(0)
    }

    pub fn clear_reset_word_pos(&mut self) {
        self.reset_word_pos = ::std::option::Option::None;
    }

    pub fn has_reset_word_pos(&self) -> bool {
        self.reset_word_pos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reset_word_pos(&mut self, v: u32) {
        self.reset_word_pos = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "layout",
            |m: &DebugLinkState| { &m.layout },
            |m: &mut DebugLinkState| { &mut m.layout },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "pin",
            |m: &DebugLinkState| { &m.pin },
            |m: &mut DebugLinkState| { &mut m.pin },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "matrix",
            |m: &DebugLinkState| { &m.matrix },
            |m: &mut DebugLinkState| { &mut m.matrix },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "mnemonic",
            |m: &DebugLinkState| { &m.mnemonic },
            |m: &mut DebugLinkState| { &mut m.mnemonic },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::messages_common::HDNodeType>(
            "node",
            |m: &DebugLinkState| { &m.node },
            |m: &mut DebugLinkState| { &mut m.node },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "passphrase_protection",
            |m: &DebugLinkState| { &m.passphrase_protection },
            |m: &mut DebugLinkState| { &mut m.passphrase_protection },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "reset_word",
            |m: &DebugLinkState| { &m.reset_word },
            |m: &mut DebugLinkState| { &mut m.reset_word },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "reset_entropy",
            |m: &DebugLinkState| { &m.reset_entropy },
            |m: &mut DebugLinkState| { &mut m.reset_entropy },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "recovery_fake_word",
            |m: &DebugLinkState| { &m.recovery_fake_word },
            |m: &mut DebugLinkState| { &mut m.recovery_fake_word },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "recovery_word_pos",
            |m: &DebugLinkState| { &m.recovery_word_pos },
            |m: &mut DebugLinkState| { &mut m.recovery_word_pos },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "reset_word_pos",
            |m: &DebugLinkState| { &m.reset_word_pos },
            |m: &mut DebugLinkState| { &mut m.reset_word_pos },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DebugLinkState>(
            "DebugLinkState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DebugLinkState {
    const NAME: &'static str = "DebugLinkState";

    fn is_initialized(&self) -> bool {
        for v in &self.node {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.layout = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.pin = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.matrix = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.mnemonic = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.node)?;
                },
                48 => {
                    self.passphrase_protection = ::std::option::Option::Some(is.read_bool()?);
                },
                58 => {
                    self.reset_word = ::std::option::Option::Some(is.read_string()?);
                },
                66 => {
                    self.reset_entropy = ::std::option::Option::Some(is.read_bytes()?);
                },
                74 => {
                    self.recovery_fake_word = ::std::option::Option::Some(is.read_string()?);
                },
                80 => {
                    self.recovery_word_pos = ::std::option::Option::Some(is.read_uint32()?);
                },
                88 => {
                    self.reset_word_pos = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.layout.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.pin.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.matrix.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.mnemonic.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.passphrase_protection {
            my_size += 1 + 1;
        }
        if let Some(v) = self.reset_word.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.reset_entropy.as_ref() {
            my_size += ::protobuf::rt::bytes_size(8, &v);
        }
        if let Some(v) = self.recovery_fake_word.as_ref() {
            my_size += ::protobuf::rt::string_size(9, &v);
        }
        if let Some(v) = self.recovery_word_pos {
            my_size += ::protobuf::rt::uint32_size(10, v);
        }
        if let Some(v) = self.reset_word_pos {
            my_size += ::protobuf::rt::uint32_size(11, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.layout.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.pin.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.matrix.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.mnemonic.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.node.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.passphrase_protection {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.reset_word.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.reset_entropy.as_ref() {
            os.write_bytes(8, v)?;
        }
        if let Some(v) = self.recovery_fake_word.as_ref() {
            os.write_string(9, v)?;
        }
        if let Some(v) = self.recovery_word_pos {
            os.write_uint32(10, v)?;
        }
        if let Some(v) = self.reset_word_pos {
            os.write_uint32(11, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DebugLinkState {
        DebugLinkState::new()
    }

    fn clear(&mut self) {
        self.layout = ::std::option::Option::None;
        self.pin = ::std::option::Option::None;
        self.matrix = ::std::option::Option::None;
        self.mnemonic = ::std::option::Option::None;
        self.node.clear();
        self.passphrase_protection = ::std::option::Option::None;
        self.reset_word = ::std::option::Option::None;
        self.reset_entropy = ::std::option::Option::None;
        self.recovery_fake_word = ::std::option::Option::None;
        self.recovery_word_pos = ::std::option::Option::None;
        self.reset_word_pos = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DebugLinkState {
        static instance: DebugLinkState = DebugLinkState {
            layout: ::std::option::Option::None,
            pin: ::std::option::Option::None,
            matrix: ::std::option::Option::None,
            mnemonic: ::std::option::Option::None,
            node: ::protobuf::MessageField::none(),
            passphrase_protection: ::std::option::Option::None,
            reset_word: ::std::option::Option::None,
            reset_entropy: ::std::option::Option::None,
            recovery_fake_word: ::std::option::Option::None,
            recovery_word_pos: ::std::option::Option::None,
            reset_word_pos: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DebugLinkState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DebugLinkState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DebugLinkState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DebugLinkState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: Ask device to restart
///  @start
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.debug.DebugLinkStop)
pub struct DebugLinkStop {
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.debug.DebugLinkStop.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DebugLinkStop {
    fn default() -> &'a DebugLinkStop {
        <DebugLinkStop as ::protobuf::Message>::default_instance()
    }
}

impl DebugLinkStop {
    pub fn new() -> DebugLinkStop {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DebugLinkStop>(
            "DebugLinkStop",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DebugLinkStop {
    const NAME: &'static str = "DebugLinkStop";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DebugLinkStop {
        DebugLinkStop::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DebugLinkStop {
        static instance: DebugLinkStop = DebugLinkStop {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DebugLinkStop {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DebugLinkStop").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DebugLinkStop {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DebugLinkStop {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Response: Device wants host to log event
///  @ignore
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.debug.DebugLinkLog)
pub struct DebugLinkLog {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.debug.DebugLinkLog.level)
    pub level: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.debug.DebugLinkLog.bucket)
    pub bucket: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.debug.DebugLinkLog.text)
    pub text: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.debug.DebugLinkLog.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DebugLinkLog {
    fn default() -> &'a DebugLinkLog {
        <DebugLinkLog as ::protobuf::Message>::default_instance()
    }
}

impl DebugLinkLog {
    pub fn new() -> DebugLinkLog {
        ::std::default::Default::default()
    }

    // optional uint32 level = 1;

    pub fn level(&self) -> u32 {
        self.level.unwrap_or(0)
    }

    pub fn clear_level(&mut self) {
        self.level = ::std::option::Option::None;
    }

    pub fn has_level(&self) -> bool {
        self.level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_level(&mut self, v: u32) {
        self.level = ::std::option::Option::Some(v);
    }

    // optional string bucket = 2;

    pub fn bucket(&self) -> &str {
        match self.bucket.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_bucket(&mut self) {
        self.bucket = ::std::option::Option::None;
    }

    pub fn has_bucket(&self) -> bool {
        self.bucket.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bucket(&mut self, v: ::std::string::String) {
        self.bucket = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bucket(&mut self) -> &mut ::std::string::String {
        if self.bucket.is_none() {
            self.bucket = ::std::option::Option::Some(::std::string::String::new());
        }
        self.bucket.as_mut().unwrap()
    }

    // Take field
    pub fn take_bucket(&mut self) -> ::std::string::String {
        self.bucket.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string text = 3;

    pub fn text(&self) -> &str {
        match self.text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_text(&mut self) {
        self.text = ::std::option::Option::None;
    }

    pub fn has_text(&self) -> bool {
        self.text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        if self.text.is_none() {
            self.text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.text.as_mut().unwrap()
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        self.text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "level",
            |m: &DebugLinkLog| { &m.level },
            |m: &mut DebugLinkLog| { &mut m.level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "bucket",
            |m: &DebugLinkLog| { &m.bucket },
            |m: &mut DebugLinkLog| { &mut m.bucket },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "text",
            |m: &DebugLinkLog| { &m.text },
            |m: &mut DebugLinkLog| { &mut m.text },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DebugLinkLog>(
            "DebugLinkLog",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DebugLinkLog {
    const NAME: &'static str = "DebugLinkLog";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.level = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.bucket = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.text = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.level {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.bucket.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.text.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.level {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.bucket.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.text.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DebugLinkLog {
        DebugLinkLog::new()
    }

    fn clear(&mut self) {
        self.level = ::std::option::Option::None;
        self.bucket = ::std::option::Option::None;
        self.text = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DebugLinkLog {
        static instance: DebugLinkLog = DebugLinkLog {
            level: ::std::option::Option::None,
            bucket: ::std::option::Option::None,
            text: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DebugLinkLog {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DebugLinkLog").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DebugLinkLog {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DebugLinkLog {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: Read memory from device
///  @start
///  @next DebugLinkMemory
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.debug.DebugLinkMemoryRead)
pub struct DebugLinkMemoryRead {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.debug.DebugLinkMemoryRead.address)
    pub address: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.debug.DebugLinkMemoryRead.length)
    pub length: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.debug.DebugLinkMemoryRead.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DebugLinkMemoryRead {
    fn default() -> &'a DebugLinkMemoryRead {
        <DebugLinkMemoryRead as ::protobuf::Message>::default_instance()
    }
}

impl DebugLinkMemoryRead {
    pub fn new() -> DebugLinkMemoryRead {
        ::std::default::Default::default()
    }

    // optional uint32 address = 1;

    pub fn address(&self) -> u32 {
        self.address.unwrap_or(0)
    }

    pub fn clear_address(&mut self) {
        self.address = ::std::option::Option::None;
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: u32) {
        self.address = ::std::option::Option::Some(v);
    }

    // optional uint32 length = 2;

    pub fn length(&self) -> u32 {
        self.length.unwrap_or(0)
    }

    pub fn clear_length(&mut self) {
        self.length = ::std::option::Option::None;
    }

    pub fn has_length(&self) -> bool {
        self.length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: u32) {
        self.length = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "address",
            |m: &DebugLinkMemoryRead| { &m.address },
            |m: &mut DebugLinkMemoryRead| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "length",
            |m: &DebugLinkMemoryRead| { &m.length },
            |m: &mut DebugLinkMemoryRead| { &mut m.length },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DebugLinkMemoryRead>(
            "DebugLinkMemoryRead",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DebugLinkMemoryRead {
    const NAME: &'static str = "DebugLinkMemoryRead";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.address = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.length = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.address {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.length {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.address {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.length {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DebugLinkMemoryRead {
        DebugLinkMemoryRead::new()
    }

    fn clear(&mut self) {
        self.address = ::std::option::Option::None;
        self.length = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DebugLinkMemoryRead {
        static instance: DebugLinkMemoryRead = DebugLinkMemoryRead {
            address: ::std::option::Option::None,
            length: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DebugLinkMemoryRead {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DebugLinkMemoryRead").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DebugLinkMemoryRead {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DebugLinkMemoryRead {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Response: Device sends memory back
///  @end
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.debug.DebugLinkMemory)
pub struct DebugLinkMemory {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.debug.DebugLinkMemory.memory)
    pub memory: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.debug.DebugLinkMemory.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DebugLinkMemory {
    fn default() -> &'a DebugLinkMemory {
        <DebugLinkMemory as ::protobuf::Message>::default_instance()
    }
}

impl DebugLinkMemory {
    pub fn new() -> DebugLinkMemory {
        ::std::default::Default::default()
    }

    // optional bytes memory = 1;

    pub fn memory(&self) -> &[u8] {
        match self.memory.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_memory(&mut self) {
        self.memory = ::std::option::Option::None;
    }

    pub fn has_memory(&self) -> bool {
        self.memory.is_some()
    }

    // Param is passed by value, moved
    pub fn set_memory(&mut self, v: ::std::vec::Vec<u8>) {
        self.memory = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_memory(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.memory.is_none() {
            self.memory = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.memory.as_mut().unwrap()
    }

    // Take field
    pub fn take_memory(&mut self) -> ::std::vec::Vec<u8> {
        self.memory.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "memory",
            |m: &DebugLinkMemory| { &m.memory },
            |m: &mut DebugLinkMemory| { &mut m.memory },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DebugLinkMemory>(
            "DebugLinkMemory",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DebugLinkMemory {
    const NAME: &'static str = "DebugLinkMemory";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.memory = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.memory.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.memory.as_ref() {
            os.write_bytes(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DebugLinkMemory {
        DebugLinkMemory::new()
    }

    fn clear(&mut self) {
        self.memory = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DebugLinkMemory {
        static instance: DebugLinkMemory = DebugLinkMemory {
            memory: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DebugLinkMemory {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DebugLinkMemory").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DebugLinkMemory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DebugLinkMemory {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: Write memory to device.
///  WARNING: Writing to the wrong location can irreparably break the device.
///  @start
///  @next Success
///  @next Failure
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.debug.DebugLinkMemoryWrite)
pub struct DebugLinkMemoryWrite {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.debug.DebugLinkMemoryWrite.address)
    pub address: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.debug.DebugLinkMemoryWrite.memory)
    pub memory: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.debug.DebugLinkMemoryWrite.flash)
    pub flash: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.debug.DebugLinkMemoryWrite.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DebugLinkMemoryWrite {
    fn default() -> &'a DebugLinkMemoryWrite {
        <DebugLinkMemoryWrite as ::protobuf::Message>::default_instance()
    }
}

impl DebugLinkMemoryWrite {
    pub fn new() -> DebugLinkMemoryWrite {
        ::std::default::Default::default()
    }

    // optional uint32 address = 1;

    pub fn address(&self) -> u32 {
        self.address.unwrap_or(0)
    }

    pub fn clear_address(&mut self) {
        self.address = ::std::option::Option::None;
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: u32) {
        self.address = ::std::option::Option::Some(v);
    }

    // optional bytes memory = 2;

    pub fn memory(&self) -> &[u8] {
        match self.memory.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_memory(&mut self) {
        self.memory = ::std::option::Option::None;
    }

    pub fn has_memory(&self) -> bool {
        self.memory.is_some()
    }

    // Param is passed by value, moved
    pub fn set_memory(&mut self, v: ::std::vec::Vec<u8>) {
        self.memory = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_memory(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.memory.is_none() {
            self.memory = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.memory.as_mut().unwrap()
    }

    // Take field
    pub fn take_memory(&mut self) -> ::std::vec::Vec<u8> {
        self.memory.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bool flash = 3;

    pub fn flash(&self) -> bool {
        self.flash.unwrap_or(false)
    }

    pub fn clear_flash(&mut self) {
        self.flash = ::std::option::Option::None;
    }

    pub fn has_flash(&self) -> bool {
        self.flash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flash(&mut self, v: bool) {
        self.flash = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "address",
            |m: &DebugLinkMemoryWrite| { &m.address },
            |m: &mut DebugLinkMemoryWrite| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "memory",
            |m: &DebugLinkMemoryWrite| { &m.memory },
            |m: &mut DebugLinkMemoryWrite| { &mut m.memory },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "flash",
            |m: &DebugLinkMemoryWrite| { &m.flash },
            |m: &mut DebugLinkMemoryWrite| { &mut m.flash },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DebugLinkMemoryWrite>(
            "DebugLinkMemoryWrite",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DebugLinkMemoryWrite {
    const NAME: &'static str = "DebugLinkMemoryWrite";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.address = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.memory = ::std::option::Option::Some(is.read_bytes()?);
                },
                24 => {
                    self.flash = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.address {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.memory.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.flash {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.address {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.memory.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.flash {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DebugLinkMemoryWrite {
        DebugLinkMemoryWrite::new()
    }

    fn clear(&mut self) {
        self.address = ::std::option::Option::None;
        self.memory = ::std::option::Option::None;
        self.flash = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DebugLinkMemoryWrite {
        static instance: DebugLinkMemoryWrite = DebugLinkMemoryWrite {
            address: ::std::option::Option::None,
            memory: ::std::option::Option::None,
            flash: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DebugLinkMemoryWrite {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DebugLinkMemoryWrite").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DebugLinkMemoryWrite {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DebugLinkMemoryWrite {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: Erase block of flash on device
///  WARNING: Writing to the wrong location can irreparably break the device.
///  @start
///  @next Success
///  @next Failure
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.debug.DebugLinkFlashErase)
pub struct DebugLinkFlashErase {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.debug.DebugLinkFlashErase.sector)
    pub sector: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.debug.DebugLinkFlashErase.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DebugLinkFlashErase {
    fn default() -> &'a DebugLinkFlashErase {
        <DebugLinkFlashErase as ::protobuf::Message>::default_instance()
    }
}

impl DebugLinkFlashErase {
    pub fn new() -> DebugLinkFlashErase {
        ::std::default::Default::default()
    }

    // optional uint32 sector = 1;

    pub fn sector(&self) -> u32 {
        self.sector.unwrap_or(0)
    }

    pub fn clear_sector(&mut self) {
        self.sector = ::std::option::Option::None;
    }

    pub fn has_sector(&self) -> bool {
        self.sector.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sector(&mut self, v: u32) {
        self.sector = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sector",
            |m: &DebugLinkFlashErase| { &m.sector },
            |m: &mut DebugLinkFlashErase| { &mut m.sector },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DebugLinkFlashErase>(
            "DebugLinkFlashErase",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DebugLinkFlashErase {
    const NAME: &'static str = "DebugLinkFlashErase";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.sector = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.sector {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.sector {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DebugLinkFlashErase {
        DebugLinkFlashErase::new()
    }

    fn clear(&mut self) {
        self.sector = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DebugLinkFlashErase {
        static instance: DebugLinkFlashErase = DebugLinkFlashErase {
            sector: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DebugLinkFlashErase {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DebugLinkFlashErase").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DebugLinkFlashErase {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DebugLinkFlashErase {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14messages-debug.proto\x12\x18hw.trezor.messages.debug\x1a\x15messag\
    es-common.proto\"Y\n\x11DebugLinkDecision\x12\x15\n\x06yes_no\x18\x01\
    \x20\x01(\x08R\x05yesNo\x12\x17\n\x07up_down\x18\x02\x20\x01(\x08R\x06up\
    Down\x12\x14\n\x05input\x18\x03\x20\x01(\tR\x05input\"\x13\n\x11DebugLin\
    kGetState\"\xa2\x03\n\x0eDebugLinkState\x12\x16\n\x06layout\x18\x01\x20\
    \x01(\x0cR\x06layout\x12\x10\n\x03pin\x18\x02\x20\x01(\tR\x03pin\x12\x16\
    \n\x06matrix\x18\x03\x20\x01(\tR\x06matrix\x12\x1a\n\x08mnemonic\x18\x04\
    \x20\x01(\tR\x08mnemonic\x129\n\x04node\x18\x05\x20\x01(\x0b2%.hw.trezor\
    .messages.common.HDNodeTypeR\x04node\x123\n\x15passphrase_protection\x18\
    \x06\x20\x01(\x08R\x14passphraseProtection\x12\x1d\n\nreset_word\x18\x07\
    \x20\x01(\tR\tresetWord\x12#\n\rreset_entropy\x18\x08\x20\x01(\x0cR\x0cr\
    esetEntropy\x12,\n\x12recovery_fake_word\x18\t\x20\x01(\tR\x10recoveryFa\
    keWord\x12*\n\x11recovery_word_pos\x18\n\x20\x01(\rR\x0frecoveryWordPos\
    \x12$\n\x0ereset_word_pos\x18\x0b\x20\x01(\rR\x0cresetWordPos\"\x0f\n\rD\
    ebugLinkStop\"P\n\x0cDebugLinkLog\x12\x14\n\x05level\x18\x01\x20\x01(\rR\
    \x05level\x12\x16\n\x06bucket\x18\x02\x20\x01(\tR\x06bucket\x12\x12\n\
    \x04text\x18\x03\x20\x01(\tR\x04text\"G\n\x13DebugLinkMemoryRead\x12\x18\
    \n\x07address\x18\x01\x20\x01(\rR\x07address\x12\x16\n\x06length\x18\x02\
    \x20\x01(\rR\x06length\")\n\x0fDebugLinkMemory\x12\x16\n\x06memory\x18\
    \x01\x20\x01(\x0cR\x06memory\"^\n\x14DebugLinkMemoryWrite\x12\x18\n\x07a\
    ddress\x18\x01\x20\x01(\rR\x07address\x12\x16\n\x06memory\x18\x02\x20\
    \x01(\x0cR\x06memory\x12\x14\n\x05flash\x18\x03\x20\x01(\x08R\x05flash\"\
    -\n\x13DebugLinkFlashErase\x12\x16\n\x06sector\x18\x01\x20\x01(\rR\x06se\
    ctorB9\n#com.satoshilabs.trezor.lib.protobufB\x12TrezorMessageDebugJ\xf5\
    \x19\n\x06\x12\x04\0\0g\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\
    \x02\x12\x03\x01\0!\n\x08\n\x01\x08\x12\x03\x04\0<\n.\n\x02\x08\x01\x12\
    \x03\x04\0<\x1a#\x20Sugar\x20for\x20easier\x20handling\x20in\x20Java\n\n\
    \x08\n\x01\x08\x12\x03\x05\03\n\t\n\x02\x08\x08\x12\x03\x05\03\n\t\n\x02\
    \x03\0\x12\x03\x07\0\x1f\nP\n\x02\x04\0\x12\x04\x0e\0\x12\x01\x1aD*\n\
    \x20Request:\x20\"Press\"\x20the\x20button\x20on\x20the\x20device\n\x20@\
    start\n\x20@next\x20Success\n\n\n\n\x03\x04\0\x01\x12\x03\x0e\x08\x19\n5\
    \n\x04\x04\0\x02\0\x12\x03\x0f\x04\x1d\"(\x20true\x20for\x20\"Confirm\",\
    \x20false\x20for\x20\"Cancel\"\n\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x0f\
    \x04\x0c\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0f\r\x11\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03\x0f\x12\x18\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0f\
    \x1b\x1c\n8\n\x04\x04\0\x02\x01\x12\x03\x10\x04\x1e\"+\x20true\x20for\
    \x20scroll\x20up,\x20false\x20for\x20scroll\x20down\n\n\x0c\n\x05\x04\0\
    \x02\x01\x04\x12\x03\x10\x04\x0c\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\
    \x10\r\x11\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x10\x12\x19\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03\x10\x1c\x1d\n\x1d\n\x04\x04\0\x02\x02\x12\x03\
    \x11\x04\x1e\"\x10\x20keyboard\x20input\n\n\x0c\n\x05\x04\0\x02\x02\x04\
    \x12\x03\x11\x04\x0c\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x11\r\x13\n\
    \x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x11\x14\x19\n\x0c\n\x05\x04\0\x02\
    \x02\x03\x12\x03\x11\x1c\x1d\nU\n\x02\x04\x01\x12\x04\x19\0\x1a\x01\x1aI\
    *\n\x20Request:\x20Computer\x20asks\x20for\x20device\x20state\n\x20@star\
    t\n\x20@next\x20DebugLinkState\n\n\n\n\x03\x04\x01\x01\x12\x03\x19\x08\
    \x19\n4\n\x02\x04\x02\x12\x04\x20\0,\x01\x1a(*\n\x20Response:\x20Device\
    \x20current\x20state\n\x20@end\n\n\n\n\x03\x04\x02\x01\x12\x03\x20\x08\
    \x16\n$\n\x04\x04\x02\x02\0\x12\x03!\x04\x1e\"\x17\x20raw\x20buffer\x20o\
    f\x20display\n\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03!\x04\x0c\n\x0c\n\
    \x05\x04\x02\x02\0\x05\x12\x03!\r\x12\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x03!\x13\x19\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03!\x1c\x1d\n;\n\x04\
    \x04\x02\x02\x01\x12\x03\"\x04\x1c\".\x20current\x20PIN,\x20blank\x20if\
    \x20PIN\x20is\x20not\x20set/enabled\n\n\x0c\n\x05\x04\x02\x02\x01\x04\
    \x12\x03\"\x04\x0c\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\"\r\x13\n\x0c\
    \n\x05\x04\x02\x02\x01\x01\x12\x03\"\x14\x17\n\x0c\n\x05\x04\x02\x02\x01\
    \x03\x12\x03\"\x1a\x1b\n!\n\x04\x04\x02\x02\x02\x12\x03#\x04\x1f\"\x14\
    \x20current\x20PIN\x20matrix\n\n\x0c\n\x05\x04\x02\x02\x02\x04\x12\x03#\
    \x04\x0c\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03#\r\x13\n\x0c\n\x05\x04\
    \x02\x02\x02\x01\x12\x03#\x14\x1a\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\
    \x03#\x1d\x1e\n&\n\x04\x04\x02\x02\x03\x12\x03$\x04!\"\x19\x20current\
    \x20BIP-39\x20mnemonic\n\n\x0c\n\x05\x04\x02\x02\x03\x04\x12\x03$\x04\
    \x0c\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03$\r\x13\n\x0c\n\x05\x04\x02\
    \x02\x03\x01\x12\x03$\x14\x1c\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03$\
    \x1f\x20\n\"\n\x04\x04\x02\x02\x04\x12\x03%\x04;\"\x15\x20current\x20BIP\
    -32\x20node\n\n\x0c\n\x05\x04\x02\x02\x04\x04\x12\x03%\x04\x0c\n\x0c\n\
    \x05\x04\x02\x02\x04\x06\x12\x03%\r1\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\
    \x03%26\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03%9:\n;\n\x04\x04\x02\x02\
    \x05\x12\x03&\x04,\".\x20is\x20node/mnemonic\x20encrypted\x20using\x20pa\
    ssphrase?\n\n\x0c\n\x05\x04\x02\x02\x05\x04\x12\x03&\x04\x0c\n\x0c\n\x05\
    \x04\x02\x02\x05\x05\x12\x03&\r\x11\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\
    \x03&\x12'\n\x0c\n\x05\x04\x02\x02\x05\x03\x12\x03&*+\nA\n\x04\x04\x02\
    \x02\x06\x12\x03'\x04#\"4\x20word\x20on\x20device\x20display\x20during\
    \x20ResetDevice\x20workflow\n\n\x0c\n\x05\x04\x02\x02\x06\x04\x12\x03'\
    \x04\x0c\n\x0c\n\x05\x04\x02\x02\x06\x05\x12\x03'\r\x13\n\x0c\n\x05\x04\
    \x02\x02\x06\x01\x12\x03'\x14\x1e\n\x0c\n\x05\x04\x02\x02\x06\x03\x12\
    \x03'!\"\n:\n\x04\x04\x02\x02\x07\x12\x03(\x04%\"-\x20current\x20entropy\
    \x20during\x20ResetDevice\x20workflow\n\n\x0c\n\x05\x04\x02\x02\x07\x04\
    \x12\x03(\x04\x0c\n\x0c\n\x05\x04\x02\x02\x07\x05\x12\x03(\r\x12\n\x0c\n\
    \x05\x04\x02\x02\x07\x01\x12\x03(\x13\x20\n\x0c\n\x05\x04\x02\x02\x07\
    \x03\x12\x03(#$\nD\n\x04\x04\x02\x02\x08\x12\x03)\x04+\"7\x20(fake)\x20w\
    ord\x20on\x20display\x20during\x20RecoveryDevice\x20workflow\n\n\x0c\n\
    \x05\x04\x02\x02\x08\x04\x12\x03)\x04\x0c\n\x0c\n\x05\x04\x02\x02\x08\
    \x05\x12\x03)\r\x13\n\x0c\n\x05\x04\x02\x02\x08\x01\x12\x03)\x14&\n\x0c\
    \n\x05\x04\x02\x02\x08\x03\x12\x03))*\n\\\n\x04\x04\x02\x02\t\x12\x03*\
    \x04+\"O\x20index\x20of\x20mnemonic\x20word\x20the\x20device\x20is\x20ex\
    pecting\x20during\x20RecoveryDevice\x20workflow\n\n\x0c\n\x05\x04\x02\
    \x02\t\x04\x12\x03*\x04\x0c\n\x0c\n\x05\x04\x02\x02\t\x05\x12\x03*\r\x13\
    \n\x0c\n\x05\x04\x02\x02\t\x01\x12\x03*\x14%\n\x0c\n\x05\x04\x02\x02\t\
    \x03\x12\x03*(*\nY\n\x04\x04\x02\x02\n\x12\x03+\x04(\"L\x20index\x20of\
    \x20mnemonic\x20word\x20the\x20device\x20is\x20expecting\x20during\x20Re\
    setDevice\x20workflow\n\n\x0c\n\x05\x04\x02\x02\n\x04\x12\x03+\x04\x0c\n\
    \x0c\n\x05\x04\x02\x02\n\x05\x12\x03+\r\x13\n\x0c\n\x05\x04\x02\x02\n\
    \x01\x12\x03+\x14\"\n\x0c\n\x05\x04\x02\x02\n\x03\x12\x03+%'\n6\n\x02\
    \x04\x03\x12\x042\03\x01\x1a**\n\x20Request:\x20Ask\x20device\x20to\x20r\
    estart\n\x20@start\n\n\n\n\x03\x04\x03\x01\x12\x032\x08\x15\nA\n\x02\x04\
    \x04\x12\x049\0=\x01\x1a5*\n\x20Response:\x20Device\x20wants\x20host\x20\
    to\x20log\x20event\n\x20@ignore\n\n\n\n\x03\x04\x04\x01\x12\x039\x08\x14\
    \n\x0b\n\x04\x04\x04\x02\0\x12\x03:\x04\x1e\n\x0c\n\x05\x04\x04\x02\0\
    \x04\x12\x03:\x04\x0c\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03:\r\x13\n\x0c\
    \n\x05\x04\x04\x02\0\x01\x12\x03:\x14\x19\n\x0c\n\x05\x04\x04\x02\0\x03\
    \x12\x03:\x1c\x1d\n\x0b\n\x04\x04\x04\x02\x01\x12\x03;\x04\x1f\n\x0c\n\
    \x05\x04\x04\x02\x01\x04\x12\x03;\x04\x0c\n\x0c\n\x05\x04\x04\x02\x01\
    \x05\x12\x03;\r\x13\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03;\x14\x1a\n\
    \x0c\n\x05\x04\x04\x02\x01\x03\x12\x03;\x1d\x1e\n\x0b\n\x04\x04\x04\x02\
    \x02\x12\x03<\x04\x1d\n\x0c\n\x05\x04\x04\x02\x02\x04\x12\x03<\x04\x0c\n\
    \x0c\n\x05\x04\x04\x02\x02\x05\x12\x03<\r\x13\n\x0c\n\x05\x04\x04\x02\
    \x02\x01\x12\x03<\x14\x18\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03<\x1b\
    \x1c\nO\n\x02\x04\x05\x12\x04D\0G\x01\x1aC*\n\x20Request:\x20Read\x20mem\
    ory\x20from\x20device\n\x20@start\n\x20@next\x20DebugLinkMemory\n\n\n\n\
    \x03\x04\x05\x01\x12\x03D\x08\x1b\n\x0b\n\x04\x04\x05\x02\0\x12\x03E\x04\
    \x20\n\x0c\n\x05\x04\x05\x02\0\x04\x12\x03E\x04\x0c\n\x0c\n\x05\x04\x05\
    \x02\0\x05\x12\x03E\r\x13\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03E\x14\x1b\
    \n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03E\x1e\x1f\n\x0b\n\x04\x04\x05\x02\
    \x01\x12\x03F\x04\x1f\n\x0c\n\x05\x04\x05\x02\x01\x04\x12\x03F\x04\x0c\n\
    \x0c\n\x05\x04\x05\x02\x01\x05\x12\x03F\r\x13\n\x0c\n\x05\x04\x05\x02\
    \x01\x01\x12\x03F\x14\x1a\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03F\x1d\
    \x1e\n8\n\x02\x04\x06\x12\x04M\0O\x01\x1a,*\n\x20Response:\x20Device\x20\
    sends\x20memory\x20back\n\x20@end\n\n\n\n\x03\x04\x06\x01\x12\x03M\x08\
    \x17\n\x0b\n\x04\x04\x06\x02\0\x12\x03N\x04\x1e\n\x0c\n\x05\x04\x06\x02\
    \0\x04\x12\x03N\x04\x0c\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03N\r\x12\n\
    \x0c\n\x05\x04\x06\x02\0\x01\x12\x03N\x13\x19\n\x0c\n\x05\x04\x06\x02\0\
    \x03\x12\x03N\x1c\x1d\n\xa1\x01\n\x02\x04\x07\x12\x04X\0\\\x01\x1a\x94\
    \x01*\n\x20Request:\x20Write\x20memory\x20to\x20device.\n\x20WARNING:\
    \x20Writing\x20to\x20the\x20wrong\x20location\x20can\x20irreparably\x20b\
    reak\x20the\x20device.\n\x20@start\n\x20@next\x20Success\n\x20@next\x20F\
    ailure\n\n\n\n\x03\x04\x07\x01\x12\x03X\x08\x1c\n\x0b\n\x04\x04\x07\x02\
    \0\x12\x03Y\x04\x20\n\x0c\n\x05\x04\x07\x02\0\x04\x12\x03Y\x04\x0c\n\x0c\
    \n\x05\x04\x07\x02\0\x05\x12\x03Y\r\x13\n\x0c\n\x05\x04\x07\x02\0\x01\
    \x12\x03Y\x14\x1b\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03Y\x1e\x1f\n\x0b\n\
    \x04\x04\x07\x02\x01\x12\x03Z\x04\x1e\n\x0c\n\x05\x04\x07\x02\x01\x04\
    \x12\x03Z\x04\x0c\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x03Z\r\x12\n\x0c\n\
    \x05\x04\x07\x02\x01\x01\x12\x03Z\x13\x19\n\x0c\n\x05\x04\x07\x02\x01\
    \x03\x12\x03Z\x1c\x1d\n\x0b\n\x04\x04\x07\x02\x02\x12\x03[\x04\x1c\n\x0c\
    \n\x05\x04\x07\x02\x02\x04\x12\x03[\x04\x0c\n\x0c\n\x05\x04\x07\x02\x02\
    \x05\x12\x03[\r\x11\n\x0c\n\x05\x04\x07\x02\x02\x01\x12\x03[\x12\x17\n\
    \x0c\n\x05\x04\x07\x02\x02\x03\x12\x03[\x1a\x1b\n\xa8\x01\n\x02\x04\x08\
    \x12\x04e\0g\x01\x1a\x9b\x01*\n\x20Request:\x20Erase\x20block\x20of\x20f\
    lash\x20on\x20device\n\x20WARNING:\x20Writing\x20to\x20the\x20wrong\x20l\
    ocation\x20can\x20irreparably\x20break\x20the\x20device.\n\x20@start\n\
    \x20@next\x20Success\n\x20@next\x20Failure\n\n\n\n\x03\x04\x08\x01\x12\
    \x03e\x08\x1b\n\x0b\n\x04\x04\x08\x02\0\x12\x03f\x04\x1f\n\x0c\n\x05\x04\
    \x08\x02\0\x04\x12\x03f\x04\x0c\n\x0c\n\x05\x04\x08\x02\0\x05\x12\x03f\r\
    \x13\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03f\x14\x1a\n\x0c\n\x05\x04\x08\
    \x02\0\x03\x12\x03f\x1d\x1e\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::messages_common::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(9);
            messages.push(DebugLinkDecision::generated_message_descriptor_data());
            messages.push(DebugLinkGetState::generated_message_descriptor_data());
            messages.push(DebugLinkState::generated_message_descriptor_data());
            messages.push(DebugLinkStop::generated_message_descriptor_data());
            messages.push(DebugLinkLog::generated_message_descriptor_data());
            messages.push(DebugLinkMemoryRead::generated_message_descriptor_data());
            messages.push(DebugLinkMemory::generated_message_descriptor_data());
            messages.push(DebugLinkMemoryWrite::generated_message_descriptor_data());
            messages.push(DebugLinkFlashErase::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
