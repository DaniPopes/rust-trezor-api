// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `messages-cardano.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

/// *
///  Request: Ask device for Cardano address
///  @start
///  @next CardanoAddress
///  @next Failure
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.cardano.CardanoGetAddress)
pub struct CardanoGetAddress {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.cardano.CardanoGetAddress.address_n)
    pub address_n: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cardano.CardanoGetAddress.show_display)
    pub show_display: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.cardano.CardanoGetAddress.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CardanoGetAddress {
    fn default() -> &'a CardanoGetAddress {
        <CardanoGetAddress as ::protobuf::Message>::default_instance()
    }
}

impl CardanoGetAddress {
    pub fn new() -> CardanoGetAddress {
        ::std::default::Default::default()
    }

    // optional bool show_display = 2;

    pub fn show_display(&self) -> bool {
        self.show_display.unwrap_or(false)
    }

    pub fn clear_show_display(&mut self) {
        self.show_display = ::std::option::Option::None;
    }

    pub fn has_show_display(&self) -> bool {
        self.show_display.is_some()
    }

    // Param is passed by value, moved
    pub fn set_show_display(&mut self, v: bool) {
        self.show_display = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "address_n",
            |m: &CardanoGetAddress| { &m.address_n },
            |m: &mut CardanoGetAddress| { &mut m.address_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "show_display",
            |m: &CardanoGetAddress| { &m.show_display },
            |m: &mut CardanoGetAddress| { &mut m.show_display },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CardanoGetAddress>(
            "CardanoGetAddress",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CardanoGetAddress {
    const NAME: &'static str = "CardanoGetAddress";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                },
                8 => {
                    self.address_n.push(is.read_uint32()?);
                },
                16 => {
                    self.show_display = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.show_display {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.show_display {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CardanoGetAddress {
        CardanoGetAddress::new()
    }

    fn clear(&mut self) {
        self.address_n.clear();
        self.show_display = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CardanoGetAddress {
        static instance: CardanoGetAddress = CardanoGetAddress {
            address_n: ::std::vec::Vec::new(),
            show_display: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CardanoGetAddress {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CardanoGetAddress").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CardanoGetAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoGetAddress {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: Ask device for Cardano address
///  @end
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.cardano.CardanoAddress)
pub struct CardanoAddress {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.cardano.CardanoAddress.address)
    pub address: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.cardano.CardanoAddress.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CardanoAddress {
    fn default() -> &'a CardanoAddress {
        <CardanoAddress as ::protobuf::Message>::default_instance()
    }
}

impl CardanoAddress {
    pub fn new() -> CardanoAddress {
        ::std::default::Default::default()
    }

    // optional string address = 1;

    pub fn address(&self) -> &str {
        match self.address.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_address(&mut self) {
        self.address = ::std::option::Option::None;
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        if self.address.is_none() {
            self.address = ::std::option::Option::Some(::std::string::String::new());
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        self.address.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "address",
            |m: &CardanoAddress| { &m.address },
            |m: &mut CardanoAddress| { &mut m.address },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CardanoAddress>(
            "CardanoAddress",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CardanoAddress {
    const NAME: &'static str = "CardanoAddress";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.address = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.address.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.address.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CardanoAddress {
        CardanoAddress::new()
    }

    fn clear(&mut self) {
        self.address = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CardanoAddress {
        static instance: CardanoAddress = CardanoAddress {
            address: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CardanoAddress {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CardanoAddress").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CardanoAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoAddress {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: Ask device for public key corresponding to address_n path
///  @start
///  @next CardanoPublicKey
///  @next Failure
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.cardano.CardanoGetPublicKey)
pub struct CardanoGetPublicKey {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.cardano.CardanoGetPublicKey.address_n)
    pub address_n: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cardano.CardanoGetPublicKey.show_display)
    pub show_display: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.cardano.CardanoGetPublicKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CardanoGetPublicKey {
    fn default() -> &'a CardanoGetPublicKey {
        <CardanoGetPublicKey as ::protobuf::Message>::default_instance()
    }
}

impl CardanoGetPublicKey {
    pub fn new() -> CardanoGetPublicKey {
        ::std::default::Default::default()
    }

    // optional bool show_display = 2;

    pub fn show_display(&self) -> bool {
        self.show_display.unwrap_or(false)
    }

    pub fn clear_show_display(&mut self) {
        self.show_display = ::std::option::Option::None;
    }

    pub fn has_show_display(&self) -> bool {
        self.show_display.is_some()
    }

    // Param is passed by value, moved
    pub fn set_show_display(&mut self, v: bool) {
        self.show_display = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "address_n",
            |m: &CardanoGetPublicKey| { &m.address_n },
            |m: &mut CardanoGetPublicKey| { &mut m.address_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "show_display",
            |m: &CardanoGetPublicKey| { &m.show_display },
            |m: &mut CardanoGetPublicKey| { &mut m.show_display },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CardanoGetPublicKey>(
            "CardanoGetPublicKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CardanoGetPublicKey {
    const NAME: &'static str = "CardanoGetPublicKey";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                },
                8 => {
                    self.address_n.push(is.read_uint32()?);
                },
                16 => {
                    self.show_display = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.show_display {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.show_display {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CardanoGetPublicKey {
        CardanoGetPublicKey::new()
    }

    fn clear(&mut self) {
        self.address_n.clear();
        self.show_display = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CardanoGetPublicKey {
        static instance: CardanoGetPublicKey = CardanoGetPublicKey {
            address_n: ::std::vec::Vec::new(),
            show_display: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CardanoGetPublicKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CardanoGetPublicKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CardanoGetPublicKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoGetPublicKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Response: Contains public key derived from device private seed
///  @end
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.cardano.CardanoPublicKey)
pub struct CardanoPublicKey {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.cardano.CardanoPublicKey.xpub)
    pub xpub: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cardano.CardanoPublicKey.node)
    pub node: ::protobuf::MessageField<super::messages_common::HDNodeType>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.cardano.CardanoPublicKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CardanoPublicKey {
    fn default() -> &'a CardanoPublicKey {
        <CardanoPublicKey as ::protobuf::Message>::default_instance()
    }
}

impl CardanoPublicKey {
    pub fn new() -> CardanoPublicKey {
        ::std::default::Default::default()
    }

    // optional string xpub = 1;

    pub fn xpub(&self) -> &str {
        match self.xpub.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_xpub(&mut self) {
        self.xpub = ::std::option::Option::None;
    }

    pub fn has_xpub(&self) -> bool {
        self.xpub.is_some()
    }

    // Param is passed by value, moved
    pub fn set_xpub(&mut self, v: ::std::string::String) {
        self.xpub = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_xpub(&mut self) -> &mut ::std::string::String {
        if self.xpub.is_none() {
            self.xpub = ::std::option::Option::Some(::std::string::String::new());
        }
        self.xpub.as_mut().unwrap()
    }

    // Take field
    pub fn take_xpub(&mut self) -> ::std::string::String {
        self.xpub.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "xpub",
            |m: &CardanoPublicKey| { &m.xpub },
            |m: &mut CardanoPublicKey| { &mut m.xpub },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::messages_common::HDNodeType>(
            "node",
            |m: &CardanoPublicKey| { &m.node },
            |m: &mut CardanoPublicKey| { &mut m.node },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CardanoPublicKey>(
            "CardanoPublicKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CardanoPublicKey {
    const NAME: &'static str = "CardanoPublicKey";

    fn is_initialized(&self) -> bool {
        for v in &self.node {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.xpub = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.node)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.xpub.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.xpub.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.node.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CardanoPublicKey {
        CardanoPublicKey::new()
    }

    fn clear(&mut self) {
        self.xpub = ::std::option::Option::None;
        self.node.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CardanoPublicKey {
        static instance: CardanoPublicKey = CardanoPublicKey {
            xpub: ::std::option::Option::None,
            node: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CardanoPublicKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CardanoPublicKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CardanoPublicKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoPublicKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: Ask device to sign Cardano transaction
///  @start
///  @next CardanoSignedTx
///  @next CardanoTxRequest
///  @next Failure
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.cardano.CardanoSignTx)
pub struct CardanoSignTx {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.cardano.CardanoSignTx.inputs)
    pub inputs: ::std::vec::Vec<cardano_sign_tx::CardanoTxInputType>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cardano.CardanoSignTx.outputs)
    pub outputs: ::std::vec::Vec<cardano_sign_tx::CardanoTxOutputType>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cardano.CardanoSignTx.transactions_count)
    pub transactions_count: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cardano.CardanoSignTx.network)
    pub network: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.cardano.CardanoSignTx.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CardanoSignTx {
    fn default() -> &'a CardanoSignTx {
        <CardanoSignTx as ::protobuf::Message>::default_instance()
    }
}

impl CardanoSignTx {
    pub fn new() -> CardanoSignTx {
        ::std::default::Default::default()
    }

    // optional uint32 transactions_count = 3;

    pub fn transactions_count(&self) -> u32 {
        self.transactions_count.unwrap_or(0)
    }

    pub fn clear_transactions_count(&mut self) {
        self.transactions_count = ::std::option::Option::None;
    }

    pub fn has_transactions_count(&self) -> bool {
        self.transactions_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transactions_count(&mut self, v: u32) {
        self.transactions_count = ::std::option::Option::Some(v);
    }

    // optional uint32 network = 4;

    pub fn network(&self) -> u32 {
        self.network.unwrap_or(0)
    }

    pub fn clear_network(&mut self) {
        self.network = ::std::option::Option::None;
    }

    pub fn has_network(&self) -> bool {
        self.network.is_some()
    }

    // Param is passed by value, moved
    pub fn set_network(&mut self, v: u32) {
        self.network = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "inputs",
            |m: &CardanoSignTx| { &m.inputs },
            |m: &mut CardanoSignTx| { &mut m.inputs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "outputs",
            |m: &CardanoSignTx| { &m.outputs },
            |m: &mut CardanoSignTx| { &mut m.outputs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "transactions_count",
            |m: &CardanoSignTx| { &m.transactions_count },
            |m: &mut CardanoSignTx| { &mut m.transactions_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "network",
            |m: &CardanoSignTx| { &m.network },
            |m: &mut CardanoSignTx| { &mut m.network },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CardanoSignTx>(
            "CardanoSignTx",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CardanoSignTx {
    const NAME: &'static str = "CardanoSignTx";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.inputs.push(is.read_message()?);
                },
                18 => {
                    self.outputs.push(is.read_message()?);
                },
                24 => {
                    self.transactions_count = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.network = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.inputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.outputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.transactions_count {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.network {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.inputs {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.outputs {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.transactions_count {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.network {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CardanoSignTx {
        CardanoSignTx::new()
    }

    fn clear(&mut self) {
        self.inputs.clear();
        self.outputs.clear();
        self.transactions_count = ::std::option::Option::None;
        self.network = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CardanoSignTx {
        static instance: CardanoSignTx = CardanoSignTx {
            inputs: ::std::vec::Vec::new(),
            outputs: ::std::vec::Vec::new(),
            transactions_count: ::std::option::Option::None,
            network: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CardanoSignTx {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CardanoSignTx").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CardanoSignTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoSignTx {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CardanoSignTx`
pub mod cardano_sign_tx {
    /// *
    ///  Structure representing cardano transaction input
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:hw.trezor.messages.cardano.CardanoSignTx.CardanoTxInputType)
    pub struct CardanoTxInputType {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.cardano.CardanoSignTx.CardanoTxInputType.address_n)
        pub address_n: ::std::vec::Vec<u32>,
        // @@protoc_insertion_point(field:hw.trezor.messages.cardano.CardanoSignTx.CardanoTxInputType.prev_hash)
        pub prev_hash: ::std::option::Option<::std::vec::Vec<u8>>,
        // @@protoc_insertion_point(field:hw.trezor.messages.cardano.CardanoSignTx.CardanoTxInputType.prev_index)
        pub prev_index: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:hw.trezor.messages.cardano.CardanoSignTx.CardanoTxInputType.type)
        pub type_: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.cardano.CardanoSignTx.CardanoTxInputType.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a CardanoTxInputType {
        fn default() -> &'a CardanoTxInputType {
            <CardanoTxInputType as ::protobuf::Message>::default_instance()
        }
    }

    impl CardanoTxInputType {
        pub fn new() -> CardanoTxInputType {
            ::std::default::Default::default()
        }

        // optional bytes prev_hash = 2;

        pub fn prev_hash(&self) -> &[u8] {
            match self.prev_hash.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_prev_hash(&mut self) {
            self.prev_hash = ::std::option::Option::None;
        }

        pub fn has_prev_hash(&self) -> bool {
            self.prev_hash.is_some()
        }

        // Param is passed by value, moved
        pub fn set_prev_hash(&mut self, v: ::std::vec::Vec<u8>) {
            self.prev_hash = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_prev_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.prev_hash.is_none() {
                self.prev_hash = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.prev_hash.as_mut().unwrap()
        }

        // Take field
        pub fn take_prev_hash(&mut self) -> ::std::vec::Vec<u8> {
            self.prev_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        // optional uint32 prev_index = 3;

        pub fn prev_index(&self) -> u32 {
            self.prev_index.unwrap_or(0)
        }

        pub fn clear_prev_index(&mut self) {
            self.prev_index = ::std::option::Option::None;
        }

        pub fn has_prev_index(&self) -> bool {
            self.prev_index.is_some()
        }

        // Param is passed by value, moved
        pub fn set_prev_index(&mut self, v: u32) {
            self.prev_index = ::std::option::Option::Some(v);
        }

        // optional uint32 type = 4;

        pub fn type_(&self) -> u32 {
            self.type_.unwrap_or(0)
        }

        pub fn clear_type_(&mut self) {
            self.type_ = ::std::option::Option::None;
        }

        pub fn has_type(&self) -> bool {
            self.type_.is_some()
        }

        // Param is passed by value, moved
        pub fn set_type(&mut self, v: u32) {
            self.type_ = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "address_n",
                |m: &CardanoTxInputType| { &m.address_n },
                |m: &mut CardanoTxInputType| { &mut m.address_n },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "prev_hash",
                |m: &CardanoTxInputType| { &m.prev_hash },
                |m: &mut CardanoTxInputType| { &mut m.prev_hash },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "prev_index",
                |m: &CardanoTxInputType| { &m.prev_index },
                |m: &mut CardanoTxInputType| { &mut m.prev_index },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "type",
                |m: &CardanoTxInputType| { &m.type_ },
                |m: &mut CardanoTxInputType| { &mut m.type_ },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CardanoTxInputType>(
                "CardanoSignTx.CardanoTxInputType",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for CardanoTxInputType {
        const NAME: &'static str = "CardanoTxInputType";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                    },
                    8 => {
                        self.address_n.push(is.read_uint32()?);
                    },
                    18 => {
                        self.prev_hash = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    24 => {
                        self.prev_index = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.type_ = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            for value in &self.address_n {
                my_size += ::protobuf::rt::uint32_size(1, *value);
            };
            if let Some(v) = self.prev_hash.as_ref() {
                my_size += ::protobuf::rt::bytes_size(2, &v);
            }
            if let Some(v) = self.prev_index {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.type_ {
                my_size += ::protobuf::rt::uint32_size(4, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            for v in &self.address_n {
                os.write_uint32(1, *v)?;
            };
            if let Some(v) = self.prev_hash.as_ref() {
                os.write_bytes(2, v)?;
            }
            if let Some(v) = self.prev_index {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.type_ {
                os.write_uint32(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> CardanoTxInputType {
            CardanoTxInputType::new()
        }

        fn clear(&mut self) {
            self.address_n.clear();
            self.prev_hash = ::std::option::Option::None;
            self.prev_index = ::std::option::Option::None;
            self.type_ = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static CardanoTxInputType {
            static instance: CardanoTxInputType = CardanoTxInputType {
                address_n: ::std::vec::Vec::new(),
                prev_hash: ::std::option::Option::None,
                prev_index: ::std::option::Option::None,
                type_: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for CardanoTxInputType {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CardanoSignTx.CardanoTxInputType").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for CardanoTxInputType {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for CardanoTxInputType {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// *
    ///  Structure representing cardano transaction output
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:hw.trezor.messages.cardano.CardanoSignTx.CardanoTxOutputType)
    pub struct CardanoTxOutputType {
        // message fields
        // @@protoc_insertion_point(field:hw.trezor.messages.cardano.CardanoSignTx.CardanoTxOutputType.address)
        pub address: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:hw.trezor.messages.cardano.CardanoSignTx.CardanoTxOutputType.address_n)
        pub address_n: ::std::vec::Vec<u32>,
        // @@protoc_insertion_point(field:hw.trezor.messages.cardano.CardanoSignTx.CardanoTxOutputType.amount)
        pub amount: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:hw.trezor.messages.cardano.CardanoSignTx.CardanoTxOutputType.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a CardanoTxOutputType {
        fn default() -> &'a CardanoTxOutputType {
            <CardanoTxOutputType as ::protobuf::Message>::default_instance()
        }
    }

    impl CardanoTxOutputType {
        pub fn new() -> CardanoTxOutputType {
            ::std::default::Default::default()
        }

        // optional string address = 1;

        pub fn address(&self) -> &str {
            match self.address.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_address(&mut self) {
            self.address = ::std::option::Option::None;
        }

        pub fn has_address(&self) -> bool {
            self.address.is_some()
        }

        // Param is passed by value, moved
        pub fn set_address(&mut self, v: ::std::string::String) {
            self.address = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_address(&mut self) -> &mut ::std::string::String {
            if self.address.is_none() {
                self.address = ::std::option::Option::Some(::std::string::String::new());
            }
            self.address.as_mut().unwrap()
        }

        // Take field
        pub fn take_address(&mut self) -> ::std::string::String {
            self.address.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint64 amount = 3;

        pub fn amount(&self) -> u64 {
            self.amount.unwrap_or(0)
        }

        pub fn clear_amount(&mut self) {
            self.amount = ::std::option::Option::None;
        }

        pub fn has_amount(&self) -> bool {
            self.amount.is_some()
        }

        // Param is passed by value, moved
        pub fn set_amount(&mut self, v: u64) {
            self.amount = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "address",
                |m: &CardanoTxOutputType| { &m.address },
                |m: &mut CardanoTxOutputType| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "address_n",
                |m: &CardanoTxOutputType| { &m.address_n },
                |m: &mut CardanoTxOutputType| { &mut m.address_n },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "amount",
                |m: &CardanoTxOutputType| { &m.amount },
                |m: &mut CardanoTxOutputType| { &mut m.amount },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CardanoTxOutputType>(
                "CardanoSignTx.CardanoTxOutputType",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for CardanoTxOutputType {
        const NAME: &'static str = "CardanoTxOutputType";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.address = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                    },
                    16 => {
                        self.address_n.push(is.read_uint32()?);
                    },
                    24 => {
                        self.amount = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.address.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            for value in &self.address_n {
                my_size += ::protobuf::rt::uint32_size(2, *value);
            };
            if let Some(v) = self.amount {
                my_size += ::protobuf::rt::uint64_size(3, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.address.as_ref() {
                os.write_string(1, v)?;
            }
            for v in &self.address_n {
                os.write_uint32(2, *v)?;
            };
            if let Some(v) = self.amount {
                os.write_uint64(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> CardanoTxOutputType {
            CardanoTxOutputType::new()
        }

        fn clear(&mut self) {
            self.address = ::std::option::Option::None;
            self.address_n.clear();
            self.amount = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static CardanoTxOutputType {
            static instance: CardanoTxOutputType = CardanoTxOutputType {
                address: ::std::option::Option::None,
                address_n: ::std::vec::Vec::new(),
                amount: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for CardanoTxOutputType {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CardanoSignTx.CardanoTxOutputType").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for CardanoTxOutputType {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for CardanoTxOutputType {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.cardano.CardanoTxRequest)
pub struct CardanoTxRequest {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.cardano.CardanoTxRequest.tx_index)
    pub tx_index: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cardano.CardanoTxRequest.tx_hash)
    pub tx_hash: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cardano.CardanoTxRequest.tx_body)
    pub tx_body: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.cardano.CardanoTxRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CardanoTxRequest {
    fn default() -> &'a CardanoTxRequest {
        <CardanoTxRequest as ::protobuf::Message>::default_instance()
    }
}

impl CardanoTxRequest {
    pub fn new() -> CardanoTxRequest {
        ::std::default::Default::default()
    }

    // optional uint32 tx_index = 1;

    pub fn tx_index(&self) -> u32 {
        self.tx_index.unwrap_or(0)
    }

    pub fn clear_tx_index(&mut self) {
        self.tx_index = ::std::option::Option::None;
    }

    pub fn has_tx_index(&self) -> bool {
        self.tx_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_index(&mut self, v: u32) {
        self.tx_index = ::std::option::Option::Some(v);
    }

    // optional bytes tx_hash = 2;

    pub fn tx_hash(&self) -> &[u8] {
        match self.tx_hash.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_tx_hash(&mut self) {
        self.tx_hash = ::std::option::Option::None;
    }

    pub fn has_tx_hash(&self) -> bool {
        self.tx_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.tx_hash = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.tx_hash.is_none() {
            self.tx_hash = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.tx_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.tx_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes tx_body = 3;

    pub fn tx_body(&self) -> &[u8] {
        match self.tx_body.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_tx_body(&mut self) {
        self.tx_body = ::std::option::Option::None;
    }

    pub fn has_tx_body(&self) -> bool {
        self.tx_body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.tx_body = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.tx_body.is_none() {
            self.tx_body = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.tx_body.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx_body(&mut self) -> ::std::vec::Vec<u8> {
        self.tx_body.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "tx_index",
            |m: &CardanoTxRequest| { &m.tx_index },
            |m: &mut CardanoTxRequest| { &mut m.tx_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "tx_hash",
            |m: &CardanoTxRequest| { &m.tx_hash },
            |m: &mut CardanoTxRequest| { &mut m.tx_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "tx_body",
            |m: &CardanoTxRequest| { &m.tx_body },
            |m: &mut CardanoTxRequest| { &mut m.tx_body },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CardanoTxRequest>(
            "CardanoTxRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CardanoTxRequest {
    const NAME: &'static str = "CardanoTxRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.tx_index = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.tx_hash = ::std::option::Option::Some(is.read_bytes()?);
                },
                26 => {
                    self.tx_body = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.tx_index {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.tx_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.tx_body.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.tx_index {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.tx_hash.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.tx_body.as_ref() {
            os.write_bytes(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CardanoTxRequest {
        CardanoTxRequest::new()
    }

    fn clear(&mut self) {
        self.tx_index = ::std::option::Option::None;
        self.tx_hash = ::std::option::Option::None;
        self.tx_body = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CardanoTxRequest {
        static instance: CardanoTxRequest = CardanoTxRequest {
            tx_index: ::std::option::Option::None,
            tx_hash: ::std::option::Option::None,
            tx_body: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CardanoTxRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CardanoTxRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CardanoTxRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoTxRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: Reported transaction data
///  @next CardanoSignedTx
///  @next CardanoTxRequest
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.cardano.CardanoTxAck)
pub struct CardanoTxAck {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.cardano.CardanoTxAck.transaction)
    pub transaction: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.cardano.CardanoTxAck.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CardanoTxAck {
    fn default() -> &'a CardanoTxAck {
        <CardanoTxAck as ::protobuf::Message>::default_instance()
    }
}

impl CardanoTxAck {
    pub fn new() -> CardanoTxAck {
        ::std::default::Default::default()
    }

    // optional bytes transaction = 1;

    pub fn transaction(&self) -> &[u8] {
        match self.transaction.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_transaction(&mut self) {
        self.transaction = ::std::option::Option::None;
    }

    pub fn has_transaction(&self) -> bool {
        self.transaction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.transaction.is_none() {
            self.transaction = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.transaction.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction(&mut self) -> ::std::vec::Vec<u8> {
        self.transaction.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "transaction",
            |m: &CardanoTxAck| { &m.transaction },
            |m: &mut CardanoTxAck| { &mut m.transaction },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CardanoTxAck>(
            "CardanoTxAck",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CardanoTxAck {
    const NAME: &'static str = "CardanoTxAck";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.transaction = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.transaction.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.transaction.as_ref() {
            os.write_bytes(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CardanoTxAck {
        CardanoTxAck::new()
    }

    fn clear(&mut self) {
        self.transaction = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CardanoTxAck {
        static instance: CardanoTxAck = CardanoTxAck {
            transaction: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CardanoTxAck {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CardanoTxAck").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CardanoTxAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoTxAck {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Response: Serialised signed cardano transaction
///  @end
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hw.trezor.messages.cardano.CardanoSignedTx)
pub struct CardanoSignedTx {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.cardano.CardanoSignedTx.tx_hash)
    pub tx_hash: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.cardano.CardanoSignedTx.tx_body)
    pub tx_body: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.cardano.CardanoSignedTx.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CardanoSignedTx {
    fn default() -> &'a CardanoSignedTx {
        <CardanoSignedTx as ::protobuf::Message>::default_instance()
    }
}

impl CardanoSignedTx {
    pub fn new() -> CardanoSignedTx {
        ::std::default::Default::default()
    }

    // optional bytes tx_hash = 1;

    pub fn tx_hash(&self) -> &[u8] {
        match self.tx_hash.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_tx_hash(&mut self) {
        self.tx_hash = ::std::option::Option::None;
    }

    pub fn has_tx_hash(&self) -> bool {
        self.tx_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.tx_hash = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.tx_hash.is_none() {
            self.tx_hash = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.tx_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.tx_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes tx_body = 2;

    pub fn tx_body(&self) -> &[u8] {
        match self.tx_body.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_tx_body(&mut self) {
        self.tx_body = ::std::option::Option::None;
    }

    pub fn has_tx_body(&self) -> bool {
        self.tx_body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.tx_body = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.tx_body.is_none() {
            self.tx_body = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.tx_body.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx_body(&mut self) -> ::std::vec::Vec<u8> {
        self.tx_body.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "tx_hash",
            |m: &CardanoSignedTx| { &m.tx_hash },
            |m: &mut CardanoSignedTx| { &mut m.tx_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "tx_body",
            |m: &CardanoSignedTx| { &m.tx_body },
            |m: &mut CardanoSignedTx| { &mut m.tx_body },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CardanoSignedTx>(
            "CardanoSignedTx",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CardanoSignedTx {
    const NAME: &'static str = "CardanoSignedTx";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.tx_hash = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.tx_body = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.tx_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.tx_body.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.tx_hash.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.tx_body.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CardanoSignedTx {
        CardanoSignedTx::new()
    }

    fn clear(&mut self) {
        self.tx_hash = ::std::option::Option::None;
        self.tx_body = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CardanoSignedTx {
        static instance: CardanoSignedTx = CardanoSignedTx {
            tx_hash: ::std::option::Option::None,
            tx_body: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CardanoSignedTx {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CardanoSignedTx").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CardanoSignedTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoSignedTx {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16messages-cardano.proto\x12\x1ahw.trezor.messages.cardano\x1a\x15me\
    ssages-common.proto\"S\n\x11CardanoGetAddress\x12\x1b\n\taddress_n\x18\
    \x01\x20\x03(\rR\x08addressN\x12!\n\x0cshow_display\x18\x02\x20\x01(\x08\
    R\x0bshowDisplay\"*\n\x0eCardanoAddress\x12\x18\n\x07address\x18\x01\x20\
    \x01(\tR\x07address\"U\n\x13CardanoGetPublicKey\x12\x1b\n\taddress_n\x18\
    \x01\x20\x03(\rR\x08addressN\x12!\n\x0cshow_display\x18\x02\x20\x01(\x08\
    R\x0bshowDisplay\"a\n\x10CardanoPublicKey\x12\x12\n\x04xpub\x18\x01\x20\
    \x01(\tR\x04xpub\x129\n\x04node\x18\x02\x20\x01(\x0b2%.hw.trezor.message\
    s.common.HDNodeTypeR\x04node\"\xf1\x03\n\rCardanoSignTx\x12T\n\x06inputs\
    \x18\x01\x20\x03(\x0b2<.hw.trezor.messages.cardano.CardanoSignTx.Cardano\
    TxInputTypeR\x06inputs\x12W\n\x07outputs\x18\x02\x20\x03(\x0b2=.hw.trezo\
    r.messages.cardano.CardanoSignTx.CardanoTxOutputTypeR\x07outputs\x12-\n\
    \x12transactions_count\x18\x03\x20\x01(\rR\x11transactionsCount\x12\x18\
    \n\x07network\x18\x04\x20\x01(\rR\x07network\x1a\x81\x01\n\x12CardanoTxI\
    nputType\x12\x1b\n\taddress_n\x18\x01\x20\x03(\rR\x08addressN\x12\x1b\n\
    \tprev_hash\x18\x02\x20\x01(\x0cR\x08prevHash\x12\x1d\n\nprev_index\x18\
    \x03\x20\x01(\rR\tprevIndex\x12\x12\n\x04type\x18\x04\x20\x01(\rR\x04typ\
    e\x1ad\n\x13CardanoTxOutputType\x12\x18\n\x07address\x18\x01\x20\x01(\tR\
    \x07address\x12\x1b\n\taddress_n\x18\x02\x20\x03(\rR\x08addressN\x12\x16\
    \n\x06amount\x18\x03\x20\x01(\x04R\x06amount\"_\n\x10CardanoTxRequest\
    \x12\x19\n\x08tx_index\x18\x01\x20\x01(\rR\x07txIndex\x12\x17\n\x07tx_ha\
    sh\x18\x02\x20\x01(\x0cR\x06txHash\x12\x17\n\x07tx_body\x18\x03\x20\x01(\
    \x0cR\x06txBody\"0\n\x0cCardanoTxAck\x12\x20\n\x0btransaction\x18\x01\
    \x20\x01(\x0cR\x0btransaction\"C\n\x0fCardanoSignedTx\x12\x17\n\x07tx_ha\
    sh\x18\x01\x20\x01(\x0cR\x06txHash\x12\x17\n\x07tx_body\x18\x02\x20\x01(\
    \x0cR\x06txBodyB;\n#com.satoshilabs.trezor.lib.protobufB\x14TrezorMessag\
    eCardanoJ\xb4\x1e\n\x06\x12\x04\0\0j\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\
    \n\x08\n\x01\x02\x12\x03\x01\0#\n\x08\n\x01\x08\x12\x03\x04\0<\n.\n\x02\
    \x08\x01\x12\x03\x04\0<\x1a#\x20Sugar\x20for\x20easier\x20handling\x20in\
    \x20Java\n\n\x08\n\x01\x08\x12\x03\x05\05\n\t\n\x02\x08\x08\x12\x03\x05\
    \05\n\t\n\x02\x03\0\x12\x03\x07\0\x1f\nd\n\x02\x04\0\x12\x04\x0f\0\x12\
    \x01\x1aX*\n\x20Request:\x20Ask\x20device\x20for\x20Cardano\x20address\n\
    \x20@start\n\x20@next\x20CardanoAddress\n\x20@next\x20Failure\n\n\n\n\
    \x03\x04\0\x01\x12\x03\x0f\x08\x19\nC\n\x04\x04\0\x02\0\x12\x03\x10\x04\
    \"\"6\x20BIP-32-style\x20path\x20to\x20derive\x20the\x20key\x20from\x20m\
    aster\x20node\n\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x10\x04\x0c\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03\x10\r\x13\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x10\x14\x1d\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x10\x20!\nC\n\x04\
    \x04\0\x02\x01\x12\x03\x11\x04#\"6\x20optionally\x20prompt\x20for\x20con\
    firmation\x20on\x20trezor\x20display\n\n\x0c\n\x05\x04\0\x02\x01\x04\x12\
    \x03\x11\x04\x0c\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x11\r\x11\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x11\x12\x1e\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x11!\"\n=\n\x02\x04\x01\x12\x04\x18\0\x1a\x01\x1a1*\n\x20Reques\
    t:\x20Ask\x20device\x20for\x20Cardano\x20address\n\x20@end\n\n\n\n\x03\
    \x04\x01\x01\x12\x03\x18\x08\x16\n%\n\x04\x04\x01\x02\0\x12\x03\x19\x04\
    \x20\"\x18\x20Base58\x20cardano\x20address\n\n\x0c\n\x05\x04\x01\x02\0\
    \x04\x12\x03\x19\x04\x0c\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x19\r\x13\
    \n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x19\x14\x1b\n\x0c\n\x05\x04\x01\
    \x02\0\x03\x12\x03\x19\x1e\x1f\n\x81\x01\n\x02\x04\x02\x12\x04\"\0%\x01\
    \x1au*\n\x20Request:\x20Ask\x20device\x20for\x20public\x20key\x20corresp\
    onding\x20to\x20address_n\x20path\n\x20@start\n\x20@next\x20CardanoPubli\
    cKey\n\x20@next\x20Failure\n\n\n\n\x03\x04\x02\x01\x12\x03\"\x08\x1b\n=\
    \n\x04\x04\x02\x02\0\x12\x03#\x04\"\"0\x20BIP-32\x20path\x20to\x20derive\
    \x20the\x20key\x20from\x20master\x20node\n\n\x0c\n\x05\x04\x02\x02\0\x04\
    \x12\x03#\x04\x0c\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03#\r\x13\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03#\x14\x1d\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03#\x20!\nC\n\x04\x04\x02\x02\x01\x12\x03$\x04#\"6\x20optionally\
    \x20show\x20on\x20display\x20before\x20sending\x20the\x20result\n\n\x0c\
    \n\x05\x04\x02\x02\x01\x04\x12\x03$\x04\x0c\n\x0c\n\x05\x04\x02\x02\x01\
    \x05\x12\x03$\r\x11\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03$\x12\x1e\n\
    \x0c\n\x05\x04\x02\x02\x01\x03\x12\x03$!\"\nT\n\x02\x04\x03\x12\x04+\0.\
    \x01\x1aH*\n\x20Response:\x20Contains\x20public\x20key\x20derived\x20fro\
    m\x20device\x20private\x20seed\n\x20@end\n\n\n\n\x03\x04\x03\x01\x12\x03\
    +\x08\x18\n\x17\n\x04\x04\x03\x02\0\x12\x03,\x04\x1d\"\n\x20Xpub\x20key\
    \n\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03,\x04\x0c\n\x0c\n\x05\x04\x03\
    \x02\0\x05\x12\x03,\r\x13\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03,\x14\x18\
    \n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03,\x1b\x1c\n!\n\x04\x04\x03\x02\x01\
    \x12\x03-\x04;\"\x14\x20BIP-32\x20public\x20node\n\n\x0c\n\x05\x04\x03\
    \x02\x01\x04\x12\x03-\x04\x0c\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03-\r\
    1\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03-26\n\x0c\n\x05\x04\x03\x02\x01\
    \x03\x12\x03-9:\n\x85\x01\n\x02\x04\x04\x12\x047\0M\x01\x1ay*\n\x20Reque\
    st:\x20Ask\x20device\x20to\x20sign\x20Cardano\x20transaction\n\x20@start\
    \n\x20@next\x20CardanoSignedTx\n\x20@next\x20CardanoTxRequest\n\x20@next\
    \x20Failure\n\n\n\n\x03\x04\x04\x01\x12\x037\x08\x15\n/\n\x04\x04\x04\
    \x02\0\x12\x038\x04+\"\"\x20inputs\x20to\x20be\x20used\x20in\x20transact\
    ion\n\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x038\x04\x0c\n\x0c\n\x05\x04\x04\
    \x02\0\x06\x12\x038\r\x1f\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x038\x20&\n\
    \x0c\n\x05\x04\x04\x02\0\x03\x12\x038)*\n0\n\x04\x04\x04\x02\x01\x12\x03\
    9\x04-\"#\x20outputs\x20to\x20be\x20used\x20in\x20transaction\n\n\x0c\n\
    \x05\x04\x04\x02\x01\x04\x12\x039\x04\x0c\n\x0c\n\x05\x04\x04\x02\x01\
    \x06\x12\x039\r\x20\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x039!(\n\x0c\n\
    \x05\x04\x04\x02\x01\x03\x12\x039+,\n!\n\x04\x04\x04\x02\x02\x12\x03:\
    \x04+\"\x14\x20transactions\x20count\n\n\x0c\n\x05\x04\x04\x02\x02\x04\
    \x12\x03:\x04\x0c\n\x0c\n\x05\x04\x04\x02\x02\x05\x12\x03:\r\x13\n\x0c\n\
    \x05\x04\x04\x02\x02\x01\x12\x03:\x14&\n\x0c\n\x05\x04\x04\x02\x02\x03\
    \x12\x03:)*\n\x1d\n\x04\x04\x04\x02\x03\x12\x03;\x04\x20\"\x10\x20networ\
    k\x20number\n\n\x0c\n\x05\x04\x04\x02\x03\x04\x12\x03;\x04\x0c\n\x0c\n\
    \x05\x04\x04\x02\x03\x05\x12\x03;\r\x13\n\x0c\n\x05\x04\x04\x02\x03\x01\
    \x12\x03;\x14\x1b\n\x0c\n\x05\x04\x04\x02\x03\x03\x12\x03;\x1e\x1f\nB\n\
    \x04\x04\x04\x03\0\x12\x04?\x04D\x05\x1a4*\n\x20Structure\x20representin\
    g\x20cardano\x20transaction\x20input\n\n\x0c\n\x05\x04\x04\x03\0\x01\x12\
    \x03?\x0c\x1e\n?\n\x06\x04\x04\x03\0\x02\0\x12\x03@\x08&\"0\x20BIP-32\
    \x20path\x20to\x20derive\x20the\x20key\x20from\x20master\x20node\n\n\x0e\
    \n\x07\x04\x04\x03\0\x02\0\x04\x12\x03@\x08\x10\n\x0e\n\x07\x04\x04\x03\
    \0\x02\0\x05\x12\x03@\x11\x17\n\x0e\n\x07\x04\x04\x03\0\x02\0\x01\x12\
    \x03@\x18!\n\x0e\n\x07\x04\x04\x03\0\x02\0\x03\x12\x03@$%\nK\n\x06\x04\
    \x04\x03\0\x02\x01\x12\x03A\x08%\"<\x20hash\x20of\x20previous\x20transac\
    tion\x20output\x20to\x20spend\x20by\x20this\x20input\n\n\x0e\n\x07\x04\
    \x04\x03\0\x02\x01\x04\x12\x03A\x08\x10\n\x0e\n\x07\x04\x04\x03\0\x02\
    \x01\x05\x12\x03A\x11\x16\n\x0e\n\x07\x04\x04\x03\0\x02\x01\x01\x12\x03A\
    \x17\x20\n\x0e\n\x07\x04\x04\x03\0\x02\x01\x03\x12\x03A#$\n2\n\x06\x04\
    \x04\x03\0\x02\x02\x12\x03B\x08'\"#\x20index\x20of\x20previous\x20output\
    \x20to\x20spend\n\n\x0e\n\x07\x04\x04\x03\0\x02\x02\x04\x12\x03B\x08\x10\
    \n\x0e\n\x07\x04\x04\x03\0\x02\x02\x05\x12\x03B\x11\x17\n\x0e\n\x07\x04\
    \x04\x03\0\x02\x02\x01\x12\x03B\x18\"\n\x0e\n\x07\x04\x04\x03\0\x02\x02\
    \x03\x12\x03B%&\n*\n\x06\x04\x04\x03\0\x02\x03\x12\x03C\x08!\"\x1b\x20in\
    put\x20type,\x20defaults\x20to\x200\n\n\x0e\n\x07\x04\x04\x03\0\x02\x03\
    \x04\x12\x03C\x08\x10\n\x0e\n\x07\x04\x04\x03\0\x02\x03\x05\x12\x03C\x11\
    \x17\n\x0e\n\x07\x04\x04\x03\0\x02\x03\x01\x12\x03C\x18\x1c\n\x0e\n\x07\
    \x04\x04\x03\0\x02\x03\x03\x12\x03C\x1f\x20\nC\n\x04\x04\x04\x03\x01\x12\
    \x04H\x04L\x05\x1a5*\n\x20Structure\x20representing\x20cardano\x20transa\
    ction\x20output\n\n\x0c\n\x05\x04\x04\x03\x01\x01\x12\x03H\x0c\x1f\n7\n\
    \x06\x04\x04\x03\x01\x02\0\x12\x03I\x08$\"(\x20target\x20coin\x20address\
    \x20in\x20Base58\x20encoding\n\n\x0e\n\x07\x04\x04\x03\x01\x02\0\x04\x12\
    \x03I\x08\x10\n\x0e\n\x07\x04\x04\x03\x01\x02\0\x05\x12\x03I\x11\x17\n\
    \x0e\n\x07\x04\x04\x03\x01\x02\0\x01\x12\x03I\x18\x1f\n\x0e\n\x07\x04\
    \x04\x03\x01\x02\0\x03\x12\x03I\"#\nc\n\x06\x04\x04\x03\x01\x02\x01\x12\
    \x03J\x08&\"T\x20BIP-32\x20path\x20to\x20derive\x20the\x20key\x20from\
    \x20master\x20node;\x20has\x20higher\x20priority\x20than\x20\"address\"\
    \n\n\x0e\n\x07\x04\x04\x03\x01\x02\x01\x04\x12\x03J\x08\x10\n\x0e\n\x07\
    \x04\x04\x03\x01\x02\x01\x05\x12\x03J\x11\x17\n\x0e\n\x07\x04\x04\x03\
    \x01\x02\x01\x01\x12\x03J\x18!\n\x0e\n\x07\x04\x04\x03\x01\x02\x01\x03\
    \x12\x03J$%\n\x20\n\x06\x04\x04\x03\x01\x02\x02\x12\x03K\x08#\"\x11\x20a\
    mount\x20to\x20spend\n\n\x0e\n\x07\x04\x04\x03\x01\x02\x02\x04\x12\x03K\
    \x08\x10\n\x0e\n\x07\x04\x04\x03\x01\x02\x02\x05\x12\x03K\x11\x17\n\x0e\
    \n\x07\x04\x04\x03\x01\x02\x02\x01\x12\x03K\x18\x1e\n\x0e\n\x07\x04\x04\
    \x03\x01\x02\x02\x03\x12\x03K!\"\n\xbb\x01\n\x02\x04\x05\x12\x04T\0X\x01\
    \x1a\xae\x01*\n\x20Response:\x20Serialised\x20signed\x20cardano\x20trans\
    action\x20if\x20tx_index\x20is\x20not\x20specified.\n\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20If\x20tx_index\x20is\x20specifie\
    d,\x20trezor\x20will\x20wait\x20for\x20transaction\n\x20@next\x20Cardano\
    TxAck\n\n\n\n\x03\x04\x05\x01\x12\x03T\x08\x18\n-\n\x04\x04\x05\x02\0\
    \x12\x03U\x04!\"\x20\x20index\x20of\x20requested\x20transaction\n\n\x0c\
    \n\x05\x04\x05\x02\0\x04\x12\x03U\x04\x0c\n\x0c\n\x05\x04\x05\x02\0\x05\
    \x12\x03U\r\x13\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03U\x14\x1c\n\x0c\n\
    \x05\x04\x05\x02\0\x03\x12\x03U\x1f\x20\n-\n\x04\x04\x05\x02\x01\x12\x03\
    V\x04\x1f\"\x20\x20hash\x20of\x20the\x20signed\x20transaction\n\n\x0c\n\
    \x05\x04\x05\x02\x01\x04\x12\x03V\x04\x0c\n\x0c\n\x05\x04\x05\x02\x01\
    \x05\x12\x03V\r\x12\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03V\x13\x1a\n\
    \x0c\n\x05\x04\x05\x02\x01\x03\x12\x03V\x1d\x1e\n8\n\x04\x04\x05\x02\x02\
    \x12\x03W\x04\x1f\"+\x20serialised\x20body\x20of\x20the\x20signed\x20tra\
    nsaction\n\n\x0c\n\x05\x04\x05\x02\x02\x04\x12\x03W\x04\x0c\n\x0c\n\x05\
    \x04\x05\x02\x02\x05\x12\x03W\r\x12\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\
    \x03W\x13\x1a\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03W\x1d\x1e\na\n\x02\
    \x04\x06\x12\x04_\0a\x01\x1aU*\n\x20Request:\x20Reported\x20transaction\
    \x20data\n\x20@next\x20CardanoSignedTx\n\x20@next\x20CardanoTxRequest\n\
    \n\n\n\x03\x04\x06\x01\x12\x03_\x08\x14\n\x0b\n\x04\x04\x06\x02\0\x12\
    \x03`\x04#\n\x0c\n\x05\x04\x06\x02\0\x04\x12\x03`\x04\x0c\n\x0c\n\x05\
    \x04\x06\x02\0\x05\x12\x03`\r\x12\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03`\
    \x13\x1e\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03`!\"\nE\n\x02\x04\x07\x12\
    \x04g\0j\x01\x1a9*\n\x20Response:\x20Serialised\x20signed\x20cardano\x20\
    transaction\n\x20@end\n\n\n\n\x03\x04\x07\x01\x12\x03g\x08\x17\n-\n\x04\
    \x04\x07\x02\0\x12\x03h\x04\x1f\"\x20\x20hash\x20of\x20the\x20signed\x20\
    transaction\n\n\x0c\n\x05\x04\x07\x02\0\x04\x12\x03h\x04\x0c\n\x0c\n\x05\
    \x04\x07\x02\0\x05\x12\x03h\r\x12\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03h\
    \x13\x1a\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03h\x1d\x1e\n8\n\x04\x04\x07\
    \x02\x01\x12\x03i\x04\x1f\"+\x20serialised\x20body\x20of\x20the\x20signe\
    d\x20transaction\n\n\x0c\n\x05\x04\x07\x02\x01\x04\x12\x03i\x04\x0c\n\
    \x0c\n\x05\x04\x07\x02\x01\x05\x12\x03i\r\x12\n\x0c\n\x05\x04\x07\x02\
    \x01\x01\x12\x03i\x13\x1a\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03i\x1d\
    \x1e\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::messages_common::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(10);
            messages.push(CardanoGetAddress::generated_message_descriptor_data());
            messages.push(CardanoAddress::generated_message_descriptor_data());
            messages.push(CardanoGetPublicKey::generated_message_descriptor_data());
            messages.push(CardanoPublicKey::generated_message_descriptor_data());
            messages.push(CardanoSignTx::generated_message_descriptor_data());
            messages.push(CardanoTxRequest::generated_message_descriptor_data());
            messages.push(CardanoTxAck::generated_message_descriptor_data());
            messages.push(CardanoSignedTx::generated_message_descriptor_data());
            messages.push(cardano_sign_tx::CardanoTxInputType::generated_message_descriptor_data());
            messages.push(cardano_sign_tx::CardanoTxOutputType::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
