// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `messages-tron.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

/// *
///  Request: Ask device for Tron address corresponding to address_n path
///  @next PassphraseRequest
///  @next TronAddress
///  @next Failure
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:TronGetAddress)
pub struct TronGetAddress {
    // message fields
    // @@protoc_insertion_point(field:TronGetAddress.address_n)
    pub address_n: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:TronGetAddress.show_display)
    pub show_display: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:TronGetAddress.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TronGetAddress {
    fn default() -> &'a TronGetAddress {
        <TronGetAddress as ::protobuf::Message>::default_instance()
    }
}

impl TronGetAddress {
    pub fn new() -> TronGetAddress {
        ::std::default::Default::default()
    }

    // optional bool show_display = 2;

    pub fn show_display(&self) -> bool {
        self.show_display.unwrap_or(false)
    }

    pub fn clear_show_display(&mut self) {
        self.show_display = ::std::option::Option::None;
    }

    pub fn has_show_display(&self) -> bool {
        self.show_display.is_some()
    }

    // Param is passed by value, moved
    pub fn set_show_display(&mut self, v: bool) {
        self.show_display = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "address_n",
            |m: &TronGetAddress| { &m.address_n },
            |m: &mut TronGetAddress| { &mut m.address_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "show_display",
            |m: &TronGetAddress| { &m.show_display },
            |m: &mut TronGetAddress| { &mut m.show_display },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TronGetAddress>(
            "TronGetAddress",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TronGetAddress {
    const NAME: &'static str = "TronGetAddress";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                },
                8 => {
                    self.address_n.push(is.read_uint32()?);
                },
                16 => {
                    self.show_display = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.show_display {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.show_display {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TronGetAddress {
        TronGetAddress::new()
    }

    fn clear(&mut self) {
        self.address_n.clear();
        self.show_display = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TronGetAddress {
        static instance: TronGetAddress = TronGetAddress {
            address_n: ::std::vec::Vec::new(),
            show_display: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TronGetAddress {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TronGetAddress").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TronGetAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TronGetAddress {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Response: Contains Tron address derived from device private seed
///  @prev TronGetAddress
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:TronAddress)
pub struct TronAddress {
    // message fields
    // @@protoc_insertion_point(field:TronAddress.address)
    pub address: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:TronAddress.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TronAddress {
    fn default() -> &'a TronAddress {
        <TronAddress as ::protobuf::Message>::default_instance()
    }
}

impl TronAddress {
    pub fn new() -> TronAddress {
        ::std::default::Default::default()
    }

    // optional string address = 1;

    pub fn address(&self) -> &str {
        match self.address.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_address(&mut self) {
        self.address = ::std::option::Option::None;
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        if self.address.is_none() {
            self.address = ::std::option::Option::Some(::std::string::String::new());
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        self.address.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "address",
            |m: &TronAddress| { &m.address },
            |m: &mut TronAddress| { &mut m.address },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TronAddress>(
            "TronAddress",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TronAddress {
    const NAME: &'static str = "TronAddress";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.address = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.address.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.address.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TronAddress {
        TronAddress::new()
    }

    fn clear(&mut self) {
        self.address = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TronAddress {
        static instance: TronAddress = TronAddress {
            address: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TronAddress {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TronAddress").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TronAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TronAddress {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// *
///  Request: Ask device to sign Tron transaction
///  @next TronSignedTx
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:TronSignTx)
pub struct TronSignTx {
    // message fields
    // @@protoc_insertion_point(field:TronSignTx.address_n)
    pub address_n: ::std::vec::Vec<u32>,
    ///  Common part of transaction
    // @@protoc_insertion_point(field:TronSignTx.ref_block_bytes)
    pub ref_block_bytes: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:TronSignTx.ref_block_hash)
    pub ref_block_hash: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:TronSignTx.expiration)
    pub expiration: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:TronSignTx.data)
    pub data: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:TronSignTx.contract)
    pub contract: ::protobuf::MessageField<tron_sign_tx::TronContract>,
    // @@protoc_insertion_point(field:TronSignTx.timestamp)
    pub timestamp: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:TronSignTx.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TronSignTx {
    fn default() -> &'a TronSignTx {
        <TronSignTx as ::protobuf::Message>::default_instance()
    }
}

impl TronSignTx {
    pub fn new() -> TronSignTx {
        ::std::default::Default::default()
    }

    // optional bytes ref_block_bytes = 2;

    pub fn ref_block_bytes(&self) -> &[u8] {
        match self.ref_block_bytes.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_ref_block_bytes(&mut self) {
        self.ref_block_bytes = ::std::option::Option::None;
    }

    pub fn has_ref_block_bytes(&self) -> bool {
        self.ref_block_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ref_block_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.ref_block_bytes = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ref_block_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.ref_block_bytes.is_none() {
            self.ref_block_bytes = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.ref_block_bytes.as_mut().unwrap()
    }

    // Take field
    pub fn take_ref_block_bytes(&mut self) -> ::std::vec::Vec<u8> {
        self.ref_block_bytes.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes ref_block_hash = 3;

    pub fn ref_block_hash(&self) -> &[u8] {
        match self.ref_block_hash.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_ref_block_hash(&mut self) {
        self.ref_block_hash = ::std::option::Option::None;
    }

    pub fn has_ref_block_hash(&self) -> bool {
        self.ref_block_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ref_block_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.ref_block_hash = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ref_block_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.ref_block_hash.is_none() {
            self.ref_block_hash = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.ref_block_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_ref_block_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.ref_block_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint64 expiration = 4;

    pub fn expiration(&self) -> u64 {
        self.expiration.unwrap_or(0)
    }

    pub fn clear_expiration(&mut self) {
        self.expiration = ::std::option::Option::None;
    }

    pub fn has_expiration(&self) -> bool {
        self.expiration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expiration(&mut self, v: u64) {
        self.expiration = ::std::option::Option::Some(v);
    }

    // optional string data = 5;

    pub fn data(&self) -> &str {
        match self.data.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::string::String) {
        self.data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::string::String {
        if self.data.is_none() {
            self.data = ::std::option::Option::Some(::std::string::String::new());
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::string::String {
        self.data.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 timestamp = 7;

    pub fn timestamp(&self) -> u64 {
        self.timestamp.unwrap_or(0)
    }

    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "address_n",
            |m: &TronSignTx| { &m.address_n },
            |m: &mut TronSignTx| { &mut m.address_n },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ref_block_bytes",
            |m: &TronSignTx| { &m.ref_block_bytes },
            |m: &mut TronSignTx| { &mut m.ref_block_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ref_block_hash",
            |m: &TronSignTx| { &m.ref_block_hash },
            |m: &mut TronSignTx| { &mut m.ref_block_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "expiration",
            |m: &TronSignTx| { &m.expiration },
            |m: &mut TronSignTx| { &mut m.expiration },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "data",
            |m: &TronSignTx| { &m.data },
            |m: &mut TronSignTx| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, tron_sign_tx::TronContract>(
            "contract",
            |m: &TronSignTx| { &m.contract },
            |m: &mut TronSignTx| { &mut m.contract },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "timestamp",
            |m: &TronSignTx| { &m.timestamp },
            |m: &mut TronSignTx| { &mut m.timestamp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TronSignTx>(
            "TronSignTx",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TronSignTx {
    const NAME: &'static str = "TronSignTx";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.address_n)?;
                },
                8 => {
                    self.address_n.push(is.read_uint32()?);
                },
                18 => {
                    self.ref_block_bytes = ::std::option::Option::Some(is.read_bytes()?);
                },
                26 => {
                    self.ref_block_hash = ::std::option::Option::Some(is.read_bytes()?);
                },
                32 => {
                    self.expiration = ::std::option::Option::Some(is.read_uint64()?);
                },
                42 => {
                    self.data = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.contract)?;
                },
                56 => {
                    self.timestamp = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        if let Some(v) = self.ref_block_bytes.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.ref_block_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(v) = self.expiration {
            my_size += ::protobuf::rt::uint64_size(4, v);
        }
        if let Some(v) = self.data.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.contract.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.timestamp {
            my_size += ::protobuf::rt::uint64_size(7, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.ref_block_bytes.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.ref_block_hash.as_ref() {
            os.write_bytes(3, v)?;
        }
        if let Some(v) = self.expiration {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.data.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.contract.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.timestamp {
            os.write_uint64(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TronSignTx {
        TronSignTx::new()
    }

    fn clear(&mut self) {
        self.address_n.clear();
        self.ref_block_bytes = ::std::option::Option::None;
        self.ref_block_hash = ::std::option::Option::None;
        self.expiration = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.contract.clear();
        self.timestamp = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TronSignTx {
        static instance: TronSignTx = TronSignTx {
            address_n: ::std::vec::Vec::new(),
            ref_block_bytes: ::std::option::Option::None,
            ref_block_hash: ::std::option::Option::None,
            expiration: ::std::option::Option::None,
            data: ::std::option::Option::None,
            contract: ::protobuf::MessageField::none(),
            timestamp: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TronSignTx {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TronSignTx").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TronSignTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TronSignTx {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `TronSignTx`
pub mod tron_sign_tx {
    /// **
    ///  Tron Contracts Messages
    ///
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:TronSignTx.TronContract)
    pub struct TronContract {
        // message fields
        // @@protoc_insertion_point(field:TronSignTx.TronContract.transfer_contract)
        pub transfer_contract: ::protobuf::MessageField<tron_contract::TronTransferContract>,
        // @@protoc_insertion_point(field:TronSignTx.TronContract.transfer_asset_contract)
        pub transfer_asset_contract: ::protobuf::MessageField<tron_contract::TronTransferAssetContract>,
        // @@protoc_insertion_point(field:TronSignTx.TronContract.vote_witness_contract)
        pub vote_witness_contract: ::protobuf::MessageField<tron_contract::TronVoteWitnessContract>,
        // @@protoc_insertion_point(field:TronSignTx.TronContract.witness_create_contract)
        pub witness_create_contract: ::protobuf::MessageField<tron_contract::TronWitnessCreateContract>,
        // @@protoc_insertion_point(field:TronSignTx.TronContract.asset_issue_contract)
        pub asset_issue_contract: ::protobuf::MessageField<tron_contract::TronAssetIssueContract>,
        // @@protoc_insertion_point(field:TronSignTx.TronContract.witness_update_contract)
        pub witness_update_contract: ::protobuf::MessageField<tron_contract::TronWitnessUpdateContract>,
        // @@protoc_insertion_point(field:TronSignTx.TronContract.participate_asset_issue_contract)
        pub participate_asset_issue_contract: ::protobuf::MessageField<tron_contract::TronParticipateAssetIssueContract>,
        // @@protoc_insertion_point(field:TronSignTx.TronContract.account_update_contract)
        pub account_update_contract: ::protobuf::MessageField<tron_contract::TronAccountUpdateContract>,
        // @@protoc_insertion_point(field:TronSignTx.TronContract.freeze_balance_contract)
        pub freeze_balance_contract: ::protobuf::MessageField<tron_contract::TronFreezeBalanceContract>,
        // @@protoc_insertion_point(field:TronSignTx.TronContract.unfreeze_balance_contract)
        pub unfreeze_balance_contract: ::protobuf::MessageField<tron_contract::TronUnfreezeBalanceContract>,
        // @@protoc_insertion_point(field:TronSignTx.TronContract.withdraw_balance_contract)
        pub withdraw_balance_contract: ::protobuf::MessageField<tron_contract::TronWithdrawBalanceContract>,
        // @@protoc_insertion_point(field:TronSignTx.TronContract.unfreeze_asset_contract)
        pub unfreeze_asset_contract: ::protobuf::MessageField<tron_contract::TronUnfreezeAssetContract>,
        // @@protoc_insertion_point(field:TronSignTx.TronContract.update_asset_contract)
        pub update_asset_contract: ::protobuf::MessageField<tron_contract::TronUpdateAssetContract>,
        // @@protoc_insertion_point(field:TronSignTx.TronContract.proposal_create_contract)
        pub proposal_create_contract: ::protobuf::MessageField<tron_contract::TronProposalCreateContract>,
        // @@protoc_insertion_point(field:TronSignTx.TronContract.proposal_approve_contract)
        pub proposal_approve_contract: ::protobuf::MessageField<tron_contract::TronProposalApproveContract>,
        // @@protoc_insertion_point(field:TronSignTx.TronContract.proposal_delete_contract)
        pub proposal_delete_contract: ::protobuf::MessageField<tron_contract::TronProposalDeleteContract>,
        // special fields
        // @@protoc_insertion_point(special_field:TronSignTx.TronContract.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a TronContract {
        fn default() -> &'a TronContract {
            <TronContract as ::protobuf::Message>::default_instance()
        }
    }

    impl TronContract {
        pub fn new() -> TronContract {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(16);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, tron_contract::TronTransferContract>(
                "transfer_contract",
                |m: &TronContract| { &m.transfer_contract },
                |m: &mut TronContract| { &mut m.transfer_contract },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, tron_contract::TronTransferAssetContract>(
                "transfer_asset_contract",
                |m: &TronContract| { &m.transfer_asset_contract },
                |m: &mut TronContract| { &mut m.transfer_asset_contract },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, tron_contract::TronVoteWitnessContract>(
                "vote_witness_contract",
                |m: &TronContract| { &m.vote_witness_contract },
                |m: &mut TronContract| { &mut m.vote_witness_contract },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, tron_contract::TronWitnessCreateContract>(
                "witness_create_contract",
                |m: &TronContract| { &m.witness_create_contract },
                |m: &mut TronContract| { &mut m.witness_create_contract },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, tron_contract::TronAssetIssueContract>(
                "asset_issue_contract",
                |m: &TronContract| { &m.asset_issue_contract },
                |m: &mut TronContract| { &mut m.asset_issue_contract },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, tron_contract::TronWitnessUpdateContract>(
                "witness_update_contract",
                |m: &TronContract| { &m.witness_update_contract },
                |m: &mut TronContract| { &mut m.witness_update_contract },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, tron_contract::TronParticipateAssetIssueContract>(
                "participate_asset_issue_contract",
                |m: &TronContract| { &m.participate_asset_issue_contract },
                |m: &mut TronContract| { &mut m.participate_asset_issue_contract },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, tron_contract::TronAccountUpdateContract>(
                "account_update_contract",
                |m: &TronContract| { &m.account_update_contract },
                |m: &mut TronContract| { &mut m.account_update_contract },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, tron_contract::TronFreezeBalanceContract>(
                "freeze_balance_contract",
                |m: &TronContract| { &m.freeze_balance_contract },
                |m: &mut TronContract| { &mut m.freeze_balance_contract },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, tron_contract::TronUnfreezeBalanceContract>(
                "unfreeze_balance_contract",
                |m: &TronContract| { &m.unfreeze_balance_contract },
                |m: &mut TronContract| { &mut m.unfreeze_balance_contract },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, tron_contract::TronWithdrawBalanceContract>(
                "withdraw_balance_contract",
                |m: &TronContract| { &m.withdraw_balance_contract },
                |m: &mut TronContract| { &mut m.withdraw_balance_contract },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, tron_contract::TronUnfreezeAssetContract>(
                "unfreeze_asset_contract",
                |m: &TronContract| { &m.unfreeze_asset_contract },
                |m: &mut TronContract| { &mut m.unfreeze_asset_contract },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, tron_contract::TronUpdateAssetContract>(
                "update_asset_contract",
                |m: &TronContract| { &m.update_asset_contract },
                |m: &mut TronContract| { &mut m.update_asset_contract },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, tron_contract::TronProposalCreateContract>(
                "proposal_create_contract",
                |m: &TronContract| { &m.proposal_create_contract },
                |m: &mut TronContract| { &mut m.proposal_create_contract },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, tron_contract::TronProposalApproveContract>(
                "proposal_approve_contract",
                |m: &TronContract| { &m.proposal_approve_contract },
                |m: &mut TronContract| { &mut m.proposal_approve_contract },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, tron_contract::TronProposalDeleteContract>(
                "proposal_delete_contract",
                |m: &TronContract| { &m.proposal_delete_contract },
                |m: &mut TronContract| { &mut m.proposal_delete_contract },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TronContract>(
                "TronSignTx.TronContract",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for TronContract {
        const NAME: &'static str = "TronContract";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.transfer_contract)?;
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.transfer_asset_contract)?;
                    },
                    34 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.vote_witness_contract)?;
                    },
                    42 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.witness_create_contract)?;
                    },
                    50 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.asset_issue_contract)?;
                    },
                    66 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.witness_update_contract)?;
                    },
                    74 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.participate_asset_issue_contract)?;
                    },
                    82 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.account_update_contract)?;
                    },
                    90 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.freeze_balance_contract)?;
                    },
                    98 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.unfreeze_balance_contract)?;
                    },
                    106 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.withdraw_balance_contract)?;
                    },
                    114 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.unfreeze_asset_contract)?;
                    },
                    122 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.update_asset_contract)?;
                    },
                    130 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.proposal_create_contract)?;
                    },
                    138 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.proposal_approve_contract)?;
                    },
                    146 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.proposal_delete_contract)?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.transfer_contract.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.transfer_asset_contract.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.vote_witness_contract.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.witness_create_contract.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.asset_issue_contract.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.witness_update_contract.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.participate_asset_issue_contract.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.account_update_contract.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.freeze_balance_contract.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.unfreeze_balance_contract.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.withdraw_balance_contract.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.unfreeze_asset_contract.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.update_asset_contract.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.proposal_create_contract.as_ref() {
                let len = v.compute_size();
                my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.proposal_approve_contract.as_ref() {
                let len = v.compute_size();
                my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.proposal_delete_contract.as_ref() {
                let len = v.compute_size();
                my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.transfer_contract.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
            }
            if let Some(v) = self.transfer_asset_contract.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            if let Some(v) = self.vote_witness_contract.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
            }
            if let Some(v) = self.witness_create_contract.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
            }
            if let Some(v) = self.asset_issue_contract.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
            }
            if let Some(v) = self.witness_update_contract.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
            }
            if let Some(v) = self.participate_asset_issue_contract.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
            }
            if let Some(v) = self.account_update_contract.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
            }
            if let Some(v) = self.freeze_balance_contract.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
            }
            if let Some(v) = self.unfreeze_balance_contract.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
            }
            if let Some(v) = self.withdraw_balance_contract.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
            }
            if let Some(v) = self.unfreeze_asset_contract.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
            }
            if let Some(v) = self.update_asset_contract.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
            }
            if let Some(v) = self.proposal_create_contract.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(16, v, os)?;
            }
            if let Some(v) = self.proposal_approve_contract.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(17, v, os)?;
            }
            if let Some(v) = self.proposal_delete_contract.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(18, v, os)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> TronContract {
            TronContract::new()
        }

        fn clear(&mut self) {
            self.transfer_contract.clear();
            self.transfer_asset_contract.clear();
            self.vote_witness_contract.clear();
            self.witness_create_contract.clear();
            self.asset_issue_contract.clear();
            self.witness_update_contract.clear();
            self.participate_asset_issue_contract.clear();
            self.account_update_contract.clear();
            self.freeze_balance_contract.clear();
            self.unfreeze_balance_contract.clear();
            self.withdraw_balance_contract.clear();
            self.unfreeze_asset_contract.clear();
            self.update_asset_contract.clear();
            self.proposal_create_contract.clear();
            self.proposal_approve_contract.clear();
            self.proposal_delete_contract.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static TronContract {
            static instance: TronContract = TronContract {
                transfer_contract: ::protobuf::MessageField::none(),
                transfer_asset_contract: ::protobuf::MessageField::none(),
                vote_witness_contract: ::protobuf::MessageField::none(),
                witness_create_contract: ::protobuf::MessageField::none(),
                asset_issue_contract: ::protobuf::MessageField::none(),
                witness_update_contract: ::protobuf::MessageField::none(),
                participate_asset_issue_contract: ::protobuf::MessageField::none(),
                account_update_contract: ::protobuf::MessageField::none(),
                freeze_balance_contract: ::protobuf::MessageField::none(),
                unfreeze_balance_contract: ::protobuf::MessageField::none(),
                withdraw_balance_contract: ::protobuf::MessageField::none(),
                unfreeze_asset_contract: ::protobuf::MessageField::none(),
                update_asset_contract: ::protobuf::MessageField::none(),
                proposal_create_contract: ::protobuf::MessageField::none(),
                proposal_approve_contract: ::protobuf::MessageField::none(),
                proposal_delete_contract: ::protobuf::MessageField::none(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for TronContract {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("TronSignTx.TronContract").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for TronContract {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for TronContract {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `TronContract`
    pub mod tron_contract {
        ///  Update account name
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:TronSignTx.TronContract.TronAccountUpdateContract)
        pub struct TronAccountUpdateContract {
            // message fields
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronAccountUpdateContract.account_name)
            pub account_name: ::std::option::Option<::std::string::String>,
            // special fields
            // @@protoc_insertion_point(special_field:TronSignTx.TronContract.TronAccountUpdateContract.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a TronAccountUpdateContract {
            fn default() -> &'a TronAccountUpdateContract {
                <TronAccountUpdateContract as ::protobuf::Message>::default_instance()
            }
        }

        impl TronAccountUpdateContract {
            pub fn new() -> TronAccountUpdateContract {
                ::std::default::Default::default()
            }

            // optional string account_name = 1;

            pub fn account_name(&self) -> &str {
                match self.account_name.as_ref() {
                    Some(v) => v,
                    None => "",
                }
            }

            pub fn clear_account_name(&mut self) {
                self.account_name = ::std::option::Option::None;
            }

            pub fn has_account_name(&self) -> bool {
                self.account_name.is_some()
            }

            // Param is passed by value, moved
            pub fn set_account_name(&mut self, v: ::std::string::String) {
                self.account_name = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_account_name(&mut self) -> &mut ::std::string::String {
                if self.account_name.is_none() {
                    self.account_name = ::std::option::Option::Some(::std::string::String::new());
                }
                self.account_name.as_mut().unwrap()
            }

            // Take field
            pub fn take_account_name(&mut self) -> ::std::string::String {
                self.account_name.take().unwrap_or_else(|| ::std::string::String::new())
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(1);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "account_name",
                    |m: &TronAccountUpdateContract| { &m.account_name },
                    |m: &mut TronAccountUpdateContract| { &mut m.account_name },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TronAccountUpdateContract>(
                    "TronSignTx.TronContract.TronAccountUpdateContract",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for TronAccountUpdateContract {
            const NAME: &'static str = "TronAccountUpdateContract";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.account_name = ::std::option::Option::Some(is.read_string()?);
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.account_name.as_ref() {
                    my_size += ::protobuf::rt::string_size(1, &v);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.account_name.as_ref() {
                    os.write_string(1, v)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> TronAccountUpdateContract {
                TronAccountUpdateContract::new()
            }

            fn clear(&mut self) {
                self.account_name = ::std::option::Option::None;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static TronAccountUpdateContract {
                static instance: TronAccountUpdateContract = TronAccountUpdateContract {
                    account_name: ::std::option::Option::None,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for TronAccountUpdateContract {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("TronSignTx.TronContract.TronAccountUpdateContract").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for TronAccountUpdateContract {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for TronAccountUpdateContract {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        ///  Transfer TRX
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:TronSignTx.TronContract.TronTransferContract)
        pub struct TronTransferContract {
            // message fields
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronTransferContract.to_address)
            pub to_address: ::std::option::Option<::std::vec::Vec<u8>>,
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronTransferContract.amount)
            pub amount: ::std::option::Option<u64>,
            // special fields
            // @@protoc_insertion_point(special_field:TronSignTx.TronContract.TronTransferContract.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a TronTransferContract {
            fn default() -> &'a TronTransferContract {
                <TronTransferContract as ::protobuf::Message>::default_instance()
            }
        }

        impl TronTransferContract {
            pub fn new() -> TronTransferContract {
                ::std::default::Default::default()
            }

            // optional bytes to_address = 1;

            pub fn to_address(&self) -> &[u8] {
                match self.to_address.as_ref() {
                    Some(v) => v,
                    None => &[],
                }
            }

            pub fn clear_to_address(&mut self) {
                self.to_address = ::std::option::Option::None;
            }

            pub fn has_to_address(&self) -> bool {
                self.to_address.is_some()
            }

            // Param is passed by value, moved
            pub fn set_to_address(&mut self, v: ::std::vec::Vec<u8>) {
                self.to_address = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_to_address(&mut self) -> &mut ::std::vec::Vec<u8> {
                if self.to_address.is_none() {
                    self.to_address = ::std::option::Option::Some(::std::vec::Vec::new());
                }
                self.to_address.as_mut().unwrap()
            }

            // Take field
            pub fn take_to_address(&mut self) -> ::std::vec::Vec<u8> {
                self.to_address.take().unwrap_or_else(|| ::std::vec::Vec::new())
            }

            // optional uint64 amount = 2;

            pub fn amount(&self) -> u64 {
                self.amount.unwrap_or(0)
            }

            pub fn clear_amount(&mut self) {
                self.amount = ::std::option::Option::None;
            }

            pub fn has_amount(&self) -> bool {
                self.amount.is_some()
            }

            // Param is passed by value, moved
            pub fn set_amount(&mut self, v: u64) {
                self.amount = ::std::option::Option::Some(v);
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(2);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "to_address",
                    |m: &TronTransferContract| { &m.to_address },
                    |m: &mut TronTransferContract| { &mut m.to_address },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "amount",
                    |m: &TronTransferContract| { &m.amount },
                    |m: &mut TronTransferContract| { &mut m.amount },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TronTransferContract>(
                    "TronSignTx.TronContract.TronTransferContract",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for TronTransferContract {
            const NAME: &'static str = "TronTransferContract";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.to_address = ::std::option::Option::Some(is.read_bytes()?);
                        },
                        16 => {
                            self.amount = ::std::option::Option::Some(is.read_uint64()?);
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.to_address.as_ref() {
                    my_size += ::protobuf::rt::bytes_size(1, &v);
                }
                if let Some(v) = self.amount {
                    my_size += ::protobuf::rt::uint64_size(2, v);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.to_address.as_ref() {
                    os.write_bytes(1, v)?;
                }
                if let Some(v) = self.amount {
                    os.write_uint64(2, v)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> TronTransferContract {
                TronTransferContract::new()
            }

            fn clear(&mut self) {
                self.to_address = ::std::option::Option::None;
                self.amount = ::std::option::Option::None;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static TronTransferContract {
                static instance: TronTransferContract = TronTransferContract {
                    to_address: ::std::option::Option::None,
                    amount: ::std::option::Option::None,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for TronTransferContract {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("TronSignTx.TronContract.TronTransferContract").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for TronTransferContract {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for TronTransferContract {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        ///  Transfer asset
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:TronSignTx.TronContract.TronTransferAssetContract)
        pub struct TronTransferAssetContract {
            // message fields
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronTransferAssetContract.asset_name)
            pub asset_name: ::std::option::Option<::std::string::String>,
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronTransferAssetContract.to_address)
            pub to_address: ::std::option::Option<::std::vec::Vec<u8>>,
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronTransferAssetContract.amount)
            pub amount: ::std::option::Option<u64>,
            // special fields
            // @@protoc_insertion_point(special_field:TronSignTx.TronContract.TronTransferAssetContract.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a TronTransferAssetContract {
            fn default() -> &'a TronTransferAssetContract {
                <TronTransferAssetContract as ::protobuf::Message>::default_instance()
            }
        }

        impl TronTransferAssetContract {
            pub fn new() -> TronTransferAssetContract {
                ::std::default::Default::default()
            }

            // optional string asset_name = 1;

            pub fn asset_name(&self) -> &str {
                match self.asset_name.as_ref() {
                    Some(v) => v,
                    None => "",
                }
            }

            pub fn clear_asset_name(&mut self) {
                self.asset_name = ::std::option::Option::None;
            }

            pub fn has_asset_name(&self) -> bool {
                self.asset_name.is_some()
            }

            // Param is passed by value, moved
            pub fn set_asset_name(&mut self, v: ::std::string::String) {
                self.asset_name = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_asset_name(&mut self) -> &mut ::std::string::String {
                if self.asset_name.is_none() {
                    self.asset_name = ::std::option::Option::Some(::std::string::String::new());
                }
                self.asset_name.as_mut().unwrap()
            }

            // Take field
            pub fn take_asset_name(&mut self) -> ::std::string::String {
                self.asset_name.take().unwrap_or_else(|| ::std::string::String::new())
            }

            // optional bytes to_address = 2;

            pub fn to_address(&self) -> &[u8] {
                match self.to_address.as_ref() {
                    Some(v) => v,
                    None => &[],
                }
            }

            pub fn clear_to_address(&mut self) {
                self.to_address = ::std::option::Option::None;
            }

            pub fn has_to_address(&self) -> bool {
                self.to_address.is_some()
            }

            // Param is passed by value, moved
            pub fn set_to_address(&mut self, v: ::std::vec::Vec<u8>) {
                self.to_address = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_to_address(&mut self) -> &mut ::std::vec::Vec<u8> {
                if self.to_address.is_none() {
                    self.to_address = ::std::option::Option::Some(::std::vec::Vec::new());
                }
                self.to_address.as_mut().unwrap()
            }

            // Take field
            pub fn take_to_address(&mut self) -> ::std::vec::Vec<u8> {
                self.to_address.take().unwrap_or_else(|| ::std::vec::Vec::new())
            }

            // optional uint64 amount = 3;

            pub fn amount(&self) -> u64 {
                self.amount.unwrap_or(0)
            }

            pub fn clear_amount(&mut self) {
                self.amount = ::std::option::Option::None;
            }

            pub fn has_amount(&self) -> bool {
                self.amount.is_some()
            }

            // Param is passed by value, moved
            pub fn set_amount(&mut self, v: u64) {
                self.amount = ::std::option::Option::Some(v);
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(3);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "asset_name",
                    |m: &TronTransferAssetContract| { &m.asset_name },
                    |m: &mut TronTransferAssetContract| { &mut m.asset_name },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "to_address",
                    |m: &TronTransferAssetContract| { &m.to_address },
                    |m: &mut TronTransferAssetContract| { &mut m.to_address },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "amount",
                    |m: &TronTransferAssetContract| { &m.amount },
                    |m: &mut TronTransferAssetContract| { &mut m.amount },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TronTransferAssetContract>(
                    "TronSignTx.TronContract.TronTransferAssetContract",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for TronTransferAssetContract {
            const NAME: &'static str = "TronTransferAssetContract";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.asset_name = ::std::option::Option::Some(is.read_string()?);
                        },
                        18 => {
                            self.to_address = ::std::option::Option::Some(is.read_bytes()?);
                        },
                        24 => {
                            self.amount = ::std::option::Option::Some(is.read_uint64()?);
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.asset_name.as_ref() {
                    my_size += ::protobuf::rt::string_size(1, &v);
                }
                if let Some(v) = self.to_address.as_ref() {
                    my_size += ::protobuf::rt::bytes_size(2, &v);
                }
                if let Some(v) = self.amount {
                    my_size += ::protobuf::rt::uint64_size(3, v);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.asset_name.as_ref() {
                    os.write_string(1, v)?;
                }
                if let Some(v) = self.to_address.as_ref() {
                    os.write_bytes(2, v)?;
                }
                if let Some(v) = self.amount {
                    os.write_uint64(3, v)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> TronTransferAssetContract {
                TronTransferAssetContract::new()
            }

            fn clear(&mut self) {
                self.asset_name = ::std::option::Option::None;
                self.to_address = ::std::option::Option::None;
                self.amount = ::std::option::Option::None;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static TronTransferAssetContract {
                static instance: TronTransferAssetContract = TronTransferAssetContract {
                    asset_name: ::std::option::Option::None,
                    to_address: ::std::option::Option::None,
                    amount: ::std::option::Option::None,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for TronTransferAssetContract {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("TronSignTx.TronContract.TronTransferAssetContract").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for TronTransferAssetContract {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for TronTransferAssetContract {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        ///  Vote witness
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:TronSignTx.TronContract.TronVoteWitnessContract)
        pub struct TronVoteWitnessContract {
            // message fields
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronVoteWitnessContract.votes)
            pub votes: ::std::vec::Vec<tron_vote_witness_contract::TronVote>,
            // special fields
            // @@protoc_insertion_point(special_field:TronSignTx.TronContract.TronVoteWitnessContract.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a TronVoteWitnessContract {
            fn default() -> &'a TronVoteWitnessContract {
                <TronVoteWitnessContract as ::protobuf::Message>::default_instance()
            }
        }

        impl TronVoteWitnessContract {
            pub fn new() -> TronVoteWitnessContract {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(1);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                    "votes",
                    |m: &TronVoteWitnessContract| { &m.votes },
                    |m: &mut TronVoteWitnessContract| { &mut m.votes },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TronVoteWitnessContract>(
                    "TronSignTx.TronContract.TronVoteWitnessContract",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for TronVoteWitnessContract {
            const NAME: &'static str = "TronVoteWitnessContract";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.votes.push(is.read_message()?);
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                for value in &self.votes {
                    let len = value.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                };
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                for v in &self.votes {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                };
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> TronVoteWitnessContract {
                TronVoteWitnessContract::new()
            }

            fn clear(&mut self) {
                self.votes.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static TronVoteWitnessContract {
                static instance: TronVoteWitnessContract = TronVoteWitnessContract {
                    votes: ::std::vec::Vec::new(),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for TronVoteWitnessContract {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("TronSignTx.TronContract.TronVoteWitnessContract").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for TronVoteWitnessContract {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for TronVoteWitnessContract {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        /// Nested message and enums of message `TronVoteWitnessContract`
        pub mod tron_vote_witness_contract {
            #[derive(PartialEq,Clone,Default,Debug)]
            // @@protoc_insertion_point(message:TronSignTx.TronContract.TronVoteWitnessContract.TronVote)
            pub struct TronVote {
                // message fields
                // @@protoc_insertion_point(field:TronSignTx.TronContract.TronVoteWitnessContract.TronVote.vote_address)
                pub vote_address: ::std::option::Option<::std::vec::Vec<u8>>,
                // @@protoc_insertion_point(field:TronSignTx.TronContract.TronVoteWitnessContract.TronVote.vote_count)
                pub vote_count: ::std::option::Option<u64>,
                // special fields
                // @@protoc_insertion_point(special_field:TronSignTx.TronContract.TronVoteWitnessContract.TronVote.special_fields)
                pub special_fields: ::protobuf::SpecialFields,
            }

            impl<'a> ::std::default::Default for &'a TronVote {
                fn default() -> &'a TronVote {
                    <TronVote as ::protobuf::Message>::default_instance()
                }
            }

            impl TronVote {
                pub fn new() -> TronVote {
                    ::std::default::Default::default()
                }

                // optional bytes vote_address = 1;

                pub fn vote_address(&self) -> &[u8] {
                    match self.vote_address.as_ref() {
                        Some(v) => v,
                        None => &[],
                    }
                }

                pub fn clear_vote_address(&mut self) {
                    self.vote_address = ::std::option::Option::None;
                }

                pub fn has_vote_address(&self) -> bool {
                    self.vote_address.is_some()
                }

                // Param is passed by value, moved
                pub fn set_vote_address(&mut self, v: ::std::vec::Vec<u8>) {
                    self.vote_address = ::std::option::Option::Some(v);
                }

                // Mutable pointer to the field.
                // If field is not initialized, it is initialized with default value first.
                pub fn mut_vote_address(&mut self) -> &mut ::std::vec::Vec<u8> {
                    if self.vote_address.is_none() {
                        self.vote_address = ::std::option::Option::Some(::std::vec::Vec::new());
                    }
                    self.vote_address.as_mut().unwrap()
                }

                // Take field
                pub fn take_vote_address(&mut self) -> ::std::vec::Vec<u8> {
                    self.vote_address.take().unwrap_or_else(|| ::std::vec::Vec::new())
                }

                // optional uint64 vote_count = 2;

                pub fn vote_count(&self) -> u64 {
                    self.vote_count.unwrap_or(0)
                }

                pub fn clear_vote_count(&mut self) {
                    self.vote_count = ::std::option::Option::None;
                }

                pub fn has_vote_count(&self) -> bool {
                    self.vote_count.is_some()
                }

                // Param is passed by value, moved
                pub fn set_vote_count(&mut self, v: u64) {
                    self.vote_count = ::std::option::Option::Some(v);
                }

                pub(in super::super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                    let mut fields = ::std::vec::Vec::with_capacity(2);
                    let mut oneofs = ::std::vec::Vec::with_capacity(0);
                    fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                        "vote_address",
                        |m: &TronVote| { &m.vote_address },
                        |m: &mut TronVote| { &mut m.vote_address },
                    ));
                    fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                        "vote_count",
                        |m: &TronVote| { &m.vote_count },
                        |m: &mut TronVote| { &mut m.vote_count },
                    ));
                    ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TronVote>(
                        "TronSignTx.TronContract.TronVoteWitnessContract.TronVote",
                        fields,
                        oneofs,
                    )
                }
            }

            impl ::protobuf::Message for TronVote {
                const NAME: &'static str = "TronVote";

                fn is_initialized(&self) -> bool {
                    true
                }

                fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => {
                                self.vote_address = ::std::option::Option::Some(is.read_bytes()?);
                            },
                            16 => {
                                self.vote_count = ::std::option::Option::Some(is.read_uint64()?);
                            },
                            tag => {
                                ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                            },
                        };
                    }
                    ::std::result::Result::Ok(())
                }

                // Compute sizes of nested messages
                #[allow(unused_variables)]
                fn compute_size(&self) -> u64 {
                    let mut my_size = 0;
                    if let Some(v) = self.vote_address.as_ref() {
                        my_size += ::protobuf::rt::bytes_size(1, &v);
                    }
                    if let Some(v) = self.vote_count {
                        my_size += ::protobuf::rt::uint64_size(2, v);
                    }
                    my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                    self.special_fields.cached_size().set(my_size as u32);
                    my_size
                }

                fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                    if let Some(v) = self.vote_address.as_ref() {
                        os.write_bytes(1, v)?;
                    }
                    if let Some(v) = self.vote_count {
                        os.write_uint64(2, v)?;
                    }
                    os.write_unknown_fields(self.special_fields.unknown_fields())?;
                    ::std::result::Result::Ok(())
                }

                fn special_fields(&self) -> &::protobuf::SpecialFields {
                    &self.special_fields
                }

                fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                    &mut self.special_fields
                }

                fn new() -> TronVote {
                    TronVote::new()
                }

                fn clear(&mut self) {
                    self.vote_address = ::std::option::Option::None;
                    self.vote_count = ::std::option::Option::None;
                    self.special_fields.clear();
                }

                fn default_instance() -> &'static TronVote {
                    static instance: TronVote = TronVote {
                        vote_address: ::std::option::Option::None,
                        vote_count: ::std::option::Option::None,
                        special_fields: ::protobuf::SpecialFields::new(),
                    };
                    &instance
                }
            }

            impl ::protobuf::MessageFull for TronVote {
                fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                    static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                    descriptor.get(|| super::super::super::file_descriptor().message_by_package_relative_name("TronSignTx.TronContract.TronVoteWitnessContract.TronVote").unwrap()).clone()
                }
            }

            impl ::std::fmt::Display for TronVote {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    ::protobuf::text_format::fmt(self, f)
                }
            }

            impl ::protobuf::reflect::ProtobufValue for TronVote {
                type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
            }
        }

        ///  Upgrade account to witness
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:TronSignTx.TronContract.TronWitnessCreateContract)
        pub struct TronWitnessCreateContract {
            // message fields
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronWitnessCreateContract.url)
            pub url: ::std::option::Option<::std::string::String>,
            // special fields
            // @@protoc_insertion_point(special_field:TronSignTx.TronContract.TronWitnessCreateContract.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a TronWitnessCreateContract {
            fn default() -> &'a TronWitnessCreateContract {
                <TronWitnessCreateContract as ::protobuf::Message>::default_instance()
            }
        }

        impl TronWitnessCreateContract {
            pub fn new() -> TronWitnessCreateContract {
                ::std::default::Default::default()
            }

            // optional string url = 1;

            pub fn url(&self) -> &str {
                match self.url.as_ref() {
                    Some(v) => v,
                    None => "",
                }
            }

            pub fn clear_url(&mut self) {
                self.url = ::std::option::Option::None;
            }

            pub fn has_url(&self) -> bool {
                self.url.is_some()
            }

            // Param is passed by value, moved
            pub fn set_url(&mut self, v: ::std::string::String) {
                self.url = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_url(&mut self) -> &mut ::std::string::String {
                if self.url.is_none() {
                    self.url = ::std::option::Option::Some(::std::string::String::new());
                }
                self.url.as_mut().unwrap()
            }

            // Take field
            pub fn take_url(&mut self) -> ::std::string::String {
                self.url.take().unwrap_or_else(|| ::std::string::String::new())
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(1);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "url",
                    |m: &TronWitnessCreateContract| { &m.url },
                    |m: &mut TronWitnessCreateContract| { &mut m.url },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TronWitnessCreateContract>(
                    "TronSignTx.TronContract.TronWitnessCreateContract",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for TronWitnessCreateContract {
            const NAME: &'static str = "TronWitnessCreateContract";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.url = ::std::option::Option::Some(is.read_string()?);
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.url.as_ref() {
                    my_size += ::protobuf::rt::string_size(1, &v);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.url.as_ref() {
                    os.write_string(1, v)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> TronWitnessCreateContract {
                TronWitnessCreateContract::new()
            }

            fn clear(&mut self) {
                self.url = ::std::option::Option::None;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static TronWitnessCreateContract {
                static instance: TronWitnessCreateContract = TronWitnessCreateContract {
                    url: ::std::option::Option::None,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for TronWitnessCreateContract {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("TronSignTx.TronContract.TronWitnessCreateContract").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for TronWitnessCreateContract {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for TronWitnessCreateContract {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        ///  Update witness URL
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:TronSignTx.TronContract.TronWitnessUpdateContract)
        pub struct TronWitnessUpdateContract {
            // message fields
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronWitnessUpdateContract.update_url)
            pub update_url: ::std::option::Option<::std::string::String>,
            // special fields
            // @@protoc_insertion_point(special_field:TronSignTx.TronContract.TronWitnessUpdateContract.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a TronWitnessUpdateContract {
            fn default() -> &'a TronWitnessUpdateContract {
                <TronWitnessUpdateContract as ::protobuf::Message>::default_instance()
            }
        }

        impl TronWitnessUpdateContract {
            pub fn new() -> TronWitnessUpdateContract {
                ::std::default::Default::default()
            }

            // optional string update_url = 2;

            pub fn update_url(&self) -> &str {
                match self.update_url.as_ref() {
                    Some(v) => v,
                    None => "",
                }
            }

            pub fn clear_update_url(&mut self) {
                self.update_url = ::std::option::Option::None;
            }

            pub fn has_update_url(&self) -> bool {
                self.update_url.is_some()
            }

            // Param is passed by value, moved
            pub fn set_update_url(&mut self, v: ::std::string::String) {
                self.update_url = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_update_url(&mut self) -> &mut ::std::string::String {
                if self.update_url.is_none() {
                    self.update_url = ::std::option::Option::Some(::std::string::String::new());
                }
                self.update_url.as_mut().unwrap()
            }

            // Take field
            pub fn take_update_url(&mut self) -> ::std::string::String {
                self.update_url.take().unwrap_or_else(|| ::std::string::String::new())
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(1);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "update_url",
                    |m: &TronWitnessUpdateContract| { &m.update_url },
                    |m: &mut TronWitnessUpdateContract| { &mut m.update_url },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TronWitnessUpdateContract>(
                    "TronSignTx.TronContract.TronWitnessUpdateContract",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for TronWitnessUpdateContract {
            const NAME: &'static str = "TronWitnessUpdateContract";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        18 => {
                            self.update_url = ::std::option::Option::Some(is.read_string()?);
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.update_url.as_ref() {
                    my_size += ::protobuf::rt::string_size(2, &v);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.update_url.as_ref() {
                    os.write_string(2, v)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> TronWitnessUpdateContract {
                TronWitnessUpdateContract::new()
            }

            fn clear(&mut self) {
                self.update_url = ::std::option::Option::None;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static TronWitnessUpdateContract {
                static instance: TronWitnessUpdateContract = TronWitnessUpdateContract {
                    update_url: ::std::option::Option::None,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for TronWitnessUpdateContract {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("TronSignTx.TronContract.TronWitnessUpdateContract").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for TronWitnessUpdateContract {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for TronWitnessUpdateContract {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        ///  Issue Asset
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:TronSignTx.TronContract.TronAssetIssueContract)
        pub struct TronAssetIssueContract {
            // message fields
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronAssetIssueContract.name)
            pub name: ::std::option::Option<::std::string::String>,
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronAssetIssueContract.abbr)
            pub abbr: ::std::option::Option<::std::string::String>,
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronAssetIssueContract.total_supply)
            pub total_supply: ::std::option::Option<u64>,
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronAssetIssueContract.frozen_supply)
            pub frozen_supply: ::std::vec::Vec<tron_asset_issue_contract::TronFrozenSupply>,
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronAssetIssueContract.trx_num)
            pub trx_num: ::std::option::Option<u32>,
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronAssetIssueContract.num)
            pub num: ::std::option::Option<u32>,
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronAssetIssueContract.start_time)
            pub start_time: ::std::option::Option<u64>,
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronAssetIssueContract.end_time)
            pub end_time: ::std::option::Option<u64>,
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronAssetIssueContract.description)
            pub description: ::std::option::Option<::std::string::String>,
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronAssetIssueContract.url)
            pub url: ::std::option::Option<::std::string::String>,
            // special fields
            // @@protoc_insertion_point(special_field:TronSignTx.TronContract.TronAssetIssueContract.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a TronAssetIssueContract {
            fn default() -> &'a TronAssetIssueContract {
                <TronAssetIssueContract as ::protobuf::Message>::default_instance()
            }
        }

        impl TronAssetIssueContract {
            pub fn new() -> TronAssetIssueContract {
                ::std::default::Default::default()
            }

            // optional string name = 2;

            pub fn name(&self) -> &str {
                match self.name.as_ref() {
                    Some(v) => v,
                    None => "",
                }
            }

            pub fn clear_name(&mut self) {
                self.name = ::std::option::Option::None;
            }

            pub fn has_name(&self) -> bool {
                self.name.is_some()
            }

            // Param is passed by value, moved
            pub fn set_name(&mut self, v: ::std::string::String) {
                self.name = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_name(&mut self) -> &mut ::std::string::String {
                if self.name.is_none() {
                    self.name = ::std::option::Option::Some(::std::string::String::new());
                }
                self.name.as_mut().unwrap()
            }

            // Take field
            pub fn take_name(&mut self) -> ::std::string::String {
                self.name.take().unwrap_or_else(|| ::std::string::String::new())
            }

            // optional string abbr = 3;

            pub fn abbr(&self) -> &str {
                match self.abbr.as_ref() {
                    Some(v) => v,
                    None => "",
                }
            }

            pub fn clear_abbr(&mut self) {
                self.abbr = ::std::option::Option::None;
            }

            pub fn has_abbr(&self) -> bool {
                self.abbr.is_some()
            }

            // Param is passed by value, moved
            pub fn set_abbr(&mut self, v: ::std::string::String) {
                self.abbr = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_abbr(&mut self) -> &mut ::std::string::String {
                if self.abbr.is_none() {
                    self.abbr = ::std::option::Option::Some(::std::string::String::new());
                }
                self.abbr.as_mut().unwrap()
            }

            // Take field
            pub fn take_abbr(&mut self) -> ::std::string::String {
                self.abbr.take().unwrap_or_else(|| ::std::string::String::new())
            }

            // optional uint64 total_supply = 4;

            pub fn total_supply(&self) -> u64 {
                self.total_supply.unwrap_or(0)
            }

            pub fn clear_total_supply(&mut self) {
                self.total_supply = ::std::option::Option::None;
            }

            pub fn has_total_supply(&self) -> bool {
                self.total_supply.is_some()
            }

            // Param is passed by value, moved
            pub fn set_total_supply(&mut self, v: u64) {
                self.total_supply = ::std::option::Option::Some(v);
            }

            // optional uint32 trx_num = 6;

            pub fn trx_num(&self) -> u32 {
                self.trx_num.unwrap_or(0)
            }

            pub fn clear_trx_num(&mut self) {
                self.trx_num = ::std::option::Option::None;
            }

            pub fn has_trx_num(&self) -> bool {
                self.trx_num.is_some()
            }

            // Param is passed by value, moved
            pub fn set_trx_num(&mut self, v: u32) {
                self.trx_num = ::std::option::Option::Some(v);
            }

            // optional uint32 num = 7;

            pub fn num(&self) -> u32 {
                self.num.unwrap_or(0)
            }

            pub fn clear_num(&mut self) {
                self.num = ::std::option::Option::None;
            }

            pub fn has_num(&self) -> bool {
                self.num.is_some()
            }

            // Param is passed by value, moved
            pub fn set_num(&mut self, v: u32) {
                self.num = ::std::option::Option::Some(v);
            }

            // optional uint64 start_time = 8;

            pub fn start_time(&self) -> u64 {
                self.start_time.unwrap_or(0)
            }

            pub fn clear_start_time(&mut self) {
                self.start_time = ::std::option::Option::None;
            }

            pub fn has_start_time(&self) -> bool {
                self.start_time.is_some()
            }

            // Param is passed by value, moved
            pub fn set_start_time(&mut self, v: u64) {
                self.start_time = ::std::option::Option::Some(v);
            }

            // optional uint64 end_time = 9;

            pub fn end_time(&self) -> u64 {
                self.end_time.unwrap_or(0)
            }

            pub fn clear_end_time(&mut self) {
                self.end_time = ::std::option::Option::None;
            }

            pub fn has_end_time(&self) -> bool {
                self.end_time.is_some()
            }

            // Param is passed by value, moved
            pub fn set_end_time(&mut self, v: u64) {
                self.end_time = ::std::option::Option::Some(v);
            }

            // optional string description = 10;

            pub fn description(&self) -> &str {
                match self.description.as_ref() {
                    Some(v) => v,
                    None => "",
                }
            }

            pub fn clear_description(&mut self) {
                self.description = ::std::option::Option::None;
            }

            pub fn has_description(&self) -> bool {
                self.description.is_some()
            }

            // Param is passed by value, moved
            pub fn set_description(&mut self, v: ::std::string::String) {
                self.description = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_description(&mut self) -> &mut ::std::string::String {
                if self.description.is_none() {
                    self.description = ::std::option::Option::Some(::std::string::String::new());
                }
                self.description.as_mut().unwrap()
            }

            // Take field
            pub fn take_description(&mut self) -> ::std::string::String {
                self.description.take().unwrap_or_else(|| ::std::string::String::new())
            }

            // optional string url = 11;

            pub fn url(&self) -> &str {
                match self.url.as_ref() {
                    Some(v) => v,
                    None => "",
                }
            }

            pub fn clear_url(&mut self) {
                self.url = ::std::option::Option::None;
            }

            pub fn has_url(&self) -> bool {
                self.url.is_some()
            }

            // Param is passed by value, moved
            pub fn set_url(&mut self, v: ::std::string::String) {
                self.url = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_url(&mut self) -> &mut ::std::string::String {
                if self.url.is_none() {
                    self.url = ::std::option::Option::Some(::std::string::String::new());
                }
                self.url.as_mut().unwrap()
            }

            // Take field
            pub fn take_url(&mut self) -> ::std::string::String {
                self.url.take().unwrap_or_else(|| ::std::string::String::new())
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(10);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "name",
                    |m: &TronAssetIssueContract| { &m.name },
                    |m: &mut TronAssetIssueContract| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "abbr",
                    |m: &TronAssetIssueContract| { &m.abbr },
                    |m: &mut TronAssetIssueContract| { &mut m.abbr },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "total_supply",
                    |m: &TronAssetIssueContract| { &m.total_supply },
                    |m: &mut TronAssetIssueContract| { &mut m.total_supply },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                    "frozen_supply",
                    |m: &TronAssetIssueContract| { &m.frozen_supply },
                    |m: &mut TronAssetIssueContract| { &mut m.frozen_supply },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "trx_num",
                    |m: &TronAssetIssueContract| { &m.trx_num },
                    |m: &mut TronAssetIssueContract| { &mut m.trx_num },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "num",
                    |m: &TronAssetIssueContract| { &m.num },
                    |m: &mut TronAssetIssueContract| { &mut m.num },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "start_time",
                    |m: &TronAssetIssueContract| { &m.start_time },
                    |m: &mut TronAssetIssueContract| { &mut m.start_time },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "end_time",
                    |m: &TronAssetIssueContract| { &m.end_time },
                    |m: &mut TronAssetIssueContract| { &mut m.end_time },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "description",
                    |m: &TronAssetIssueContract| { &m.description },
                    |m: &mut TronAssetIssueContract| { &mut m.description },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "url",
                    |m: &TronAssetIssueContract| { &m.url },
                    |m: &mut TronAssetIssueContract| { &mut m.url },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TronAssetIssueContract>(
                    "TronSignTx.TronContract.TronAssetIssueContract",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for TronAssetIssueContract {
            const NAME: &'static str = "TronAssetIssueContract";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        18 => {
                            self.name = ::std::option::Option::Some(is.read_string()?);
                        },
                        26 => {
                            self.abbr = ::std::option::Option::Some(is.read_string()?);
                        },
                        32 => {
                            self.total_supply = ::std::option::Option::Some(is.read_uint64()?);
                        },
                        42 => {
                            self.frozen_supply.push(is.read_message()?);
                        },
                        48 => {
                            self.trx_num = ::std::option::Option::Some(is.read_uint32()?);
                        },
                        56 => {
                            self.num = ::std::option::Option::Some(is.read_uint32()?);
                        },
                        64 => {
                            self.start_time = ::std::option::Option::Some(is.read_uint64()?);
                        },
                        72 => {
                            self.end_time = ::std::option::Option::Some(is.read_uint64()?);
                        },
                        82 => {
                            self.description = ::std::option::Option::Some(is.read_string()?);
                        },
                        90 => {
                            self.url = ::std::option::Option::Some(is.read_string()?);
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.name.as_ref() {
                    my_size += ::protobuf::rt::string_size(2, &v);
                }
                if let Some(v) = self.abbr.as_ref() {
                    my_size += ::protobuf::rt::string_size(3, &v);
                }
                if let Some(v) = self.total_supply {
                    my_size += ::protobuf::rt::uint64_size(4, v);
                }
                for value in &self.frozen_supply {
                    let len = value.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                };
                if let Some(v) = self.trx_num {
                    my_size += ::protobuf::rt::uint32_size(6, v);
                }
                if let Some(v) = self.num {
                    my_size += ::protobuf::rt::uint32_size(7, v);
                }
                if let Some(v) = self.start_time {
                    my_size += ::protobuf::rt::uint64_size(8, v);
                }
                if let Some(v) = self.end_time {
                    my_size += ::protobuf::rt::uint64_size(9, v);
                }
                if let Some(v) = self.description.as_ref() {
                    my_size += ::protobuf::rt::string_size(10, &v);
                }
                if let Some(v) = self.url.as_ref() {
                    my_size += ::protobuf::rt::string_size(11, &v);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.name.as_ref() {
                    os.write_string(2, v)?;
                }
                if let Some(v) = self.abbr.as_ref() {
                    os.write_string(3, v)?;
                }
                if let Some(v) = self.total_supply {
                    os.write_uint64(4, v)?;
                }
                for v in &self.frozen_supply {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                };
                if let Some(v) = self.trx_num {
                    os.write_uint32(6, v)?;
                }
                if let Some(v) = self.num {
                    os.write_uint32(7, v)?;
                }
                if let Some(v) = self.start_time {
                    os.write_uint64(8, v)?;
                }
                if let Some(v) = self.end_time {
                    os.write_uint64(9, v)?;
                }
                if let Some(v) = self.description.as_ref() {
                    os.write_string(10, v)?;
                }
                if let Some(v) = self.url.as_ref() {
                    os.write_string(11, v)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> TronAssetIssueContract {
                TronAssetIssueContract::new()
            }

            fn clear(&mut self) {
                self.name = ::std::option::Option::None;
                self.abbr = ::std::option::Option::None;
                self.total_supply = ::std::option::Option::None;
                self.frozen_supply.clear();
                self.trx_num = ::std::option::Option::None;
                self.num = ::std::option::Option::None;
                self.start_time = ::std::option::Option::None;
                self.end_time = ::std::option::Option::None;
                self.description = ::std::option::Option::None;
                self.url = ::std::option::Option::None;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static TronAssetIssueContract {
                static instance: TronAssetIssueContract = TronAssetIssueContract {
                    name: ::std::option::Option::None,
                    abbr: ::std::option::Option::None,
                    total_supply: ::std::option::Option::None,
                    frozen_supply: ::std::vec::Vec::new(),
                    trx_num: ::std::option::Option::None,
                    num: ::std::option::Option::None,
                    start_time: ::std::option::Option::None,
                    end_time: ::std::option::Option::None,
                    description: ::std::option::Option::None,
                    url: ::std::option::Option::None,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for TronAssetIssueContract {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("TronSignTx.TronContract.TronAssetIssueContract").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for TronAssetIssueContract {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for TronAssetIssueContract {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        /// Nested message and enums of message `TronAssetIssueContract`
        pub mod tron_asset_issue_contract {
            #[derive(PartialEq,Clone,Default,Debug)]
            // @@protoc_insertion_point(message:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply)
            pub struct TronFrozenSupply {
                // message fields
                // @@protoc_insertion_point(field:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply.frozen_amount)
                pub frozen_amount: ::std::option::Option<u64>,
                // @@protoc_insertion_point(field:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply.frozen_days)
                pub frozen_days: ::std::option::Option<u64>,
                // special fields
                // @@protoc_insertion_point(special_field:TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply.special_fields)
                pub special_fields: ::protobuf::SpecialFields,
            }

            impl<'a> ::std::default::Default for &'a TronFrozenSupply {
                fn default() -> &'a TronFrozenSupply {
                    <TronFrozenSupply as ::protobuf::Message>::default_instance()
                }
            }

            impl TronFrozenSupply {
                pub fn new() -> TronFrozenSupply {
                    ::std::default::Default::default()
                }

                // optional uint64 frozen_amount = 1;

                pub fn frozen_amount(&self) -> u64 {
                    self.frozen_amount.unwrap_or(0)
                }

                pub fn clear_frozen_amount(&mut self) {
                    self.frozen_amount = ::std::option::Option::None;
                }

                pub fn has_frozen_amount(&self) -> bool {
                    self.frozen_amount.is_some()
                }

                // Param is passed by value, moved
                pub fn set_frozen_amount(&mut self, v: u64) {
                    self.frozen_amount = ::std::option::Option::Some(v);
                }

                // optional uint64 frozen_days = 2;

                pub fn frozen_days(&self) -> u64 {
                    self.frozen_days.unwrap_or(0)
                }

                pub fn clear_frozen_days(&mut self) {
                    self.frozen_days = ::std::option::Option::None;
                }

                pub fn has_frozen_days(&self) -> bool {
                    self.frozen_days.is_some()
                }

                // Param is passed by value, moved
                pub fn set_frozen_days(&mut self, v: u64) {
                    self.frozen_days = ::std::option::Option::Some(v);
                }

                pub(in super::super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                    let mut fields = ::std::vec::Vec::with_capacity(2);
                    let mut oneofs = ::std::vec::Vec::with_capacity(0);
                    fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                        "frozen_amount",
                        |m: &TronFrozenSupply| { &m.frozen_amount },
                        |m: &mut TronFrozenSupply| { &mut m.frozen_amount },
                    ));
                    fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                        "frozen_days",
                        |m: &TronFrozenSupply| { &m.frozen_days },
                        |m: &mut TronFrozenSupply| { &mut m.frozen_days },
                    ));
                    ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TronFrozenSupply>(
                        "TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply",
                        fields,
                        oneofs,
                    )
                }
            }

            impl ::protobuf::Message for TronFrozenSupply {
                const NAME: &'static str = "TronFrozenSupply";

                fn is_initialized(&self) -> bool {
                    true
                }

                fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => {
                                self.frozen_amount = ::std::option::Option::Some(is.read_uint64()?);
                            },
                            16 => {
                                self.frozen_days = ::std::option::Option::Some(is.read_uint64()?);
                            },
                            tag => {
                                ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                            },
                        };
                    }
                    ::std::result::Result::Ok(())
                }

                // Compute sizes of nested messages
                #[allow(unused_variables)]
                fn compute_size(&self) -> u64 {
                    let mut my_size = 0;
                    if let Some(v) = self.frozen_amount {
                        my_size += ::protobuf::rt::uint64_size(1, v);
                    }
                    if let Some(v) = self.frozen_days {
                        my_size += ::protobuf::rt::uint64_size(2, v);
                    }
                    my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                    self.special_fields.cached_size().set(my_size as u32);
                    my_size
                }

                fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                    if let Some(v) = self.frozen_amount {
                        os.write_uint64(1, v)?;
                    }
                    if let Some(v) = self.frozen_days {
                        os.write_uint64(2, v)?;
                    }
                    os.write_unknown_fields(self.special_fields.unknown_fields())?;
                    ::std::result::Result::Ok(())
                }

                fn special_fields(&self) -> &::protobuf::SpecialFields {
                    &self.special_fields
                }

                fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                    &mut self.special_fields
                }

                fn new() -> TronFrozenSupply {
                    TronFrozenSupply::new()
                }

                fn clear(&mut self) {
                    self.frozen_amount = ::std::option::Option::None;
                    self.frozen_days = ::std::option::Option::None;
                    self.special_fields.clear();
                }

                fn default_instance() -> &'static TronFrozenSupply {
                    static instance: TronFrozenSupply = TronFrozenSupply {
                        frozen_amount: ::std::option::Option::None,
                        frozen_days: ::std::option::Option::None,
                        special_fields: ::protobuf::SpecialFields::new(),
                    };
                    &instance
                }
            }

            impl ::protobuf::MessageFull for TronFrozenSupply {
                fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                    static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                    descriptor.get(|| super::super::super::file_descriptor().message_by_package_relative_name("TronSignTx.TronContract.TronAssetIssueContract.TronFrozenSupply").unwrap()).clone()
                }
            }

            impl ::std::fmt::Display for TronFrozenSupply {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    ::protobuf::text_format::fmt(self, f)
                }
            }

            impl ::protobuf::reflect::ProtobufValue for TronFrozenSupply {
                type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
            }
        }

        ///  Participate in an asset 
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:TronSignTx.TronContract.TronParticipateAssetIssueContract)
        pub struct TronParticipateAssetIssueContract {
            // message fields
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronParticipateAssetIssueContract.to_address)
            pub to_address: ::std::option::Option<::std::vec::Vec<u8>>,
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronParticipateAssetIssueContract.asset_name)
            pub asset_name: ::std::option::Option<::std::string::String>,
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronParticipateAssetIssueContract.amount)
            pub amount: ::std::option::Option<u64>,
            // special fields
            // @@protoc_insertion_point(special_field:TronSignTx.TronContract.TronParticipateAssetIssueContract.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a TronParticipateAssetIssueContract {
            fn default() -> &'a TronParticipateAssetIssueContract {
                <TronParticipateAssetIssueContract as ::protobuf::Message>::default_instance()
            }
        }

        impl TronParticipateAssetIssueContract {
            pub fn new() -> TronParticipateAssetIssueContract {
                ::std::default::Default::default()
            }

            // optional bytes to_address = 1;

            pub fn to_address(&self) -> &[u8] {
                match self.to_address.as_ref() {
                    Some(v) => v,
                    None => &[],
                }
            }

            pub fn clear_to_address(&mut self) {
                self.to_address = ::std::option::Option::None;
            }

            pub fn has_to_address(&self) -> bool {
                self.to_address.is_some()
            }

            // Param is passed by value, moved
            pub fn set_to_address(&mut self, v: ::std::vec::Vec<u8>) {
                self.to_address = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_to_address(&mut self) -> &mut ::std::vec::Vec<u8> {
                if self.to_address.is_none() {
                    self.to_address = ::std::option::Option::Some(::std::vec::Vec::new());
                }
                self.to_address.as_mut().unwrap()
            }

            // Take field
            pub fn take_to_address(&mut self) -> ::std::vec::Vec<u8> {
                self.to_address.take().unwrap_or_else(|| ::std::vec::Vec::new())
            }

            // optional string asset_name = 2;

            pub fn asset_name(&self) -> &str {
                match self.asset_name.as_ref() {
                    Some(v) => v,
                    None => "",
                }
            }

            pub fn clear_asset_name(&mut self) {
                self.asset_name = ::std::option::Option::None;
            }

            pub fn has_asset_name(&self) -> bool {
                self.asset_name.is_some()
            }

            // Param is passed by value, moved
            pub fn set_asset_name(&mut self, v: ::std::string::String) {
                self.asset_name = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_asset_name(&mut self) -> &mut ::std::string::String {
                if self.asset_name.is_none() {
                    self.asset_name = ::std::option::Option::Some(::std::string::String::new());
                }
                self.asset_name.as_mut().unwrap()
            }

            // Take field
            pub fn take_asset_name(&mut self) -> ::std::string::String {
                self.asset_name.take().unwrap_or_else(|| ::std::string::String::new())
            }

            // optional uint64 amount = 3;

            pub fn amount(&self) -> u64 {
                self.amount.unwrap_or(0)
            }

            pub fn clear_amount(&mut self) {
                self.amount = ::std::option::Option::None;
            }

            pub fn has_amount(&self) -> bool {
                self.amount.is_some()
            }

            // Param is passed by value, moved
            pub fn set_amount(&mut self, v: u64) {
                self.amount = ::std::option::Option::Some(v);
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(3);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "to_address",
                    |m: &TronParticipateAssetIssueContract| { &m.to_address },
                    |m: &mut TronParticipateAssetIssueContract| { &mut m.to_address },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "asset_name",
                    |m: &TronParticipateAssetIssueContract| { &m.asset_name },
                    |m: &mut TronParticipateAssetIssueContract| { &mut m.asset_name },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "amount",
                    |m: &TronParticipateAssetIssueContract| { &m.amount },
                    |m: &mut TronParticipateAssetIssueContract| { &mut m.amount },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TronParticipateAssetIssueContract>(
                    "TronSignTx.TronContract.TronParticipateAssetIssueContract",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for TronParticipateAssetIssueContract {
            const NAME: &'static str = "TronParticipateAssetIssueContract";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.to_address = ::std::option::Option::Some(is.read_bytes()?);
                        },
                        18 => {
                            self.asset_name = ::std::option::Option::Some(is.read_string()?);
                        },
                        24 => {
                            self.amount = ::std::option::Option::Some(is.read_uint64()?);
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.to_address.as_ref() {
                    my_size += ::protobuf::rt::bytes_size(1, &v);
                }
                if let Some(v) = self.asset_name.as_ref() {
                    my_size += ::protobuf::rt::string_size(2, &v);
                }
                if let Some(v) = self.amount {
                    my_size += ::protobuf::rt::uint64_size(3, v);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.to_address.as_ref() {
                    os.write_bytes(1, v)?;
                }
                if let Some(v) = self.asset_name.as_ref() {
                    os.write_string(2, v)?;
                }
                if let Some(v) = self.amount {
                    os.write_uint64(3, v)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> TronParticipateAssetIssueContract {
                TronParticipateAssetIssueContract::new()
            }

            fn clear(&mut self) {
                self.to_address = ::std::option::Option::None;
                self.asset_name = ::std::option::Option::None;
                self.amount = ::std::option::Option::None;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static TronParticipateAssetIssueContract {
                static instance: TronParticipateAssetIssueContract = TronParticipateAssetIssueContract {
                    to_address: ::std::option::Option::None,
                    asset_name: ::std::option::Option::None,
                    amount: ::std::option::Option::None,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for TronParticipateAssetIssueContract {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("TronSignTx.TronContract.TronParticipateAssetIssueContract").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for TronParticipateAssetIssueContract {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for TronParticipateAssetIssueContract {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        ///  Freeze TRX balance                        
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:TronSignTx.TronContract.TronFreezeBalanceContract)
        pub struct TronFreezeBalanceContract {
            // message fields
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronFreezeBalanceContract.frozen_balance)
            pub frozen_balance: ::std::option::Option<u64>,
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronFreezeBalanceContract.frozen_duration)
            pub frozen_duration: ::std::option::Option<u64>,
            // special fields
            // @@protoc_insertion_point(special_field:TronSignTx.TronContract.TronFreezeBalanceContract.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a TronFreezeBalanceContract {
            fn default() -> &'a TronFreezeBalanceContract {
                <TronFreezeBalanceContract as ::protobuf::Message>::default_instance()
            }
        }

        impl TronFreezeBalanceContract {
            pub fn new() -> TronFreezeBalanceContract {
                ::std::default::Default::default()
            }

            // optional uint64 frozen_balance = 1;

            pub fn frozen_balance(&self) -> u64 {
                self.frozen_balance.unwrap_or(0)
            }

            pub fn clear_frozen_balance(&mut self) {
                self.frozen_balance = ::std::option::Option::None;
            }

            pub fn has_frozen_balance(&self) -> bool {
                self.frozen_balance.is_some()
            }

            // Param is passed by value, moved
            pub fn set_frozen_balance(&mut self, v: u64) {
                self.frozen_balance = ::std::option::Option::Some(v);
            }

            // optional uint64 frozen_duration = 2;

            pub fn frozen_duration(&self) -> u64 {
                self.frozen_duration.unwrap_or(0)
            }

            pub fn clear_frozen_duration(&mut self) {
                self.frozen_duration = ::std::option::Option::None;
            }

            pub fn has_frozen_duration(&self) -> bool {
                self.frozen_duration.is_some()
            }

            // Param is passed by value, moved
            pub fn set_frozen_duration(&mut self, v: u64) {
                self.frozen_duration = ::std::option::Option::Some(v);
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(2);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "frozen_balance",
                    |m: &TronFreezeBalanceContract| { &m.frozen_balance },
                    |m: &mut TronFreezeBalanceContract| { &mut m.frozen_balance },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "frozen_duration",
                    |m: &TronFreezeBalanceContract| { &m.frozen_duration },
                    |m: &mut TronFreezeBalanceContract| { &mut m.frozen_duration },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TronFreezeBalanceContract>(
                    "TronSignTx.TronContract.TronFreezeBalanceContract",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for TronFreezeBalanceContract {
            const NAME: &'static str = "TronFreezeBalanceContract";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        8 => {
                            self.frozen_balance = ::std::option::Option::Some(is.read_uint64()?);
                        },
                        16 => {
                            self.frozen_duration = ::std::option::Option::Some(is.read_uint64()?);
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.frozen_balance {
                    my_size += ::protobuf::rt::uint64_size(1, v);
                }
                if let Some(v) = self.frozen_duration {
                    my_size += ::protobuf::rt::uint64_size(2, v);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.frozen_balance {
                    os.write_uint64(1, v)?;
                }
                if let Some(v) = self.frozen_duration {
                    os.write_uint64(2, v)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> TronFreezeBalanceContract {
                TronFreezeBalanceContract::new()
            }

            fn clear(&mut self) {
                self.frozen_balance = ::std::option::Option::None;
                self.frozen_duration = ::std::option::Option::None;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static TronFreezeBalanceContract {
                static instance: TronFreezeBalanceContract = TronFreezeBalanceContract {
                    frozen_balance: ::std::option::Option::None,
                    frozen_duration: ::std::option::Option::None,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for TronFreezeBalanceContract {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("TronSignTx.TronContract.TronFreezeBalanceContract").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for TronFreezeBalanceContract {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for TronFreezeBalanceContract {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        ///  Unfreeze TRX Balance
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:TronSignTx.TronContract.TronUnfreezeBalanceContract)
        pub struct TronUnfreezeBalanceContract {
            // special fields
            // @@protoc_insertion_point(special_field:TronSignTx.TronContract.TronUnfreezeBalanceContract.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a TronUnfreezeBalanceContract {
            fn default() -> &'a TronUnfreezeBalanceContract {
                <TronUnfreezeBalanceContract as ::protobuf::Message>::default_instance()
            }
        }

        impl TronUnfreezeBalanceContract {
            pub fn new() -> TronUnfreezeBalanceContract {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(0);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TronUnfreezeBalanceContract>(
                    "TronSignTx.TronContract.TronUnfreezeBalanceContract",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for TronUnfreezeBalanceContract {
            const NAME: &'static str = "TronUnfreezeBalanceContract";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> TronUnfreezeBalanceContract {
                TronUnfreezeBalanceContract::new()
            }

            fn clear(&mut self) {
                self.special_fields.clear();
            }

            fn default_instance() -> &'static TronUnfreezeBalanceContract {
                static instance: TronUnfreezeBalanceContract = TronUnfreezeBalanceContract {
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for TronUnfreezeBalanceContract {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("TronSignTx.TronContract.TronUnfreezeBalanceContract").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for TronUnfreezeBalanceContract {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for TronUnfreezeBalanceContract {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        ///  Unfreeze Asset Balance
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:TronSignTx.TronContract.TronUnfreezeAssetContract)
        pub struct TronUnfreezeAssetContract {
            // special fields
            // @@protoc_insertion_point(special_field:TronSignTx.TronContract.TronUnfreezeAssetContract.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a TronUnfreezeAssetContract {
            fn default() -> &'a TronUnfreezeAssetContract {
                <TronUnfreezeAssetContract as ::protobuf::Message>::default_instance()
            }
        }

        impl TronUnfreezeAssetContract {
            pub fn new() -> TronUnfreezeAssetContract {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(0);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TronUnfreezeAssetContract>(
                    "TronSignTx.TronContract.TronUnfreezeAssetContract",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for TronUnfreezeAssetContract {
            const NAME: &'static str = "TronUnfreezeAssetContract";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> TronUnfreezeAssetContract {
                TronUnfreezeAssetContract::new()
            }

            fn clear(&mut self) {
                self.special_fields.clear();
            }

            fn default_instance() -> &'static TronUnfreezeAssetContract {
                static instance: TronUnfreezeAssetContract = TronUnfreezeAssetContract {
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for TronUnfreezeAssetContract {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("TronSignTx.TronContract.TronUnfreezeAssetContract").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for TronUnfreezeAssetContract {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for TronUnfreezeAssetContract {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        ///  Withdraw witness balance
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:TronSignTx.TronContract.TronWithdrawBalanceContract)
        pub struct TronWithdrawBalanceContract {
            // special fields
            // @@protoc_insertion_point(special_field:TronSignTx.TronContract.TronWithdrawBalanceContract.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a TronWithdrawBalanceContract {
            fn default() -> &'a TronWithdrawBalanceContract {
                <TronWithdrawBalanceContract as ::protobuf::Message>::default_instance()
            }
        }

        impl TronWithdrawBalanceContract {
            pub fn new() -> TronWithdrawBalanceContract {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(0);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TronWithdrawBalanceContract>(
                    "TronSignTx.TronContract.TronWithdrawBalanceContract",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for TronWithdrawBalanceContract {
            const NAME: &'static str = "TronWithdrawBalanceContract";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> TronWithdrawBalanceContract {
                TronWithdrawBalanceContract::new()
            }

            fn clear(&mut self) {
                self.special_fields.clear();
            }

            fn default_instance() -> &'static TronWithdrawBalanceContract {
                static instance: TronWithdrawBalanceContract = TronWithdrawBalanceContract {
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for TronWithdrawBalanceContract {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("TronSignTx.TronContract.TronWithdrawBalanceContract").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for TronWithdrawBalanceContract {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for TronWithdrawBalanceContract {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        ///  Update Asset
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:TronSignTx.TronContract.TronUpdateAssetContract)
        pub struct TronUpdateAssetContract {
            // message fields
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronUpdateAssetContract.description)
            pub description: ::std::option::Option<::std::string::String>,
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronUpdateAssetContract.url)
            pub url: ::std::option::Option<::std::string::String>,
            // special fields
            // @@protoc_insertion_point(special_field:TronSignTx.TronContract.TronUpdateAssetContract.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a TronUpdateAssetContract {
            fn default() -> &'a TronUpdateAssetContract {
                <TronUpdateAssetContract as ::protobuf::Message>::default_instance()
            }
        }

        impl TronUpdateAssetContract {
            pub fn new() -> TronUpdateAssetContract {
                ::std::default::Default::default()
            }

            // optional string description = 1;

            pub fn description(&self) -> &str {
                match self.description.as_ref() {
                    Some(v) => v,
                    None => "",
                }
            }

            pub fn clear_description(&mut self) {
                self.description = ::std::option::Option::None;
            }

            pub fn has_description(&self) -> bool {
                self.description.is_some()
            }

            // Param is passed by value, moved
            pub fn set_description(&mut self, v: ::std::string::String) {
                self.description = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_description(&mut self) -> &mut ::std::string::String {
                if self.description.is_none() {
                    self.description = ::std::option::Option::Some(::std::string::String::new());
                }
                self.description.as_mut().unwrap()
            }

            // Take field
            pub fn take_description(&mut self) -> ::std::string::String {
                self.description.take().unwrap_or_else(|| ::std::string::String::new())
            }

            // optional string url = 2;

            pub fn url(&self) -> &str {
                match self.url.as_ref() {
                    Some(v) => v,
                    None => "",
                }
            }

            pub fn clear_url(&mut self) {
                self.url = ::std::option::Option::None;
            }

            pub fn has_url(&self) -> bool {
                self.url.is_some()
            }

            // Param is passed by value, moved
            pub fn set_url(&mut self, v: ::std::string::String) {
                self.url = ::std::option::Option::Some(v);
            }

            // Mutable pointer to the field.
            // If field is not initialized, it is initialized with default value first.
            pub fn mut_url(&mut self) -> &mut ::std::string::String {
                if self.url.is_none() {
                    self.url = ::std::option::Option::Some(::std::string::String::new());
                }
                self.url.as_mut().unwrap()
            }

            // Take field
            pub fn take_url(&mut self) -> ::std::string::String {
                self.url.take().unwrap_or_else(|| ::std::string::String::new())
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(2);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "description",
                    |m: &TronUpdateAssetContract| { &m.description },
                    |m: &mut TronUpdateAssetContract| { &mut m.description },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "url",
                    |m: &TronUpdateAssetContract| { &m.url },
                    |m: &mut TronUpdateAssetContract| { &mut m.url },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TronUpdateAssetContract>(
                    "TronSignTx.TronContract.TronUpdateAssetContract",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for TronUpdateAssetContract {
            const NAME: &'static str = "TronUpdateAssetContract";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.description = ::std::option::Option::Some(is.read_string()?);
                        },
                        18 => {
                            self.url = ::std::option::Option::Some(is.read_string()?);
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.description.as_ref() {
                    my_size += ::protobuf::rt::string_size(1, &v);
                }
                if let Some(v) = self.url.as_ref() {
                    my_size += ::protobuf::rt::string_size(2, &v);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.description.as_ref() {
                    os.write_string(1, v)?;
                }
                if let Some(v) = self.url.as_ref() {
                    os.write_string(2, v)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> TronUpdateAssetContract {
                TronUpdateAssetContract::new()
            }

            fn clear(&mut self) {
                self.description = ::std::option::Option::None;
                self.url = ::std::option::Option::None;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static TronUpdateAssetContract {
                static instance: TronUpdateAssetContract = TronUpdateAssetContract {
                    description: ::std::option::Option::None,
                    url: ::std::option::Option::None,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for TronUpdateAssetContract {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("TronSignTx.TronContract.TronUpdateAssetContract").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for TronUpdateAssetContract {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for TronUpdateAssetContract {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        ///  Network proposal contract
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:TronSignTx.TronContract.TronProposalCreateContract)
        pub struct TronProposalCreateContract {
            // message fields
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronProposalCreateContract.parameters)
            pub parameters: ::std::vec::Vec<tron_proposal_create_contract::TronProposalParameters>,
            // special fields
            // @@protoc_insertion_point(special_field:TronSignTx.TronContract.TronProposalCreateContract.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a TronProposalCreateContract {
            fn default() -> &'a TronProposalCreateContract {
                <TronProposalCreateContract as ::protobuf::Message>::default_instance()
            }
        }

        impl TronProposalCreateContract {
            pub fn new() -> TronProposalCreateContract {
                ::std::default::Default::default()
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(1);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                    "parameters",
                    |m: &TronProposalCreateContract| { &m.parameters },
                    |m: &mut TronProposalCreateContract| { &mut m.parameters },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TronProposalCreateContract>(
                    "TronSignTx.TronContract.TronProposalCreateContract",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for TronProposalCreateContract {
            const NAME: &'static str = "TronProposalCreateContract";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        10 => {
                            self.parameters.push(is.read_message()?);
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                for value in &self.parameters {
                    let len = value.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                };
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                for v in &self.parameters {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                };
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> TronProposalCreateContract {
                TronProposalCreateContract::new()
            }

            fn clear(&mut self) {
                self.parameters.clear();
                self.special_fields.clear();
            }

            fn default_instance() -> &'static TronProposalCreateContract {
                static instance: TronProposalCreateContract = TronProposalCreateContract {
                    parameters: ::std::vec::Vec::new(),
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for TronProposalCreateContract {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("TronSignTx.TronContract.TronProposalCreateContract").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for TronProposalCreateContract {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for TronProposalCreateContract {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        /// Nested message and enums of message `TronProposalCreateContract`
        pub mod tron_proposal_create_contract {
            #[derive(PartialEq,Clone,Default,Debug)]
            // @@protoc_insertion_point(message:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters)
            pub struct TronProposalParameters {
                // message fields
                // @@protoc_insertion_point(field:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters.key)
                pub key: ::std::option::Option<u64>,
                // @@protoc_insertion_point(field:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters.value)
                pub value: ::std::option::Option<u64>,
                // special fields
                // @@protoc_insertion_point(special_field:TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters.special_fields)
                pub special_fields: ::protobuf::SpecialFields,
            }

            impl<'a> ::std::default::Default for &'a TronProposalParameters {
                fn default() -> &'a TronProposalParameters {
                    <TronProposalParameters as ::protobuf::Message>::default_instance()
                }
            }

            impl TronProposalParameters {
                pub fn new() -> TronProposalParameters {
                    ::std::default::Default::default()
                }

                // optional uint64 key = 1;

                pub fn key(&self) -> u64 {
                    self.key.unwrap_or(0)
                }

                pub fn clear_key(&mut self) {
                    self.key = ::std::option::Option::None;
                }

                pub fn has_key(&self) -> bool {
                    self.key.is_some()
                }

                // Param is passed by value, moved
                pub fn set_key(&mut self, v: u64) {
                    self.key = ::std::option::Option::Some(v);
                }

                // optional uint64 value = 2;

                pub fn value(&self) -> u64 {
                    self.value.unwrap_or(0)
                }

                pub fn clear_value(&mut self) {
                    self.value = ::std::option::Option::None;
                }

                pub fn has_value(&self) -> bool {
                    self.value.is_some()
                }

                // Param is passed by value, moved
                pub fn set_value(&mut self, v: u64) {
                    self.value = ::std::option::Option::Some(v);
                }

                pub(in super::super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                    let mut fields = ::std::vec::Vec::with_capacity(2);
                    let mut oneofs = ::std::vec::Vec::with_capacity(0);
                    fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                        "key",
                        |m: &TronProposalParameters| { &m.key },
                        |m: &mut TronProposalParameters| { &mut m.key },
                    ));
                    fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                        "value",
                        |m: &TronProposalParameters| { &m.value },
                        |m: &mut TronProposalParameters| { &mut m.value },
                    ));
                    ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TronProposalParameters>(
                        "TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters",
                        fields,
                        oneofs,
                    )
                }
            }

            impl ::protobuf::Message for TronProposalParameters {
                const NAME: &'static str = "TronProposalParameters";

                fn is_initialized(&self) -> bool {
                    true
                }

                fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => {
                                self.key = ::std::option::Option::Some(is.read_uint64()?);
                            },
                            16 => {
                                self.value = ::std::option::Option::Some(is.read_uint64()?);
                            },
                            tag => {
                                ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                            },
                        };
                    }
                    ::std::result::Result::Ok(())
                }

                // Compute sizes of nested messages
                #[allow(unused_variables)]
                fn compute_size(&self) -> u64 {
                    let mut my_size = 0;
                    if let Some(v) = self.key {
                        my_size += ::protobuf::rt::uint64_size(1, v);
                    }
                    if let Some(v) = self.value {
                        my_size += ::protobuf::rt::uint64_size(2, v);
                    }
                    my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                    self.special_fields.cached_size().set(my_size as u32);
                    my_size
                }

                fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                    if let Some(v) = self.key {
                        os.write_uint64(1, v)?;
                    }
                    if let Some(v) = self.value {
                        os.write_uint64(2, v)?;
                    }
                    os.write_unknown_fields(self.special_fields.unknown_fields())?;
                    ::std::result::Result::Ok(())
                }

                fn special_fields(&self) -> &::protobuf::SpecialFields {
                    &self.special_fields
                }

                fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                    &mut self.special_fields
                }

                fn new() -> TronProposalParameters {
                    TronProposalParameters::new()
                }

                fn clear(&mut self) {
                    self.key = ::std::option::Option::None;
                    self.value = ::std::option::Option::None;
                    self.special_fields.clear();
                }

                fn default_instance() -> &'static TronProposalParameters {
                    static instance: TronProposalParameters = TronProposalParameters {
                        key: ::std::option::Option::None,
                        value: ::std::option::Option::None,
                        special_fields: ::protobuf::SpecialFields::new(),
                    };
                    &instance
                }
            }

            impl ::protobuf::MessageFull for TronProposalParameters {
                fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                    static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                    descriptor.get(|| super::super::super::file_descriptor().message_by_package_relative_name("TronSignTx.TronContract.TronProposalCreateContract.TronProposalParameters").unwrap()).clone()
                }
            }

            impl ::std::fmt::Display for TronProposalParameters {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    ::protobuf::text_format::fmt(self, f)
                }
            }

            impl ::protobuf::reflect::ProtobufValue for TronProposalParameters {
                type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
            }
        }

        ///  Approval contract
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:TronSignTx.TronContract.TronProposalApproveContract)
        pub struct TronProposalApproveContract {
            // message fields
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronProposalApproveContract.proposal_id)
            pub proposal_id: ::std::option::Option<u64>,
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronProposalApproveContract.is_add_approval)
            pub is_add_approval: ::std::option::Option<bool>,
            // special fields
            // @@protoc_insertion_point(special_field:TronSignTx.TronContract.TronProposalApproveContract.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a TronProposalApproveContract {
            fn default() -> &'a TronProposalApproveContract {
                <TronProposalApproveContract as ::protobuf::Message>::default_instance()
            }
        }

        impl TronProposalApproveContract {
            pub fn new() -> TronProposalApproveContract {
                ::std::default::Default::default()
            }

            // optional uint64 proposal_id = 1;

            pub fn proposal_id(&self) -> u64 {
                self.proposal_id.unwrap_or(0)
            }

            pub fn clear_proposal_id(&mut self) {
                self.proposal_id = ::std::option::Option::None;
            }

            pub fn has_proposal_id(&self) -> bool {
                self.proposal_id.is_some()
            }

            // Param is passed by value, moved
            pub fn set_proposal_id(&mut self, v: u64) {
                self.proposal_id = ::std::option::Option::Some(v);
            }

            // optional bool is_add_approval = 2;

            pub fn is_add_approval(&self) -> bool {
                self.is_add_approval.unwrap_or(false)
            }

            pub fn clear_is_add_approval(&mut self) {
                self.is_add_approval = ::std::option::Option::None;
            }

            pub fn has_is_add_approval(&self) -> bool {
                self.is_add_approval.is_some()
            }

            // Param is passed by value, moved
            pub fn set_is_add_approval(&mut self, v: bool) {
                self.is_add_approval = ::std::option::Option::Some(v);
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(2);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "proposal_id",
                    |m: &TronProposalApproveContract| { &m.proposal_id },
                    |m: &mut TronProposalApproveContract| { &mut m.proposal_id },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "is_add_approval",
                    |m: &TronProposalApproveContract| { &m.is_add_approval },
                    |m: &mut TronProposalApproveContract| { &mut m.is_add_approval },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TronProposalApproveContract>(
                    "TronSignTx.TronContract.TronProposalApproveContract",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for TronProposalApproveContract {
            const NAME: &'static str = "TronProposalApproveContract";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        8 => {
                            self.proposal_id = ::std::option::Option::Some(is.read_uint64()?);
                        },
                        16 => {
                            self.is_add_approval = ::std::option::Option::Some(is.read_bool()?);
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.proposal_id {
                    my_size += ::protobuf::rt::uint64_size(1, v);
                }
                if let Some(v) = self.is_add_approval {
                    my_size += 1 + 1;
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.proposal_id {
                    os.write_uint64(1, v)?;
                }
                if let Some(v) = self.is_add_approval {
                    os.write_bool(2, v)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> TronProposalApproveContract {
                TronProposalApproveContract::new()
            }

            fn clear(&mut self) {
                self.proposal_id = ::std::option::Option::None;
                self.is_add_approval = ::std::option::Option::None;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static TronProposalApproveContract {
                static instance: TronProposalApproveContract = TronProposalApproveContract {
                    proposal_id: ::std::option::Option::None,
                    is_add_approval: ::std::option::Option::None,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for TronProposalApproveContract {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("TronSignTx.TronContract.TronProposalApproveContract").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for TronProposalApproveContract {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for TronProposalApproveContract {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }

        ///  Delete proposal
        #[derive(PartialEq,Clone,Default,Debug)]
        // @@protoc_insertion_point(message:TronSignTx.TronContract.TronProposalDeleteContract)
        pub struct TronProposalDeleteContract {
            // message fields
            // @@protoc_insertion_point(field:TronSignTx.TronContract.TronProposalDeleteContract.proposal_id)
            pub proposal_id: ::std::option::Option<u64>,
            // special fields
            // @@protoc_insertion_point(special_field:TronSignTx.TronContract.TronProposalDeleteContract.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a TronProposalDeleteContract {
            fn default() -> &'a TronProposalDeleteContract {
                <TronProposalDeleteContract as ::protobuf::Message>::default_instance()
            }
        }

        impl TronProposalDeleteContract {
            pub fn new() -> TronProposalDeleteContract {
                ::std::default::Default::default()
            }

            // optional uint64 proposal_id = 1;

            pub fn proposal_id(&self) -> u64 {
                self.proposal_id.unwrap_or(0)
            }

            pub fn clear_proposal_id(&mut self) {
                self.proposal_id = ::std::option::Option::None;
            }

            pub fn has_proposal_id(&self) -> bool {
                self.proposal_id.is_some()
            }

            // Param is passed by value, moved
            pub fn set_proposal_id(&mut self, v: u64) {
                self.proposal_id = ::std::option::Option::Some(v);
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(1);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "proposal_id",
                    |m: &TronProposalDeleteContract| { &m.proposal_id },
                    |m: &mut TronProposalDeleteContract| { &mut m.proposal_id },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TronProposalDeleteContract>(
                    "TronSignTx.TronContract.TronProposalDeleteContract",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for TronProposalDeleteContract {
            const NAME: &'static str = "TronProposalDeleteContract";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        8 => {
                            self.proposal_id = ::std::option::Option::Some(is.read_uint64()?);
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.proposal_id {
                    my_size += ::protobuf::rt::uint64_size(1, v);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.proposal_id {
                    os.write_uint64(1, v)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> TronProposalDeleteContract {
                TronProposalDeleteContract::new()
            }

            fn clear(&mut self) {
                self.proposal_id = ::std::option::Option::None;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static TronProposalDeleteContract {
                static instance: TronProposalDeleteContract = TronProposalDeleteContract {
                    proposal_id: ::std::option::Option::None,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for TronProposalDeleteContract {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("TronSignTx.TronContract.TronProposalDeleteContract").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for TronProposalDeleteContract {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for TronProposalDeleteContract {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }
}

/// *
///  Response: Contains Tron transaction signature
///  @prev TronSignTx
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:TronSignedTx)
pub struct TronSignedTx {
    // message fields
    // @@protoc_insertion_point(field:TronSignedTx.signature)
    pub signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:TronSignedTx.serialized_tx)
    pub serialized_tx: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:TronSignedTx.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TronSignedTx {
    fn default() -> &'a TronSignedTx {
        <TronSignedTx as ::protobuf::Message>::default_instance()
    }
}

impl TronSignedTx {
    pub fn new() -> TronSignedTx {
        ::std::default::Default::default()
    }

    // optional bytes signature = 1;

    pub fn signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes serialized_tx = 2;

    pub fn serialized_tx(&self) -> &[u8] {
        match self.serialized_tx.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_serialized_tx(&mut self) {
        self.serialized_tx = ::std::option::Option::None;
    }

    pub fn has_serialized_tx(&self) -> bool {
        self.serialized_tx.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serialized_tx(&mut self, v: ::std::vec::Vec<u8>) {
        self.serialized_tx = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serialized_tx(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.serialized_tx.is_none() {
            self.serialized_tx = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.serialized_tx.as_mut().unwrap()
    }

    // Take field
    pub fn take_serialized_tx(&mut self) -> ::std::vec::Vec<u8> {
        self.serialized_tx.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature",
            |m: &TronSignedTx| { &m.signature },
            |m: &mut TronSignedTx| { &mut m.signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "serialized_tx",
            |m: &TronSignedTx| { &m.serialized_tx },
            |m: &mut TronSignedTx| { &mut m.serialized_tx },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TronSignedTx>(
            "TronSignedTx",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TronSignedTx {
    const NAME: &'static str = "TronSignedTx";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.serialized_tx = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.serialized_tx.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.signature.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.serialized_tx.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TronSignedTx {
        TronSignedTx::new()
    }

    fn clear(&mut self) {
        self.signature = ::std::option::Option::None;
        self.serialized_tx = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TronSignedTx {
        static instance: TronSignedTx = TronSignedTx {
            signature: ::std::option::Option::None,
            serialized_tx: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TronSignedTx {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TronSignedTx").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TronSignedTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TronSignedTx {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13messages-tron.proto\"P\n\x0eTronGetAddress\x12\x1b\n\taddress_n\
    \x18\x01\x20\x03(\rR\x08addressN\x12!\n\x0cshow_display\x18\x02\x20\x01(\
    \x08R\x0bshowDisplay\"'\n\x0bTronAddress\x12\x18\n\x07address\x18\x01\
    \x20\x01(\tR\x07address\"\xcb\x1d\n\nTronSignTx\x12\x1b\n\taddress_n\x18\
    \x01\x20\x03(\rR\x08addressN\x12&\n\x0fref_block_bytes\x18\x02\x20\x01(\
    \x0cR\rrefBlockBytes\x12$\n\x0eref_block_hash\x18\x03\x20\x01(\x0cR\x0cr\
    efBlockHash\x12\x1e\n\nexpiration\x18\x04\x20\x01(\x04R\nexpiration\x12\
    \x12\n\x04data\x18\x05\x20\x01(\tR\x04data\x124\n\x08contract\x18\x06\
    \x20\x01(\x0b2\x18.TronSignTx.TronContractR\x08contract\x12\x1c\n\ttimes\
    tamp\x18\x07\x20\x01(\x04R\ttimestamp\x1a\xc9\x1b\n\x0cTronContract\x12Z\
    \n\x11transfer_contract\x18\x01\x20\x01(\x0b2-.TronSignTx.TronContract.T\
    ronTransferContractR\x10transferContract\x12j\n\x17transfer_asset_contra\
    ct\x18\x02\x20\x01(\x0b22.TronSignTx.TronContract.TronTransferAssetContr\
    actR\x15transferAssetContract\x12d\n\x15vote_witness_contract\x18\x04\
    \x20\x01(\x0b20.TronSignTx.TronContract.TronVoteWitnessContractR\x13vote\
    WitnessContract\x12j\n\x17witness_create_contract\x18\x05\x20\x01(\x0b22\
    .TronSignTx.TronContract.TronWitnessCreateContractR\x15witnessCreateCont\
    ract\x12a\n\x14asset_issue_contract\x18\x06\x20\x01(\x0b2/.TronSignTx.Tr\
    onContract.TronAssetIssueContractR\x12assetIssueContract\x12j\n\x17witne\
    ss_update_contract\x18\x08\x20\x01(\x0b22.TronSignTx.TronContract.TronWi\
    tnessUpdateContractR\x15witnessUpdateContract\x12\x83\x01\n\x20participa\
    te_asset_issue_contract\x18\t\x20\x01(\x0b2:.TronSignTx.TronContract.Tro\
    nParticipateAssetIssueContractR\x1dparticipateAssetIssueContract\x12j\n\
    \x17account_update_contract\x18\n\x20\x01(\x0b22.TronSignTx.TronContract\
    .TronAccountUpdateContractR\x15accountUpdateContract\x12j\n\x17freeze_ba\
    lance_contract\x18\x0b\x20\x01(\x0b22.TronSignTx.TronContract.TronFreeze\
    BalanceContractR\x15freezeBalanceContract\x12p\n\x19unfreeze_balance_con\
    tract\x18\x0c\x20\x01(\x0b24.TronSignTx.TronContract.TronUnfreezeBalance\
    ContractR\x17unfreezeBalanceContract\x12p\n\x19withdraw_balance_contract\
    \x18\r\x20\x01(\x0b24.TronSignTx.TronContract.TronWithdrawBalanceContrac\
    tR\x17withdrawBalanceContract\x12j\n\x17unfreeze_asset_contract\x18\x0e\
    \x20\x01(\x0b22.TronSignTx.TronContract.TronUnfreezeAssetContractR\x15un\
    freezeAssetContract\x12d\n\x15update_asset_contract\x18\x0f\x20\x01(\x0b\
    20.TronSignTx.TronContract.TronUpdateAssetContractR\x13updateAssetContra\
    ct\x12m\n\x18proposal_create_contract\x18\x10\x20\x01(\x0b23.TronSignTx.\
    TronContract.TronProposalCreateContractR\x16proposalCreateContract\x12p\
    \n\x19proposal_approve_contract\x18\x11\x20\x01(\x0b24.TronSignTx.TronCo\
    ntract.TronProposalApproveContractR\x17proposalApproveContract\x12m\n\
    \x18proposal_delete_contract\x18\x12\x20\x01(\x0b23.TronSignTx.TronContr\
    act.TronProposalDeleteContractR\x16proposalDeleteContract\x1a>\n\x19Tron\
    AccountUpdateContract\x12!\n\x0caccount_name\x18\x01\x20\x01(\tR\x0bacco\
    untName\x1aM\n\x14TronTransferContract\x12\x1d\n\nto_address\x18\x01\x20\
    \x01(\x0cR\ttoAddress\x12\x16\n\x06amount\x18\x02\x20\x01(\x04R\x06amoun\
    t\x1aq\n\x19TronTransferAssetContract\x12\x1d\n\nasset_name\x18\x01\x20\
    \x01(\tR\tassetName\x12\x1d\n\nto_address\x18\x02\x20\x01(\x0cR\ttoAddre\
    ss\x12\x16\n\x06amount\x18\x03\x20\x01(\x04R\x06amount\x1a\xb8\x01\n\x17\
    TronVoteWitnessContract\x12O\n\x05votes\x18\x01\x20\x03(\x0b29.TronSignT\
    x.TronContract.TronVoteWitnessContract.TronVoteR\x05votes\x1aL\n\x08Tron\
    Vote\x12!\n\x0cvote_address\x18\x01\x20\x01(\x0cR\x0bvoteAddress\x12\x1d\
    \n\nvote_count\x18\x02\x20\x01(\x04R\tvoteCount\x1a-\n\x19TronWitnessCre\
    ateContract\x12\x10\n\x03url\x18\x01\x20\x01(\tR\x03url\x1a:\n\x19TronWi\
    tnessUpdateContract\x12\x1d\n\nupdate_url\x18\x02\x20\x01(\tR\tupdateUrl\
    \x1a\xbd\x03\n\x16TronAssetIssueContract\x12\x12\n\x04name\x18\x02\x20\
    \x01(\tR\x04name\x12\x12\n\x04abbr\x18\x03\x20\x01(\tR\x04abbr\x12!\n\
    \x0ctotal_supply\x18\x04\x20\x01(\x04R\x0btotalSupply\x12e\n\rfrozen_sup\
    ply\x18\x05\x20\x03(\x0b2@.TronSignTx.TronContract.TronAssetIssueContrac\
    t.TronFrozenSupplyR\x0cfrozenSupply\x12\x17\n\x07trx_num\x18\x06\x20\x01\
    (\rR\x06trxNum\x12\x10\n\x03num\x18\x07\x20\x01(\rR\x03num\x12\x1d\n\nst\
    art_time\x18\x08\x20\x01(\x04R\tstartTime\x12\x19\n\x08end_time\x18\t\
    \x20\x01(\x04R\x07endTime\x12\x20\n\x0bdescription\x18\n\x20\x01(\tR\x0b\
    description\x12\x10\n\x03url\x18\x0b\x20\x01(\tR\x03url\x1aX\n\x10TronFr\
    ozenSupply\x12#\n\rfrozen_amount\x18\x01\x20\x01(\x04R\x0cfrozenAmount\
    \x12\x1f\n\x0bfrozen_days\x18\x02\x20\x01(\x04R\nfrozenDays\x1ay\n!TronP\
    articipateAssetIssueContract\x12\x1d\n\nto_address\x18\x01\x20\x01(\x0cR\
    \ttoAddress\x12\x1d\n\nasset_name\x18\x02\x20\x01(\tR\tassetName\x12\x16\
    \n\x06amount\x18\x03\x20\x01(\x04R\x06amount\x1ak\n\x19TronFreezeBalance\
    Contract\x12%\n\x0efrozen_balance\x18\x01\x20\x01(\x04R\rfrozenBalance\
    \x12'\n\x0ffrozen_duration\x18\x02\x20\x01(\x04R\x0efrozenDuration\x1a\
    \x1d\n\x1bTronUnfreezeBalanceContract\x1a\x1b\n\x19TronUnfreezeAssetCont\
    ract\x1a\x1d\n\x1bTronWithdrawBalanceContract\x1aM\n\x17TronUpdateAssetC\
    ontract\x12\x20\n\x0bdescription\x18\x01\x20\x01(\tR\x0bdescription\x12\
    \x10\n\x03url\x18\x02\x20\x01(\tR\x03url\x1a\xca\x01\n\x1aTronProposalCr\
    eateContract\x12j\n\nparameters\x18\x01\x20\x03(\x0b2J.TronSignTx.TronCo\
    ntract.TronProposalCreateContract.TronProposalParametersR\nparameters\
    \x1a@\n\x16TronProposalParameters\x12\x10\n\x03key\x18\x01\x20\x01(\x04R\
    \x03key\x12\x14\n\x05value\x18\x02\x20\x01(\x04R\x05value\x1af\n\x1bTron\
    ProposalApproveContract\x12\x1f\n\x0bproposal_id\x18\x01\x20\x01(\x04R\n\
    proposalId\x12&\n\x0fis_add_approval\x18\x02\x20\x01(\x08R\risAddApprova\
    l\x1a=\n\x1aTronProposalDeleteContract\x12\x1f\n\x0bproposal_id\x18\x01\
    \x20\x01(\x04R\nproposalId\"Q\n\x0cTronSignedTx\x12\x1c\n\tsignature\x18\
    \x01\x20\x01(\x0cR\tsignature\x12#\n\rserialized_tx\x18\x02\x20\x01(\x0c\
    R\x0cserializedTxB8\n#com.satoshilabs.trezor.lib.protobufB\x11TrezorMess\
    ageTronJ\x8eA\n\x07\x12\x05\0\0\xa1\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x08\x12\x03\x03\0<\n.\n\x02\x08\x01\x12\x03\x03\0<\x1a#\
    \x20Sugar\x20for\x20easier\x20handling\x20in\x20Java\n\n\x08\n\x01\x08\
    \x12\x03\x04\02\n\t\n\x02\x08\x08\x12\x03\x04\02\n\x90\x01\n\x02\x04\0\
    \x12\x04\x0c\0\x0f\x01\x1a\x83\x01*\n\x20Request:\x20Ask\x20device\x20fo\
    r\x20Tron\x20address\x20corresponding\x20to\x20address_n\x20path\n\x20@n\
    ext\x20PassphraseRequest\n\x20@next\x20TronAddress\n\x20@next\x20Failure\
    \n\n\n\n\x03\x04\0\x01\x12\x03\x0c\x08\x16\n=\n\x04\x04\0\x02\0\x12\x03\
    \r\x04\"\"0\x20BIP-32\x20path\x20to\x20derive\x20the\x20key\x20from\x20m\
    aster\x20node\n\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\r\x04\x0c\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03\r\r\x13\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\
    \r\x14\x1d\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\r\x20!\nC\n\x04\x04\0\x02\
    \x01\x12\x03\x0e\x04#\"6\x20Optionally\x20show\x20on\x20display\x20befor\
    e\x20sending\x20the\x20result\n\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\
    \x0e\x04\x0c\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0e\r\x11\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03\x0e\x12\x1e\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03\x0e!\"\nf\n\x02\x04\x01\x12\x04\x15\0\x17\x01\x1aZ*\n\x20Response:\
    \x20Contains\x20Tron\x20address\x20derived\x20from\x20device\x20private\
    \x20seed\n\x20@prev\x20TronGetAddress\n\n\n\n\x03\x04\x01\x01\x12\x03\
    \x15\x08\x13\n$\n\x04\x04\x01\x02\0\x12\x03\x16\x04\x20\"\x17\x20Tron\
    \x20address\x20(base58)\n\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x16\x04\
    \x0c\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x16\r\x13\n\x0c\n\x05\x04\x01\
    \x02\0\x01\x12\x03\x16\x14\x1b\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x16\
    \x1e\x1f\nQ\n\x02\x04\x02\x12\x05\x1d\0\x98\x01\x01\x1aD*\n\x20Request:\
    \x20Ask\x20device\x20to\x20sign\x20Tron\x20transaction\n\x20@next\x20Tro\
    nSignedTx\n\n\n\n\x03\x04\x02\x01\x12\x03\x1d\x08\x12\n=\n\x04\x04\x02\
    \x02\0\x12\x03\x1e\x04\"\"0\x20BIP-32\x20path\x20to\x20derive\x20the\x20\
    key\x20from\x20master\x20node\n\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03\
    \x1e\x04\x0c\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x1e\r\x13\n\x0c\n\x05\
    \x04\x02\x02\0\x01\x12\x03\x1e\x14\x1d\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03\x1e\x20!\nD\n\x04\x04\x02\x02\x01\x12\x03\x20\x04'\x1a\x1c\x20Commo\
    n\x20part\x20of\x20transaction\n\"\x19\x20Reference\x20block\x20number\
    \x20\n\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03\x20\x04\x0c\n\x0c\n\x05\
    \x04\x02\x02\x01\x05\x12\x03\x20\r\x12\n\x0c\n\x05\x04\x02\x02\x01\x01\
    \x12\x03\x20\x13\"\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x20%&\n#\n\
    \x04\x04\x02\x02\x02\x12\x03!\x04&\"\x16\x20Reference\x20block\x20hash\n\
    \n\x0c\n\x05\x04\x02\x02\x02\x04\x12\x03!\x04\x0c\n\x0c\n\x05\x04\x02\
    \x02\x02\x05\x12\x03!\r\x12\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03!\x13\
    !\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03!$%\n%\n\x04\x04\x02\x02\x03\
    \x12\x03\"\x04#\"\x18\x20Transaction\x20expiration\n\n\x0c\n\x05\x04\x02\
    \x02\x03\x04\x12\x03\"\x04\x0c\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03\"\
    \r\x13\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03\"\x14\x1e\n\x0c\n\x05\x04\
    \x02\x02\x03\x03\x12\x03\"!\"\n%\n\x04\x04\x02\x02\x04\x12\x03#\x04\x1d\
    \"\x18\x20Extra\x20transaction\x20info\n\n\x0c\n\x05\x04\x02\x02\x04\x04\
    \x12\x03#\x04\x0c\n\x0c\n\x05\x04\x02\x02\x04\x05\x12\x03#\r\x13\n\x0c\n\
    \x05\x04\x02\x02\x04\x01\x12\x03#\x14\x18\n\x0c\n\x05\x04\x02\x02\x04\
    \x03\x12\x03#\x1b\x1c\n\x20\n\x04\x04\x02\x02\x05\x12\x03$\x04'\"\x13\
    \x20Contract\x20messages\n\n\x0c\n\x05\x04\x02\x02\x05\x04\x12\x03$\x04\
    \x0c\n\x0c\n\x05\x04\x02\x02\x05\x06\x12\x03$\r\x19\n\x0c\n\x05\x04\x02\
    \x02\x05\x01\x12\x03$\x1a\"\n\x0c\n\x05\x04\x02\x02\x05\x03\x12\x03$%&\n\
    \x1c\n\x04\x04\x02\x02\x06\x12\x03%\x04\"\"\x0f\x20UTC\x20timestamp\n\n\
    \x0c\n\x05\x04\x02\x02\x06\x04\x12\x03%\x04\x0c\n\x0c\n\x05\x04\x02\x02\
    \x06\x05\x12\x03%\r\x13\n\x0c\n\x05\x04\x02\x02\x06\x01\x12\x03%\x14\x1d\
    \n\x0c\n\x05\x04\x02\x02\x06\x03\x12\x03%\x20!\n,\n\x04\x04\x02\x03\0\
    \x12\x05+\x04\x97\x01\x05\x1a\x1d**\n\x20Tron\x20Contracts\x20Messages\n\
    \n\n\x0c\n\x05\x04\x02\x03\0\x01\x12\x03+\x0c\x18\n%\n\x06\x04\x02\x03\0\
    \x03\0\x12\x04-\x08/\t\x1a\x15\x20Update\x20account\x20name\n\n\x0e\n\
    \x07\x04\x02\x03\0\x03\0\x01\x12\x03-\x10)\n-\n\x08\x04\x02\x03\0\x03\0\
    \x02\0\x12\x03.\x0c-\"\x1c\x20Account\x20name\x20is\x20not\x20unique\n\n\
    \x10\n\t\x04\x02\x03\0\x03\0\x02\0\x04\x12\x03.\x0c\x14\n\x10\n\t\x04\
    \x02\x03\0\x03\0\x02\0\x05\x12\x03.\x15\x1b\n\x10\n\t\x04\x02\x03\0\x03\
    \0\x02\0\x01\x12\x03.\x1c(\n\x10\n\t\x04\x02\x03\0\x03\0\x02\0\x03\x12\
    \x03.+,\n\x1e\n\x06\x04\x02\x03\0\x03\x01\x12\x041\x084\t\x1a\x0e\x20Tra\
    nsfer\x20TRX\n\n\x0e\n\x07\x04\x02\x03\0\x03\x01\x01\x12\x031\x10$\n/\n\
    \x08\x04\x02\x03\0\x03\x01\x02\0\x12\x032\x0c*\"\x1e\x20To\x20address\
    \x20-\x20decoded\x20base\x2058\n\n\x10\n\t\x04\x02\x03\0\x03\x01\x02\0\
    \x04\x12\x032\x0c\x14\n\x10\n\t\x04\x02\x03\0\x03\x01\x02\0\x05\x12\x032\
    \x15\x1a\n\x10\n\t\x04\x02\x03\0\x03\x01\x02\0\x01\x12\x032\x1b%\n\x10\n\
    \t\x04\x02\x03\0\x03\x01\x02\0\x03\x12\x032()\n,\n\x08\x04\x02\x03\0\x03\
    \x01\x02\x01\x12\x033\x0c'\"\x1b\x20TRX\x20amount\x20in\x20sun\x20(10^-6\
    )\n\n\x10\n\t\x04\x02\x03\0\x03\x01\x02\x01\x04\x12\x033\x0c\x14\n\x10\n\
    \t\x04\x02\x03\0\x03\x01\x02\x01\x05\x12\x033\x15\x1b\n\x10\n\t\x04\x02\
    \x03\0\x03\x01\x02\x01\x01\x12\x033\x1c\"\n\x10\n\t\x04\x02\x03\0\x03\
    \x01\x02\x01\x03\x12\x033%&\n\x20\n\x06\x04\x02\x03\0\x03\x02\x12\x046\
    \x08:\t\x1a\x10\x20Transfer\x20asset\n\n\x0e\n\x07\x04\x02\x03\0\x03\x02\
    \x01\x12\x036\x10)\n\x1d\n\x08\x04\x02\x03\0\x03\x02\x02\0\x12\x037\x0c+\
    \"\x0c\x20Asset\x20name\n\n\x10\n\t\x04\x02\x03\0\x03\x02\x02\0\x04\x12\
    \x037\x0c\x14\n\x10\n\t\x04\x02\x03\0\x03\x02\x02\0\x05\x12\x037\x15\x1b\
    \n\x10\n\t\x04\x02\x03\0\x03\x02\x02\0\x01\x12\x037\x1c&\n\x10\n\t\x04\
    \x02\x03\0\x03\x02\x02\0\x03\x12\x037)*\n/\n\x08\x04\x02\x03\0\x03\x02\
    \x02\x01\x12\x038\x0c*\"\x1e\x20To\x20address\x20-\x20decoded\x20base\
    \x2058\n\n\x10\n\t\x04\x02\x03\0\x03\x02\x02\x01\x04\x12\x038\x0c\x14\n\
    \x10\n\t\x04\x02\x03\0\x03\x02\x02\x01\x05\x12\x038\x15\x1a\n\x10\n\t\
    \x04\x02\x03\0\x03\x02\x02\x01\x01\x12\x038\x1b%\n\x10\n\t\x04\x02\x03\0\
    \x03\x02\x02\x01\x03\x12\x038()\n%\n\x08\x04\x02\x03\0\x03\x02\x02\x02\
    \x12\x039\x0c'\"\x14\x20Amount\x20to\x20transfer\n\n\x10\n\t\x04\x02\x03\
    \0\x03\x02\x02\x02\x04\x12\x039\x0c\x14\n\x10\n\t\x04\x02\x03\0\x03\x02\
    \x02\x02\x05\x12\x039\x15\x1b\n\x10\n\t\x04\x02\x03\0\x03\x02\x02\x02\
    \x01\x12\x039\x1c\"\n\x10\n\t\x04\x02\x03\0\x03\x02\x02\x02\x03\x12\x039\
    %&\n\x1e\n\x06\x04\x02\x03\0\x03\x03\x12\x04<\x08B\t\x1a\x0e\x20Vote\x20\
    witness\n\n\x0e\n\x07\x04\x02\x03\0\x03\x03\x01\x12\x03<\x10'\n\x10\n\
    \x08\x04\x02\x03\0\x03\x03\x03\0\x12\x04=\x0c@\r\n\x10\n\t\x04\x02\x03\0\
    \x03\x03\x03\0\x01\x12\x03=\x14\x1c\n8\n\n\x04\x02\x03\0\x03\x03\x03\0\
    \x02\0\x12\x03>\x100\"%\x20Candidate\x20Address\x20-\x20decoded\x20base\
    \x2058\n\n\x12\n\x0b\x04\x02\x03\0\x03\x03\x03\0\x02\0\x04\x12\x03>\x10\
    \x18\n\x12\n\x0b\x04\x02\x03\0\x03\x03\x03\0\x02\0\x05\x12\x03>\x19\x1e\
    \n\x12\n\x0b\x04\x02\x03\0\x03\x03\x03\0\x02\0\x01\x12\x03>\x1f+\n\x12\n\
    \x0b\x04\x02\x03\0\x03\x03\x03\0\x02\0\x03\x12\x03>./\n$\n\n\x04\x02\x03\
    \0\x03\x03\x03\0\x02\x01\x12\x03?\x10/\"\x11\x20Amount\x20of\x20votes\n\
    \n\x12\n\x0b\x04\x02\x03\0\x03\x03\x03\0\x02\x01\x04\x12\x03?\x10\x18\n\
    \x12\n\x0b\x04\x02\x03\0\x03\x03\x03\0\x02\x01\x05\x12\x03?\x19\x1f\n\
    \x12\n\x0b\x04\x02\x03\0\x03\x03\x03\0\x02\x01\x01\x12\x03?\x20*\n\x12\n\
    \x0b\x04\x02\x03\0\x03\x03\x03\0\x02\x01\x03\x12\x03?-.\n\x18\n\x08\x04\
    \x02\x03\0\x03\x03\x02\0\x12\x03A\x0c(\"\x07\x20votes\n\n\x10\n\t\x04\
    \x02\x03\0\x03\x03\x02\0\x04\x12\x03A\x0c\x14\n\x10\n\t\x04\x02\x03\0\
    \x03\x03\x02\0\x06\x12\x03A\x15\x1d\n\x10\n\t\x04\x02\x03\0\x03\x03\x02\
    \0\x01\x12\x03A\x1e#\n\x10\n\t\x04\x02\x03\0\x03\x03\x02\0\x03\x12\x03A&\
    '\n,\n\x06\x04\x02\x03\0\x03\x04\x12\x04D\x08F\t\x1a\x1c\x20Upgrade\x20a\
    ccount\x20to\x20witness\n\n\x0e\n\x07\x04\x02\x03\0\x03\x04\x01\x12\x03D\
    \x10)\n\x1e\n\x08\x04\x02\x03\0\x03\x04\x02\0\x12\x03E\x0c$\"\r\x20Witne\
    ss\x20URL\n\n\x10\n\t\x04\x02\x03\0\x03\x04\x02\0\x04\x12\x03E\x0c\x14\n\
    \x10\n\t\x04\x02\x03\0\x03\x04\x02\0\x05\x12\x03E\x15\x1b\n\x10\n\t\x04\
    \x02\x03\0\x03\x04\x02\0\x01\x12\x03E\x1c\x1f\n\x10\n\t\x04\x02\x03\0\
    \x03\x04\x02\0\x03\x12\x03E\"#\n$\n\x06\x04\x02\x03\0\x03\x05\x12\x04H\
    \x08J\t\x1a\x14\x20Update\x20witness\x20URL\n\n\x0e\n\x07\x04\x02\x03\0\
    \x03\x05\x01\x12\x03H\x10)\n\x1e\n\x08\x04\x02\x03\0\x03\x05\x02\0\x12\
    \x03I\x0c+\"\r\x20Witness\x20URL\n\n\x10\n\t\x04\x02\x03\0\x03\x05\x02\0\
    \x04\x12\x03I\x0c\x14\n\x10\n\t\x04\x02\x03\0\x03\x05\x02\0\x05\x12\x03I\
    \x15\x1b\n\x10\n\t\x04\x02\x03\0\x03\x05\x02\0\x01\x12\x03I\x1c&\n\x10\n\
    \t\x04\x02\x03\0\x03\x05\x02\0\x03\x12\x03I)*\n\x1d\n\x06\x04\x02\x03\0\
    \x03\x06\x12\x04L\x08[\t\x1a\r\x20Issue\x20Asset\n\n\x0e\n\x07\x04\x02\
    \x03\0\x03\x06\x01\x12\x03L\x10&\n\x10\n\x08\x04\x02\x03\0\x03\x06\x03\0\
    \x12\x04M\x0cP\r\n\x10\n\t\x04\x02\x03\0\x03\x06\x03\0\x01\x12\x03M\x14$\
    \n\"\n\n\x04\x02\x03\0\x03\x06\x03\0\x02\0\x12\x03N\x102\"\x0f\x20Amount\
    \x20frozen\n\n\x12\n\x0b\x04\x02\x03\0\x03\x06\x03\0\x02\0\x04\x12\x03N\
    \x10\x18\n\x12\n\x0b\x04\x02\x03\0\x03\x06\x03\0\x02\0\x05\x12\x03N\x19\
    \x1f\n\x12\n\x0b\x04\x02\x03\0\x03\x06\x03\0\x02\0\x01\x12\x03N\x20-\n\
    \x12\n\x0b\x04\x02\x03\0\x03\x06\x03\0\x02\0\x03\x12\x03N01\n)\n\n\x04\
    \x02\x03\0\x03\x06\x03\0\x02\x01\x12\x03O\x100\"\x16\x20Days\x20from\x20\
    issue\x20date\n\n\x12\n\x0b\x04\x02\x03\0\x03\x06\x03\0\x02\x01\x04\x12\
    \x03O\x10\x18\n\x12\n\x0b\x04\x02\x03\0\x03\x06\x03\0\x02\x01\x05\x12\
    \x03O\x19\x1f\n\x12\n\x0b\x04\x02\x03\0\x03\x06\x03\0\x02\x01\x01\x12\
    \x03O\x20+\n\x12\n\x0b\x04\x02\x03\0\x03\x06\x03\0\x02\x01\x03\x12\x03O.\
    /\n\x1d\n\x08\x04\x02\x03\0\x03\x06\x02\0\x12\x03Q\x0c%\"\x0c\x20Asset\
    \x20name\n\n\x10\n\t\x04\x02\x03\0\x03\x06\x02\0\x04\x12\x03Q\x0c\x14\n\
    \x10\n\t\x04\x02\x03\0\x03\x06\x02\0\x05\x12\x03Q\x15\x1b\n\x10\n\t\x04\
    \x02\x03\0\x03\x06\x02\0\x01\x12\x03Q\x1c\x20\n\x10\n\t\x04\x02\x03\0\
    \x03\x06\x02\0\x03\x12\x03Q#$\n%\n\x08\x04\x02\x03\0\x03\x06\x02\x01\x12\
    \x03R\x0c%\"\x14\x20Asset\x20abbreviation\n\n\x10\n\t\x04\x02\x03\0\x03\
    \x06\x02\x01\x04\x12\x03R\x0c\x14\n\x10\n\t\x04\x02\x03\0\x03\x06\x02\
    \x01\x05\x12\x03R\x15\x1b\n\x10\n\t\x04\x02\x03\0\x03\x06\x02\x01\x01\
    \x12\x03R\x1c\x20\n\x10\n\t\x04\x02\x03\0\x03\x06\x02\x01\x03\x12\x03R#$\
    \n0\n\x08\x04\x02\x03\0\x03\x06\x02\x02\x12\x03S\x0c-\"\x1f\x20Total\x20\
    supply\x20including\x20frozen\n\n\x10\n\t\x04\x02\x03\0\x03\x06\x02\x02\
    \x04\x12\x03S\x0c\x14\n\x10\n\t\x04\x02\x03\0\x03\x06\x02\x02\x05\x12\
    \x03S\x15\x1b\n\x10\n\t\x04\x02\x03\0\x03\x06\x02\x02\x01\x12\x03S\x1c(\
    \n\x10\n\t\x04\x02\x03\0\x03\x06\x02\x02\x03\x12\x03S+,\n\x20\n\x08\x04\
    \x02\x03\0\x03\x06\x02\x03\x12\x03T\x0c8\"\x0f\x20Frozen\x20supply\n\n\
    \x10\n\t\x04\x02\x03\0\x03\x06\x02\x03\x04\x12\x03T\x0c\x14\n\x10\n\t\
    \x04\x02\x03\0\x03\x06\x02\x03\x06\x12\x03T\x15%\n\x10\n\t\x04\x02\x03\0\
    \x03\x06\x02\x03\x01\x12\x03T&3\n\x10\n\t\x04\x02\x03\0\x03\x06\x02\x03\
    \x03\x12\x03T67\n1\n\x08\x04\x02\x03\0\x03\x06\x02\x04\x12\x03U\x0c(\"\
    \x20\x20Amount\x20of\x20TRX\x20(exchange\x20ratio)\n\n\x10\n\t\x04\x02\
    \x03\0\x03\x06\x02\x04\x04\x12\x03U\x0c\x14\n\x10\n\t\x04\x02\x03\0\x03\
    \x06\x02\x04\x05\x12\x03U\x15\x1b\n\x10\n\t\x04\x02\x03\0\x03\x06\x02\
    \x04\x01\x12\x03U\x1c#\n\x10\n\t\x04\x02\x03\0\x03\x06\x02\x04\x03\x12\
    \x03U&'\n4\n\x08\x04\x02\x03\0\x03\x06\x02\x05\x12\x03V\x0c$\"#\x20Amoun\
    t\x20of\x20tokens\x20(exchange\x20ratio)\n\n\x10\n\t\x04\x02\x03\0\x03\
    \x06\x02\x05\x04\x12\x03V\x0c\x14\n\x10\n\t\x04\x02\x03\0\x03\x06\x02\
    \x05\x05\x12\x03V\x15\x1b\n\x10\n\t\x04\x02\x03\0\x03\x06\x02\x05\x01\
    \x12\x03V\x1c\x1f\n\x10\n\t\x04\x02\x03\0\x03\x06\x02\x05\x03\x12\x03V\"\
    #\n2\n\x08\x04\x02\x03\0\x03\x06\x02\x06\x12\x03W\x0c+\"!\x20Negotiation\
    \x20start\x20date\x20and\x20time\n\n\x10\n\t\x04\x02\x03\0\x03\x06\x02\
    \x06\x04\x12\x03W\x0c\x14\n\x10\n\t\x04\x02\x03\0\x03\x06\x02\x06\x05\
    \x12\x03W\x15\x1b\n\x10\n\t\x04\x02\x03\0\x03\x06\x02\x06\x01\x12\x03W\
    \x1c&\n\x10\n\t\x04\x02\x03\0\x03\x06\x02\x06\x03\x12\x03W)*\n0\n\x08\
    \x04\x02\x03\0\x03\x06\x02\x07\x12\x03X\x0c)\"\x1f\x20Negotiation\x20end\
    \x20date\x20and\x20time\n\n\x10\n\t\x04\x02\x03\0\x03\x06\x02\x07\x04\
    \x12\x03X\x0c\x14\n\x10\n\t\x04\x02\x03\0\x03\x06\x02\x07\x05\x12\x03X\
    \x15\x1b\n\x10\n\t\x04\x02\x03\0\x03\x06\x02\x07\x01\x12\x03X\x1c$\n\x10\
    \n\t\x04\x02\x03\0\x03\x06\x02\x07\x03\x12\x03X'(\n$\n\x08\x04\x02\x03\0\
    \x03\x06\x02\x08\x12\x03Y\x0c-\"\x13\x20Asset\x20description\n\n\x10\n\t\
    \x04\x02\x03\0\x03\x06\x02\x08\x04\x12\x03Y\x0c\x14\n\x10\n\t\x04\x02\
    \x03\0\x03\x06\x02\x08\x05\x12\x03Y\x15\x1b\n\x10\n\t\x04\x02\x03\0\x03\
    \x06\x02\x08\x01\x12\x03Y\x1c'\n\x10\n\t\x04\x02\x03\0\x03\x06\x02\x08\
    \x03\x12\x03Y*,\n\x1c\n\x08\x04\x02\x03\0\x03\x06\x02\t\x12\x03Z\x0c%\"\
    \x0b\x20Asset\x20URL\n\n\x10\n\t\x04\x02\x03\0\x03\x06\x02\t\x04\x12\x03\
    Z\x0c\x14\n\x10\n\t\x04\x02\x03\0\x03\x06\x02\t\x05\x12\x03Z\x15\x1b\n\
    \x10\n\t\x04\x02\x03\0\x03\x06\x02\t\x01\x12\x03Z\x1c\x1f\n\x10\n\t\x04\
    \x02\x03\0\x03\x06\x02\t\x03\x12\x03Z\"$\n*\n\x06\x04\x02\x03\0\x03\x07\
    \x12\x04]\x08a\t\x1a\x1a\x20Participate\x20in\x20an\x20asset\x20\n\n\x0e\
    \n\x07\x04\x02\x03\0\x03\x07\x01\x12\x03]\x101\n9\n\x08\x04\x02\x03\0\
    \x03\x07\x02\0\x12\x03^\x0c*\"(\x20Asset\x20issuer\x20address\x20-\x20de\
    coded\x20base\x2058\n\n\x10\n\t\x04\x02\x03\0\x03\x07\x02\0\x04\x12\x03^\
    \x0c\x14\n\x10\n\t\x04\x02\x03\0\x03\x07\x02\0\x05\x12\x03^\x15\x1a\n\
    \x10\n\t\x04\x02\x03\0\x03\x07\x02\0\x01\x12\x03^\x1b%\n\x10\n\t\x04\x02\
    \x03\0\x03\x07\x02\0\x03\x12\x03^()\n+\n\x08\x04\x02\x03\0\x03\x07\x02\
    \x01\x12\x03_\x0c+\"\x1a\x20The\x20name\x20of\x20target\x20asset\n\n\x10\
    \n\t\x04\x02\x03\0\x03\x07\x02\x01\x04\x12\x03_\x0c\x14\n\x10\n\t\x04\
    \x02\x03\0\x03\x07\x02\x01\x05\x12\x03_\x15\x1b\n\x10\n\t\x04\x02\x03\0\
    \x03\x07\x02\x01\x01\x12\x03_\x1c&\n\x10\n\t\x04\x02\x03\0\x03\x07\x02\
    \x01\x03\x12\x03_)*\n$\n\x08\x04\x02\x03\0\x03\x07\x02\x02\x12\x03`\x0c'\
    \"\x13\x20TRX\x20amount\x20in\x20sun\n\n\x10\n\t\x04\x02\x03\0\x03\x07\
    \x02\x02\x04\x12\x03`\x0c\x14\n\x10\n\t\x04\x02\x03\0\x03\x07\x02\x02\
    \x05\x12\x03`\x15\x1b\n\x10\n\t\x04\x02\x03\0\x03\x07\x02\x02\x01\x12\
    \x03`\x1c\"\n\x10\n\t\x04\x02\x03\0\x03\x07\x02\x02\x03\x12\x03`%&\n<\n\
    \x06\x04\x02\x03\0\x03\x08\x12\x04c\x08f\t\x1a,\x20Freeze\x20TRX\x20bala\
    nce\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\n\n\x0e\n\x07\x04\x02\x03\0\x03\x08\x01\x12\
    \x03c\x10)\n#\n\x08\x04\x02\x03\0\x03\x08\x02\0\x12\x03d\x0c/\"\x12\x20A\
    mount\x20to\x20freeze\n\n\x10\n\t\x04\x02\x03\0\x03\x08\x02\0\x04\x12\
    \x03d\x0c\x14\n\x10\n\t\x04\x02\x03\0\x03\x08\x02\0\x05\x12\x03d\x15\x1b\
    \n\x10\n\t\x04\x02\x03\0\x03\x08\x02\0\x01\x12\x03d\x1c*\n\x10\n\t\x04\
    \x02\x03\0\x03\x08\x02\0\x03\x12\x03d-.\n2\n\x08\x04\x02\x03\0\x03\x08\
    \x02\x01\x12\x03e\x0c0\"!\x20Freeze\x20minimal\x20duration\x20in\x20days\
    \n\n\x10\n\t\x04\x02\x03\0\x03\x08\x02\x01\x04\x12\x03e\x0c\x14\n\x10\n\
    \t\x04\x02\x03\0\x03\x08\x02\x01\x05\x12\x03e\x15\x1b\n\x10\n\t\x04\x02\
    \x03\0\x03\x08\x02\x01\x01\x12\x03e\x1c+\n\x10\n\t\x04\x02\x03\0\x03\x08\
    \x02\x01\x03\x12\x03e./\n&\n\x06\x04\x02\x03\0\x03\t\x12\x04h\x08i\t\x1a\
    \x16\x20Unfreeze\x20TRX\x20Balance\n\n\x0e\n\x07\x04\x02\x03\0\x03\t\x01\
    \x12\x03h\x10+\n(\n\x06\x04\x02\x03\0\x03\n\x12\x04k\x08l\t\x1a\x18\x20U\
    nfreeze\x20Asset\x20Balance\n\n\x0e\n\x07\x04\x02\x03\0\x03\n\x01\x12\
    \x03k\x10)\n*\n\x06\x04\x02\x03\0\x03\x0b\x12\x04n\x08o\t\x1a\x1a\x20Wit\
    hdraw\x20witness\x20balance\n\n\x0e\n\x07\x04\x02\x03\0\x03\x0b\x01\x12\
    \x03n\x10+\n\x1e\n\x06\x04\x02\x03\0\x03\x0c\x12\x04q\x08t\t\x1a\x0e\x20\
    Update\x20Asset\n\n\x0e\n\x07\x04\x02\x03\0\x03\x0c\x01\x12\x03q\x10'\n\
    \"\n\x08\x04\x02\x03\0\x03\x0c\x02\0\x12\x03r\x0c,\"\x11\x20New\x20descr\
    iption\n\n\x10\n\t\x04\x02\x03\0\x03\x0c\x02\0\x04\x12\x03r\x0c\x14\n\
    \x10\n\t\x04\x02\x03\0\x03\x0c\x02\0\x05\x12\x03r\x15\x1b\n\x10\n\t\x04\
    \x02\x03\0\x03\x0c\x02\0\x01\x12\x03r\x1c'\n\x10\n\t\x04\x02\x03\0\x03\
    \x0c\x02\0\x03\x12\x03r*+\n\x1a\n\x08\x04\x02\x03\0\x03\x0c\x02\x01\x12\
    \x03s\x0c$\"\t\x20New\x20URL\n\n\x10\n\t\x04\x02\x03\0\x03\x0c\x02\x01\
    \x04\x12\x03s\x0c\x14\n\x10\n\t\x04\x02\x03\0\x03\x0c\x02\x01\x05\x12\
    \x03s\x15\x1b\n\x10\n\t\x04\x02\x03\0\x03\x0c\x02\x01\x01\x12\x03s\x1c\
    \x1f\n\x10\n\t\x04\x02\x03\0\x03\x0c\x02\x01\x03\x12\x03s\"#\n+\n\x06\
    \x04\x02\x03\0\x03\r\x12\x04v\x08|\t\x1a\x1b\x20Network\x20proposal\x20c\
    ontract\n\n\x0e\n\x07\x04\x02\x03\0\x03\r\x01\x12\x03v\x10*\n\x10\n\x08\
    \x04\x02\x03\0\x03\r\x03\0\x12\x04w\x0cz\r\n\x10\n\t\x04\x02\x03\0\x03\r\
    \x03\0\x01\x12\x03w\x14*\n!\n\n\x04\x02\x03\0\x03\r\x03\0\x02\0\x12\x03x\
    \x10(\"\x0e\x20Paramter\x20key\n\n\x12\n\x0b\x04\x02\x03\0\x03\r\x03\0\
    \x02\0\x04\x12\x03x\x10\x18\n\x12\n\x0b\x04\x02\x03\0\x03\r\x03\0\x02\0\
    \x05\x12\x03x\x19\x1f\n\x12\n\x0b\x04\x02\x03\0\x03\r\x03\0\x02\0\x01\
    \x12\x03x\x20#\n\x12\n\x0b\x04\x02\x03\0\x03\r\x03\0\x02\0\x03\x12\x03x&\
    '\n$\n\n\x04\x02\x03\0\x03\r\x03\0\x02\x01\x12\x03y\x10*\"\x11\x20Parame\
    ter\x20value\n\n\x12\n\x0b\x04\x02\x03\0\x03\r\x03\0\x02\x01\x04\x12\x03\
    y\x10\x18\n\x12\n\x0b\x04\x02\x03\0\x03\r\x03\0\x02\x01\x05\x12\x03y\x19\
    \x1f\n\x12\n\x0b\x04\x02\x03\0\x03\r\x03\0\x02\x01\x01\x12\x03y\x20%\n\
    \x12\n\x0b\x04\x02\x03\0\x03\r\x03\0\x02\x01\x03\x12\x03y()\n*\n\x08\x04\
    \x02\x03\0\x03\r\x02\0\x12\x03{\x0c;\"\x19\x20Parameter\x20to\x20be\x20c\
    hanged\n\n\x10\n\t\x04\x02\x03\0\x03\r\x02\0\x04\x12\x03{\x0c\x14\n\x10\
    \n\t\x04\x02\x03\0\x03\r\x02\0\x06\x12\x03{\x15+\n\x10\n\t\x04\x02\x03\0\
    \x03\r\x02\0\x01\x12\x03{,6\n\x10\n\t\x04\x02\x03\0\x03\r\x02\0\x03\x12\
    \x03{9:\n$\n\x06\x04\x02\x03\0\x03\x0e\x12\x05~\x08\x81\x01\t\x1a\x13\
    \x20Approval\x20contract\n\n\x0e\n\x07\x04\x02\x03\0\x03\x0e\x01\x12\x03\
    ~\x10+\n\x1e\n\x08\x04\x02\x03\0\x03\x0e\x02\0\x12\x03\x7f\x0c,\"\r\x20P\
    roposal\x20ID\n\n\x10\n\t\x04\x02\x03\0\x03\x0e\x02\0\x04\x12\x03\x7f\
    \x0c\x14\n\x10\n\t\x04\x02\x03\0\x03\x0e\x02\0\x05\x12\x03\x7f\x15\x1b\n\
    \x10\n\t\x04\x02\x03\0\x03\x0e\x02\0\x01\x12\x03\x7f\x1c'\n\x10\n\t\x04\
    \x02\x03\0\x03\x0e\x02\0\x03\x12\x03\x7f*+\n*\n\x08\x04\x02\x03\0\x03\
    \x0e\x02\x01\x12\x04\x80\x01\x0c.\"\x18\x20Add\x20or\x20remove\x20approv\
    al\n\n\x11\n\t\x04\x02\x03\0\x03\x0e\x02\x01\x04\x12\x04\x80\x01\x0c\x14\
    \n\x11\n\t\x04\x02\x03\0\x03\x0e\x02\x01\x05\x12\x04\x80\x01\x15\x19\n\
    \x11\n\t\x04\x02\x03\0\x03\x0e\x02\x01\x01\x12\x04\x80\x01\x1a)\n\x11\n\
    \t\x04\x02\x03\0\x03\x0e\x02\x01\x03\x12\x04\x80\x01,-\n#\n\x06\x04\x02\
    \x03\0\x03\x0f\x12\x06\x83\x01\x08\x85\x01\t\x1a\x11\x20Delete\x20propos\
    al\n\n\x0f\n\x07\x04\x02\x03\0\x03\x0f\x01\x12\x04\x83\x01\x10*\n\x1f\n\
    \x08\x04\x02\x03\0\x03\x0f\x02\0\x12\x04\x84\x01\x0c,\"\r\x20Proposal\
    \x20ID\n\n\x11\n\t\x04\x02\x03\0\x03\x0f\x02\0\x04\x12\x04\x84\x01\x0c\
    \x14\n\x11\n\t\x04\x02\x03\0\x03\x0f\x02\0\x05\x12\x04\x84\x01\x15\x1b\n\
    \x11\n\t\x04\x02\x03\0\x03\x0f\x02\0\x01\x12\x04\x84\x01\x1c'\n\x11\n\t\
    \x04\x02\x03\0\x03\x0f\x02\0\x03\x12\x04\x84\x01*+\n\x0e\n\x06\x04\x02\
    \x03\0\x02\0\x12\x04\x87\x01\x08<\n\x0f\n\x07\x04\x02\x03\0\x02\0\x04\
    \x12\x04\x87\x01\x08\x10\n\x0f\n\x07\x04\x02\x03\0\x02\0\x06\x12\x04\x87\
    \x01\x11%\n\x0f\n\x07\x04\x02\x03\0\x02\0\x01\x12\x04\x87\x01&7\n\x0f\n\
    \x07\x04\x02\x03\0\x02\0\x03\x12\x04\x87\x01:;\n\x0e\n\x06\x04\x02\x03\0\
    \x02\x01\x12\x04\x88\x01\x08G\n\x0f\n\x07\x04\x02\x03\0\x02\x01\x04\x12\
    \x04\x88\x01\x08\x10\n\x0f\n\x07\x04\x02\x03\0\x02\x01\x06\x12\x04\x88\
    \x01\x11*\n\x0f\n\x07\x04\x02\x03\0\x02\x01\x01\x12\x04\x88\x01+B\n\x0f\
    \n\x07\x04\x02\x03\0\x02\x01\x03\x12\x04\x88\x01EF\n\x0e\n\x06\x04\x02\
    \x03\0\x02\x02\x12\x04\x89\x01\x08C\n\x0f\n\x07\x04\x02\x03\0\x02\x02\
    \x04\x12\x04\x89\x01\x08\x10\n\x0f\n\x07\x04\x02\x03\0\x02\x02\x06\x12\
    \x04\x89\x01\x11(\n\x0f\n\x07\x04\x02\x03\0\x02\x02\x01\x12\x04\x89\x01)\
    >\n\x0f\n\x07\x04\x02\x03\0\x02\x02\x03\x12\x04\x89\x01AB\n\x0e\n\x06\
    \x04\x02\x03\0\x02\x03\x12\x04\x8a\x01\x08G\n\x0f\n\x07\x04\x02\x03\0\
    \x02\x03\x04\x12\x04\x8a\x01\x08\x10\n\x0f\n\x07\x04\x02\x03\0\x02\x03\
    \x06\x12\x04\x8a\x01\x11*\n\x0f\n\x07\x04\x02\x03\0\x02\x03\x01\x12\x04\
    \x8a\x01+B\n\x0f\n\x07\x04\x02\x03\0\x02\x03\x03\x12\x04\x8a\x01EF\n\x0e\
    \n\x06\x04\x02\x03\0\x02\x04\x12\x04\x8b\x01\x08A\n\x0f\n\x07\x04\x02\
    \x03\0\x02\x04\x04\x12\x04\x8b\x01\x08\x10\n\x0f\n\x07\x04\x02\x03\0\x02\
    \x04\x06\x12\x04\x8b\x01\x11'\n\x0f\n\x07\x04\x02\x03\0\x02\x04\x01\x12\
    \x04\x8b\x01(<\n\x0f\n\x07\x04\x02\x03\0\x02\x04\x03\x12\x04\x8b\x01?@\n\
    \x0e\n\x06\x04\x02\x03\0\x02\x05\x12\x04\x8c\x01\x08G\n\x0f\n\x07\x04\
    \x02\x03\0\x02\x05\x04\x12\x04\x8c\x01\x08\x10\n\x0f\n\x07\x04\x02\x03\0\
    \x02\x05\x06\x12\x04\x8c\x01\x11*\n\x0f\n\x07\x04\x02\x03\0\x02\x05\x01\
    \x12\x04\x8c\x01+B\n\x0f\n\x07\x04\x02\x03\0\x02\x05\x03\x12\x04\x8c\x01\
    EF\n\x0e\n\x06\x04\x02\x03\0\x02\x06\x12\x04\x8d\x01\x08X\n\x0f\n\x07\
    \x04\x02\x03\0\x02\x06\x04\x12\x04\x8d\x01\x08\x10\n\x0f\n\x07\x04\x02\
    \x03\0\x02\x06\x06\x12\x04\x8d\x01\x112\n\x0f\n\x07\x04\x02\x03\0\x02\
    \x06\x01\x12\x04\x8d\x013S\n\x0f\n\x07\x04\x02\x03\0\x02\x06\x03\x12\x04\
    \x8d\x01VW\n\x0e\n\x06\x04\x02\x03\0\x02\x07\x12\x04\x8e\x01\x08H\n\x0f\
    \n\x07\x04\x02\x03\0\x02\x07\x04\x12\x04\x8e\x01\x08\x10\n\x0f\n\x07\x04\
    \x02\x03\0\x02\x07\x06\x12\x04\x8e\x01\x11*\n\x0f\n\x07\x04\x02\x03\0\
    \x02\x07\x01\x12\x04\x8e\x01+B\n\x0f\n\x07\x04\x02\x03\0\x02\x07\x03\x12\
    \x04\x8e\x01EG\n\x0e\n\x06\x04\x02\x03\0\x02\x08\x12\x04\x8f\x01\x08H\n\
    \x0f\n\x07\x04\x02\x03\0\x02\x08\x04\x12\x04\x8f\x01\x08\x10\n\x0f\n\x07\
    \x04\x02\x03\0\x02\x08\x06\x12\x04\x8f\x01\x11*\n\x0f\n\x07\x04\x02\x03\
    \0\x02\x08\x01\x12\x04\x8f\x01+B\n\x0f\n\x07\x04\x02\x03\0\x02\x08\x03\
    \x12\x04\x8f\x01EG\n\x0e\n\x06\x04\x02\x03\0\x02\t\x12\x04\x90\x01\x08L\
    \n\x0f\n\x07\x04\x02\x03\0\x02\t\x04\x12\x04\x90\x01\x08\x10\n\x0f\n\x07\
    \x04\x02\x03\0\x02\t\x06\x12\x04\x90\x01\x11,\n\x0f\n\x07\x04\x02\x03\0\
    \x02\t\x01\x12\x04\x90\x01-F\n\x0f\n\x07\x04\x02\x03\0\x02\t\x03\x12\x04\
    \x90\x01IK\n\x0e\n\x06\x04\x02\x03\0\x02\n\x12\x04\x91\x01\x08L\n\x0f\n\
    \x07\x04\x02\x03\0\x02\n\x04\x12\x04\x91\x01\x08\x10\n\x0f\n\x07\x04\x02\
    \x03\0\x02\n\x06\x12\x04\x91\x01\x11,\n\x0f\n\x07\x04\x02\x03\0\x02\n\
    \x01\x12\x04\x91\x01-F\n\x0f\n\x07\x04\x02\x03\0\x02\n\x03\x12\x04\x91\
    \x01IK\n\x0e\n\x06\x04\x02\x03\0\x02\x0b\x12\x04\x92\x01\x08H\n\x0f\n\
    \x07\x04\x02\x03\0\x02\x0b\x04\x12\x04\x92\x01\x08\x10\n\x0f\n\x07\x04\
    \x02\x03\0\x02\x0b\x06\x12\x04\x92\x01\x11*\n\x0f\n\x07\x04\x02\x03\0\
    \x02\x0b\x01\x12\x04\x92\x01+B\n\x0f\n\x07\x04\x02\x03\0\x02\x0b\x03\x12\
    \x04\x92\x01EG\n\x0e\n\x06\x04\x02\x03\0\x02\x0c\x12\x04\x93\x01\x08D\n\
    \x0f\n\x07\x04\x02\x03\0\x02\x0c\x04\x12\x04\x93\x01\x08\x10\n\x0f\n\x07\
    \x04\x02\x03\0\x02\x0c\x06\x12\x04\x93\x01\x11(\n\x0f\n\x07\x04\x02\x03\
    \0\x02\x0c\x01\x12\x04\x93\x01)>\n\x0f\n\x07\x04\x02\x03\0\x02\x0c\x03\
    \x12\x04\x93\x01AC\n\x0e\n\x06\x04\x02\x03\0\x02\r\x12\x04\x94\x01\x08J\
    \n\x0f\n\x07\x04\x02\x03\0\x02\r\x04\x12\x04\x94\x01\x08\x10\n\x0f\n\x07\
    \x04\x02\x03\0\x02\r\x06\x12\x04\x94\x01\x11+\n\x0f\n\x07\x04\x02\x03\0\
    \x02\r\x01\x12\x04\x94\x01,D\n\x0f\n\x07\x04\x02\x03\0\x02\r\x03\x12\x04\
    \x94\x01GI\n\x0e\n\x06\x04\x02\x03\0\x02\x0e\x12\x04\x95\x01\x08L\n\x0f\
    \n\x07\x04\x02\x03\0\x02\x0e\x04\x12\x04\x95\x01\x08\x10\n\x0f\n\x07\x04\
    \x02\x03\0\x02\x0e\x06\x12\x04\x95\x01\x11,\n\x0f\n\x07\x04\x02\x03\0\
    \x02\x0e\x01\x12\x04\x95\x01-F\n\x0f\n\x07\x04\x02\x03\0\x02\x0e\x03\x12\
    \x04\x95\x01IK\n\x0e\n\x06\x04\x02\x03\0\x02\x0f\x12\x04\x96\x01\x08J\n\
    \x0f\n\x07\x04\x02\x03\0\x02\x0f\x04\x12\x04\x96\x01\x08\x10\n\x0f\n\x07\
    \x04\x02\x03\0\x02\x0f\x06\x12\x04\x96\x01\x11+\n\x0f\n\x07\x04\x02\x03\
    \0\x02\x0f\x01\x12\x04\x96\x01,D\n\x0f\n\x07\x04\x02\x03\0\x02\x0f\x03\
    \x12\x04\x96\x01GI\nQ\n\x02\x04\x03\x12\x06\x9e\x01\0\xa1\x01\x01\x1aC*\
    \n\x20Response:\x20Contains\x20Tron\x20transaction\x20signature\n\x20@pr\
    ev\x20TronSignTx\n\n\x0b\n\x03\x04\x03\x01\x12\x04\x9e\x01\x08\x14\n%\n\
    \x04\x04\x03\x02\0\x12\x04\x9f\x01\x04!\"\x17\x20Transaction\x20signatur\
    e\n\n\r\n\x05\x04\x03\x02\0\x04\x12\x04\x9f\x01\x04\x0c\n\r\n\x05\x04\
    \x03\x02\0\x05\x12\x04\x9f\x01\r\x12\n\r\n\x05\x04\x03\x02\0\x01\x12\x04\
    \x9f\x01\x13\x1c\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\x9f\x01\x1f\x20\n&\
    \n\x04\x04\x03\x02\x01\x12\x04\xa0\x01\x04%\"\x18\x20Serialized\x20trans\
    action\n\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04\xa0\x01\x04\x0c\n\r\n\x05\
    \x04\x03\x02\x01\x05\x12\x04\xa0\x01\r\x12\n\r\n\x05\x04\x03\x02\x01\x01\
    \x12\x04\xa0\x01\x13\x20\n\r\n\x05\x04\x03\x02\x01\x03\x12\x04\xa0\x01#$\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(24);
            messages.push(TronGetAddress::generated_message_descriptor_data());
            messages.push(TronAddress::generated_message_descriptor_data());
            messages.push(TronSignTx::generated_message_descriptor_data());
            messages.push(TronSignedTx::generated_message_descriptor_data());
            messages.push(tron_sign_tx::TronContract::generated_message_descriptor_data());
            messages.push(tron_sign_tx::tron_contract::TronAccountUpdateContract::generated_message_descriptor_data());
            messages.push(tron_sign_tx::tron_contract::TronTransferContract::generated_message_descriptor_data());
            messages.push(tron_sign_tx::tron_contract::TronTransferAssetContract::generated_message_descriptor_data());
            messages.push(tron_sign_tx::tron_contract::TronVoteWitnessContract::generated_message_descriptor_data());
            messages.push(tron_sign_tx::tron_contract::TronWitnessCreateContract::generated_message_descriptor_data());
            messages.push(tron_sign_tx::tron_contract::TronWitnessUpdateContract::generated_message_descriptor_data());
            messages.push(tron_sign_tx::tron_contract::TronAssetIssueContract::generated_message_descriptor_data());
            messages.push(tron_sign_tx::tron_contract::TronParticipateAssetIssueContract::generated_message_descriptor_data());
            messages.push(tron_sign_tx::tron_contract::TronFreezeBalanceContract::generated_message_descriptor_data());
            messages.push(tron_sign_tx::tron_contract::TronUnfreezeBalanceContract::generated_message_descriptor_data());
            messages.push(tron_sign_tx::tron_contract::TronUnfreezeAssetContract::generated_message_descriptor_data());
            messages.push(tron_sign_tx::tron_contract::TronWithdrawBalanceContract::generated_message_descriptor_data());
            messages.push(tron_sign_tx::tron_contract::TronUpdateAssetContract::generated_message_descriptor_data());
            messages.push(tron_sign_tx::tron_contract::TronProposalCreateContract::generated_message_descriptor_data());
            messages.push(tron_sign_tx::tron_contract::TronProposalApproveContract::generated_message_descriptor_data());
            messages.push(tron_sign_tx::tron_contract::TronProposalDeleteContract::generated_message_descriptor_data());
            messages.push(tron_sign_tx::tron_contract::tron_vote_witness_contract::TronVote::generated_message_descriptor_data());
            messages.push(tron_sign_tx::tron_contract::tron_asset_issue_contract::TronFrozenSupply::generated_message_descriptor_data());
            messages.push(tron_sign_tx::tron_contract::tron_proposal_create_contract::TronProposalParameters::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
